/*
 * This file was automatically generated by EvoSuite
 */

package org.prevayler.foundation;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.prevayler.foundation.FileManager;

@RunWith(EvoSuiteRunner.class)
public class TestFileManager {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = false; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  //Test case number: 0
  /*
   * 10 covered goals:
   * 1 Weak Mutation 0: org.prevayler.foundation.FileManager.produceDirectory(Ljava/lang/String;)Ljava/io/File;:7 - DeleteStatement: produceDirectory(Ljava/io/File;)V
   * 2 Weak Mutation 1: org.prevayler.foundation.FileManager.produceDirectory(Ljava/io/File;)V:11 - DeleteStatement: exists()Z
   * 3 Weak Mutation 2: org.prevayler.foundation.FileManager.produceDirectory(Ljava/io/File;)V:11 - ReplaceComparisonOperator != -> ==
   * 4 Weak Mutation 3: org.prevayler.foundation.FileManager.produceDirectory(Ljava/io/File;)V:11 - DeleteStatement: mkdirs()Z
   * 5 org.prevayler.foundation.FileManager.produceDirectory(Ljava/lang/String;)Ljava/io/File;: root-Branch
   * 6 org.prevayler.foundation.FileManager.produceDirectory(Ljava/io/File;)V: I4 Branch 1 IFNE L11 - false
   * 7 Weak Mutation 0: org.prevayler.foundation.FileManager.produceDirectory(Ljava/lang/String;)Ljava/io/File;:7 - DeleteStatement: produceDirectory(Ljava/io/File;)V
   * 8 Weak Mutation 1: org.prevayler.foundation.FileManager.produceDirectory(Ljava/io/File;)V:11 - DeleteStatement: exists()Z
   * 9 Weak Mutation 2: org.prevayler.foundation.FileManager.produceDirectory(Ljava/io/File;)V:11 - ReplaceComparisonOperator != -> ==
   * 10 Weak Mutation 3: org.prevayler.foundation.FileManager.produceDirectory(Ljava/io/File;)V:11 - DeleteStatement: mkdirs()Z
   */
  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          // Undeclared exception!
          try {
            FileManager.produceDirectory("");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission  write)
             * java.lang.Thread.getStackTrace(Thread.java:1503)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * java.io.File.mkdirs(File.java:1184)
             * org.prevayler.foundation.FileManager.produceDirectory(FileManager.java:11)
             * org.prevayler.foundation.FileManager.produceDirectory(FileManager.java:7)
             * sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:260)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:215)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:680)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  //Test case number: 1
  /*
   * 8 covered goals:
   * 1 Weak Mutation 9: org.prevayler.foundation.FileManager.produceDirectory(Ljava/io/File;)V:12 - DeleteStatement: isDirectory()Z
   * 2 Weak Mutation 10: org.prevayler.foundation.FileManager.produceDirectory(Ljava/io/File;)V:12 - ReplaceComparisonOperator != -> ==
   * 3 org.prevayler.foundation.FileManager.produceDirectory(Ljava/io/File;)V: I4 Branch 1 IFNE L11 - true
   * 4 org.prevayler.foundation.FileManager.produceDirectory(Ljava/io/File;)V: I24 Branch 3 IFNE L12 - true
   * 5 Weak Mutation 1: org.prevayler.foundation.FileManager.produceDirectory(Ljava/io/File;)V:11 - DeleteStatement: exists()Z
   * 6 Weak Mutation 2: org.prevayler.foundation.FileManager.produceDirectory(Ljava/io/File;)V:11 - ReplaceComparisonOperator != -> ==
   * 7 Weak Mutation 9: org.prevayler.foundation.FileManager.produceDirectory(Ljava/io/File;)V:12 - DeleteStatement: isDirectory()Z
   * 8 Weak Mutation 10: org.prevayler.foundation.FileManager.produceDirectory(Ljava/io/File;)V:12 - ReplaceComparisonOperator != -> ==
   */
  @Test
  public void test1()  throws Throwable  {
      File file0 = new File("");
      File file1 = new File(file0, "");
      FileManager.produceDirectory(file1);
      assertEquals("/", file1.getCanonicalPath());
  }
}
