/*
 * This file was automatically generated by EvoSuite
 */

package de.susebox.jtopas;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.susebox.jtopas.TokenizerProperty;

@RunWith(EvoSuiteRunner.class)
public class TestTokenizerProperty_4 {


  //Test case number: 4
  /*
   * 13 covered goals:
   * 1 Weak Mutation 52: de.susebox.jtopas.TokenizerProperty.isFlagSet(IZ)Z:187 - InsertUnaryOp Negation
   * 2 Weak Mutation 62: de.susebox.jtopas.TokenizerProperty.containsFlag(I)Z:210 - ReplaceComparisonOperator != -> >
   * 3 Weak Mutation 66: de.susebox.jtopas.TokenizerProperty.containsFlag(I)Z:210 - ReplaceConstant - 0 -> 1
   * 4 de.susebox.jtopas.TokenizerProperty.isFlagSet(IZ)Z: I5 Branch 1 IFEQ L184 - true
   * 5 de.susebox.jtopas.TokenizerProperty.containsFlag(I)Z: I7 Branch 3 IF_ICMPNE L210 - true
   * 6 Weak Mutation 34: de.susebox.jtopas.TokenizerProperty.isFlagSet(IZ)Z:184 - InsertUnaryOp IINC 1
   * 7 Weak Mutation 35: de.susebox.jtopas.TokenizerProperty.isFlagSet(IZ)Z:184 - InsertUnaryOp IINC -1
   * 8 Weak Mutation 33: de.susebox.jtopas.TokenizerProperty.isFlagSet(IZ)Z:184 - InsertUnaryOp Negation
   * 9 Weak Mutation 36: de.susebox.jtopas.TokenizerProperty.isFlagSet(IZ)Z:184 - DeleteStatement: containsFlag(I)Z
   * 10 Weak Mutation 37: de.susebox.jtopas.TokenizerProperty.isFlagSet(IZ)Z:184 - ReplaceComparisonOperator == -> !=
   * 11 Weak Mutation 52: de.susebox.jtopas.TokenizerProperty.isFlagSet(IZ)Z:187 - InsertUnaryOp Negation
   * 12 Weak Mutation 62: de.susebox.jtopas.TokenizerProperty.containsFlag(I)Z:210 - ReplaceComparisonOperator != -> >
   * 13 Weak Mutation 66: de.susebox.jtopas.TokenizerProperty.containsFlag(I)Z:210 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test4()  throws Throwable  {
      TokenizerProperty tokenizerProperty0 = new TokenizerProperty(4);
      boolean boolean0 = tokenizerProperty0.isFlagSet(101, true);
      assertEquals("de.susebox.jtopas.TokenizerProperty: SPECIAL_SEQUENCE, flags/mask 0x0/0x0", tokenizerProperty0.toString());
      assertEquals(0, tokenizerProperty0.getFlagMask());
      assertEquals(true, boolean0);
  }
}
