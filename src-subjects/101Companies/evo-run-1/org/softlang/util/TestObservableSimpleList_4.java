/*
 * This file was automatically generated by EvoSuite
 */

package org.softlang.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Iterator;
import java.util.Observable;
import java.util.Observer;
import org.softlang.features.Logging;
import org.softlang.features.Precedence;
import org.softlang.util.ObservableSimpleList;
import org.softlang.util.SimpleLinkedList;
import org.softlang.util.SimpleList;

@RunWith(EvoSuiteRunner.class)
public class TestObservableSimpleList_4 {


  //Test case number: 4
  /*
   * 6 covered goals:
   * 1 org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V: I21 Branch 2 IFEQ L28 - true
   * 2 Weak Mutation 0: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:27 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 3 Weak Mutation 1: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:27 - DeleteStatement: hasNext()Z
   * 4 Weak Mutation 2: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:27 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 3: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:27 - DeleteStatement: next()Ljava/lang/Object;
   * 6 Weak Mutation 4: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:28 - ReplaceComparisonOperator == -> !=
   */
  @Test
  public void test4()  throws Throwable  {
      SimpleLinkedList<Object> simpleLinkedList0 = new SimpleLinkedList<Object>();
      ObservableSimpleList<Object> observableSimpleList0 = new ObservableSimpleList<Object>((SimpleList<Object>) simpleLinkedList0);
      Iterator<Object> iterator0 = simpleLinkedList0.iterator();
      simpleLinkedList0.add((Object) iterator0);
      Logging logging0 = new Logging();
      observableSimpleList0.addObserver((Observer) logging0);
      assertEquals(1, observableSimpleList0.countObservers());
  }
}
