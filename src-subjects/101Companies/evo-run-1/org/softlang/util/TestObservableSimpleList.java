/*
 * This file was automatically generated by EvoSuite
 */

package org.softlang.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Observable;
import java.util.Observer;
import org.softlang.features.Logging;
import org.softlang.features.Precedence;
import org.softlang.util.ObservableSimpleList;
import org.softlang.util.SimpleLinkedList;
import org.softlang.util.SimpleList;

@RunWith(EvoSuiteRunner.class)
public class TestObservableSimpleList {


  //Test case number: 0
  /*
   * 19 covered goals:
   * 1 Weak Mutation 17: org.softlang.util.ObservableSimpleList.deleteObservers()V:43 - DeleteStatement: deleteObservers()V
   * 2 org.softlang.util.ObservableSimpleList.deleteObservers()V: I20 Branch 6 IFEQ L42 - false
   * 3 Weak Mutation 12: org.softlang.util.ObservableSimpleList.deleteObservers()V:41 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 4 Weak Mutation 13: org.softlang.util.ObservableSimpleList.deleteObservers()V:41 - DeleteStatement: hasNext()Z
   * 5 Weak Mutation 14: org.softlang.util.ObservableSimpleList.deleteObservers()V:41 - ReplaceComparisonOperator == -> !=
   * 6 Weak Mutation 15: org.softlang.util.ObservableSimpleList.deleteObservers()V:41 - DeleteStatement: next()Ljava/lang/Object;
   * 7 Weak Mutation 16: org.softlang.util.ObservableSimpleList.deleteObservers()V:42 - ReplaceComparisonOperator == -> !=
   * 8 Weak Mutation 12: org.softlang.util.ObservableSimpleList.deleteObservers()V:41 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 9 Weak Mutation 13: org.softlang.util.ObservableSimpleList.deleteObservers()V:41 - DeleteStatement: hasNext()Z
   * 10 Weak Mutation 14: org.softlang.util.ObservableSimpleList.deleteObservers()V:41 - ReplaceComparisonOperator == -> !=
   * 11 Weak Mutation 15: org.softlang.util.ObservableSimpleList.deleteObservers()V:41 - DeleteStatement: next()Ljava/lang/Object;
   * 12 Weak Mutation 17: org.softlang.util.ObservableSimpleList.deleteObservers()V:43 - DeleteStatement: deleteObservers()V
   * 13 Weak Mutation 16: org.softlang.util.ObservableSimpleList.deleteObservers()V:42 - ReplaceComparisonOperator == -> !=
   * 14 Weak Mutation 19: org.softlang.util.ObservableSimpleList.iterator()Ljava/util/Iterator;:53 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 15 Weak Mutation 18: org.softlang.util.ObservableSimpleList.iterator()Ljava/util/Iterator;:53 - DeleteField: innerLorg/softlang/util/SimpleList;
   * 16 org.softlang.util.ObservableSimpleList.<init>(Lorg/softlang/util/SimpleList;)V: root-Branch
   * 17 org.softlang.util.ObservableSimpleList.iterator()Ljava/util/Iterator;: root-Branch
   * 18 org.softlang.util.ObservableSimpleList.deleteObservers()V: I12 Branch 5 IFEQ L41 - true
   * 19 org.softlang.util.ObservableSimpleList.deleteObservers()V: I12 Branch 5 IFEQ L41 - false
   */
  @Test
  public void test0()  throws Throwable  {
      SimpleLinkedList<SimpleList<Observable>> simpleLinkedList0 = new SimpleLinkedList<SimpleList<Observable>>();
      ObservableSimpleList<SimpleList<Observable>> observableSimpleList0 = new ObservableSimpleList<SimpleList<Observable>>((SimpleList<SimpleList<Observable>>) simpleLinkedList0);
      SimpleLinkedList<Observable> simpleLinkedList1 = new SimpleLinkedList<Observable>();
      ObservableSimpleList<Observable> observableSimpleList1 = new ObservableSimpleList<Observable>((SimpleList<Observable>) simpleLinkedList1);
      simpleLinkedList0.add((SimpleList<Observable>) observableSimpleList1);
      observableSimpleList0.deleteObservers();
      assertEquals(0, observableSimpleList0.countObservers());
  }

  //Test case number: 1
  /*
   * 25 covered goals:
   * 1 Weak Mutation 31: org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z:68 - DeleteStatement: setChanged()V
   * 2 Weak Mutation 32: org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z:69 - DeleteStatement: notifyObservers(Ljava/lang/Object;)V
   * 3 org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z: I10 Branch 8 IFEQ L67 - false
   * 4 Weak Mutation 21: org.softlang.util.ObservableSimpleList.add(Ljava/lang/Object;)Z:57 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 5 Weak Mutation 20: org.softlang.util.ObservableSimpleList.add(Ljava/lang/Object;)Z:57 - DeleteField: innerLorg/softlang/util/SimpleList;
   * 6 Weak Mutation 23: org.softlang.util.ObservableSimpleList.add(Ljava/lang/Object;)Z:58 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 22: org.softlang.util.ObservableSimpleList.add(Ljava/lang/Object;)Z:58 - InsertUnaryOp Negation
   * 8 Weak Mutation 25: org.softlang.util.ObservableSimpleList.add(Ljava/lang/Object;)Z:60 - DeleteStatement: notifyObservers(Ljava/lang/Object;)V
   * 9 Weak Mutation 24: org.softlang.util.ObservableSimpleList.add(Ljava/lang/Object;)Z:59 - DeleteStatement: setChanged()V
   * 10 Weak Mutation 26: org.softlang.util.ObservableSimpleList.add(Ljava/lang/Object;)Z:62 - InsertUnaryOp Negation
   * 11 Weak Mutation 21: org.softlang.util.ObservableSimpleList.add(Ljava/lang/Object;)Z:57 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 12 Weak Mutation 20: org.softlang.util.ObservableSimpleList.add(Ljava/lang/Object;)Z:57 - DeleteField: innerLorg/softlang/util/SimpleList;
   * 13 Weak Mutation 23: org.softlang.util.ObservableSimpleList.add(Ljava/lang/Object;)Z:58 - ReplaceComparisonOperator == -> !=
   * 14 Weak Mutation 22: org.softlang.util.ObservableSimpleList.add(Ljava/lang/Object;)Z:58 - InsertUnaryOp Negation
   * 15 Weak Mutation 25: org.softlang.util.ObservableSimpleList.add(Ljava/lang/Object;)Z:60 - DeleteStatement: notifyObservers(Ljava/lang/Object;)V
   * 16 Weak Mutation 24: org.softlang.util.ObservableSimpleList.add(Ljava/lang/Object;)Z:59 - DeleteStatement: setChanged()V
   * 17 Weak Mutation 27: org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z:66 - DeleteField: innerLorg/softlang/util/SimpleList;
   * 18 Weak Mutation 26: org.softlang.util.ObservableSimpleList.add(Ljava/lang/Object;)Z:62 - InsertUnaryOp Negation
   * 19 Weak Mutation 29: org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z:67 - InsertUnaryOp Negation
   * 20 Weak Mutation 28: org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z:66 - DeleteStatement: remove(Ljava/lang/Object;)Z
   * 21 Weak Mutation 31: org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z:68 - DeleteStatement: setChanged()V
   * 22 Weak Mutation 30: org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z:67 - ReplaceComparisonOperator == -> !=
   * 23 Weak Mutation 32: org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z:69 - DeleteStatement: notifyObservers(Ljava/lang/Object;)V
   * 24 Weak Mutation 33: org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z:71 - InsertUnaryOp Negation
   * 25 org.softlang.util.ObservableSimpleList.add(Ljava/lang/Object;)Z: I10 Branch 7 IFEQ L58 - false
   */
  @Test
  public void test1()  throws Throwable  {
      SimpleLinkedList<SimpleList<Integer>> simpleLinkedList0 = new SimpleLinkedList<SimpleList<Integer>>();
      ObservableSimpleList<SimpleList<Integer>> observableSimpleList0 = new ObservableSimpleList<SimpleList<Integer>>((SimpleList<SimpleList<Integer>>) simpleLinkedList0);
      SimpleLinkedList<Integer> simpleLinkedList1 = new SimpleLinkedList<Integer>();
      boolean boolean0 = observableSimpleList0.add((SimpleList<Integer>) simpleLinkedList1);
      assertEquals(true, boolean0);
      
      boolean boolean1 = observableSimpleList0.remove((SimpleList<Integer>) simpleLinkedList1);
      assertEquals(false, observableSimpleList0.hasChanged());
      assertEquals(true, boolean1);
  }

  //Test case number: 2
  /*
   * 6 covered goals:
   * 1 Weak Mutation 27: org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z:66 - DeleteField: innerLorg/softlang/util/SimpleList;
   * 2 Weak Mutation 28: org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z:66 - DeleteStatement: remove(Ljava/lang/Object;)Z
   * 3 Weak Mutation 29: org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z:67 - InsertUnaryOp Negation
   * 4 Weak Mutation 30: org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z:67 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 33: org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z:71 - InsertUnaryOp Negation
   * 6 org.softlang.util.ObservableSimpleList.remove(Ljava/lang/Object;)Z: I10 Branch 8 IFEQ L67 - true
   */
  @Test
  public void test2()  throws Throwable  {
      SimpleLinkedList<SimpleList<Integer>> simpleLinkedList0 = new SimpleLinkedList<SimpleList<Integer>>();
      ObservableSimpleList<SimpleList<Integer>> observableSimpleList0 = new ObservableSimpleList<SimpleList<Integer>>((SimpleList<SimpleList<Integer>>) simpleLinkedList0);
      SimpleLinkedList<Integer> simpleLinkedList1 = new SimpleLinkedList<Integer>();
      boolean boolean0 = observableSimpleList0.remove((SimpleList<Integer>) simpleLinkedList1);
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 16 covered goals:
   * 1 org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V: I21 Branch 2 IFEQ L28 - true
   * 2 Weak Mutation 0: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:27 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 3 Weak Mutation 1: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:27 - DeleteStatement: hasNext()Z
   * 4 Weak Mutation 2: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:27 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 3: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:27 - DeleteStatement: next()Ljava/lang/Object;
   * 6 Weak Mutation 4: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:28 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 5: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:29 - DeleteStatement: addObserver(Ljava/util/Observer;)V
   * 8 Weak Mutation 0: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:27 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 9 Weak Mutation 1: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:27 - DeleteStatement: hasNext()Z
   * 10 Weak Mutation 2: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:27 - ReplaceComparisonOperator == -> !=
   * 11 Weak Mutation 3: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:27 - DeleteStatement: next()Ljava/lang/Object;
   * 12 Weak Mutation 4: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:28 - ReplaceComparisonOperator == -> !=
   * 13 Weak Mutation 5: org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V:29 - DeleteStatement: addObserver(Ljava/util/Observer;)V
   * 14 org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V: I13 Branch 1 IFEQ L27 - true
   * 15 org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V: I13 Branch 1 IFEQ L27 - false
   * 16 org.softlang.util.ObservableSimpleList.addObserver(Ljava/util/Observer;)V: I21 Branch 2 IFEQ L28 - false
   */
  @Test
  public void test3()  throws Throwable  {
      SimpleLinkedList<Observable> simpleLinkedList0 = new SimpleLinkedList<Observable>();
      SimpleLinkedList<SimpleList<Observable>> simpleLinkedList1 = new SimpleLinkedList<SimpleList<Observable>>();
      ObservableSimpleList<Observable> observableSimpleList0 = new ObservableSimpleList<Observable>((SimpleList<Observable>) simpleLinkedList0);
      ObservableSimpleList<SimpleList<Observable>> observableSimpleList1 = new ObservableSimpleList<SimpleList<Observable>>((SimpleList<SimpleList<Observable>>) simpleLinkedList1);
      simpleLinkedList1.add((SimpleList<Observable>) simpleLinkedList0);
      simpleLinkedList0.add((Observable) observableSimpleList1);
      Logging logging0 = new Logging();
      observableSimpleList0.addObserver((Observer) logging0);
      assertEquals(false, observableSimpleList0.hasChanged());
  }

  //Test case number: 4
  /*
   * 18 covered goals:
   * 1 org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V: I21 Branch 4 IFEQ L35 - true
   * 2 Weak Mutation 6: org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V:34 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 3 Weak Mutation 7: org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V:34 - DeleteStatement: hasNext()Z
   * 4 Weak Mutation 8: org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V:34 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 9: org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V:34 - DeleteStatement: next()Ljava/lang/Object;
   * 6 Weak Mutation 10: org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V:35 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 11: org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V:36 - DeleteStatement: deleteObserver(Ljava/util/Observer;)V
   * 8 Weak Mutation 19: org.softlang.util.ObservableSimpleList.iterator()Ljava/util/Iterator;:53 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 9 Weak Mutation 18: org.softlang.util.ObservableSimpleList.iterator()Ljava/util/Iterator;:53 - DeleteField: innerLorg/softlang/util/SimpleList;
   * 10 Weak Mutation 6: org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V:34 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 11 Weak Mutation 7: org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V:34 - DeleteStatement: hasNext()Z
   * 12 Weak Mutation 8: org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V:34 - ReplaceComparisonOperator == -> !=
   * 13 Weak Mutation 9: org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V:34 - DeleteStatement: next()Ljava/lang/Object;
   * 14 Weak Mutation 10: org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V:35 - ReplaceComparisonOperator == -> !=
   * 15 Weak Mutation 11: org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V:36 - DeleteStatement: deleteObserver(Ljava/util/Observer;)V
   * 16 org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V: I13 Branch 3 IFEQ L34 - true
   * 17 org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V: I13 Branch 3 IFEQ L34 - false
   * 18 org.softlang.util.ObservableSimpleList.deleteObserver(Ljava/util/Observer;)V: I21 Branch 4 IFEQ L35 - false
   */
  @Test
  public void test4()  throws Throwable  {
      SimpleLinkedList<Observable> simpleLinkedList0 = new SimpleLinkedList<Observable>();
      SimpleLinkedList<SimpleList<Observable>> simpleLinkedList1 = new SimpleLinkedList<SimpleList<Observable>>();
      ObservableSimpleList<Observable> observableSimpleList0 = new ObservableSimpleList<Observable>((SimpleList<Observable>) simpleLinkedList0);
      ObservableSimpleList<SimpleList<Observable>> observableSimpleList1 = new ObservableSimpleList<SimpleList<Observable>>((SimpleList<SimpleList<Observable>>) simpleLinkedList1);
      simpleLinkedList1.add((SimpleList<Observable>) simpleLinkedList0);
      simpleLinkedList0.add((Observable) observableSimpleList1);
      Precedence precedence0 = new Precedence();
      observableSimpleList0.deleteObserver((Observer) precedence0);
      assertEquals(false, observableSimpleList0.hasChanged());
  }
}
