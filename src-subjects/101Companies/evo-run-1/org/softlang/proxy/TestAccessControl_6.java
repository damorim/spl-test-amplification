/*
 * This file was automatically generated by EvoSuite
 */

package org.softlang.proxy;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.softlang.company.Department;
import org.softlang.company.Subunit;
import org.softlang.company.impl.pojo.DepartmentImpl;
import org.softlang.proxy.AccessControl;
import org.softlang.proxy.ProxyDepartment;

@RunWith(EvoSuiteRunner.class)
public class TestAccessControl_6 {


  //Test case number: 6
  /*
   * 44 covered goals:
   * 1 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I36 Branch 6 IF_ACMPEQ L79 - true
   * 2 Weak Mutation 14: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Employee;)Lorg/softlang/company/Employee;:60 - ReplaceComparisonOperator == -> !=
   * 3 Weak Mutation 17: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;:70 - DeleteStatement: deploy(Lorg/softlang/company/Employee;)Lorg/softlang/company/Employee;
   * 4 Weak Mutation 23: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:78 - DeleteStatement: deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;
   * 5 Weak Mutation 22: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - DeleteStatement: next()Ljava/lang/Object;
   * 6 Weak Mutation 25: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:80 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 7 Weak Mutation 24: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:79 - ReplaceComparisonOperator == -> !=
   * 8 Weak Mutation 26: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:81 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 9 Weak Mutation 31: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:85 - DeleteStatement: remove(Lorg/softlang/company/Subunit;)Z
   * 10 Weak Mutation 30: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:84 - DeleteStatement: next()Ljava/lang/Object;
   * 11 Weak Mutation 35: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:86 - DeleteStatement: next()Ljava/lang/Object;
   * 12 Weak Mutation 13: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Department;)Lorg/softlang/company/Department;:49 - ReplaceComparisonOperator == -> !=
   * 13 Weak Mutation 14: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Employee;)Lorg/softlang/company/Employee;:60 - ReplaceComparisonOperator == -> !=
   * 14 Weak Mutation 15: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;:70 - ReplaceComparisonOperator == -> !=
   * 15 Weak Mutation 17: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;:70 - DeleteStatement: deploy(Lorg/softlang/company/Employee;)Lorg/softlang/company/Employee;
   * 16 Weak Mutation 19: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 17 Weak Mutation 18: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - DeleteStatement: subunits()Ljava/lang/Iterable;
   * 18 Weak Mutation 21: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - ReplaceComparisonOperator == -> !=
   * 19 Weak Mutation 20: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - DeleteStatement: hasNext()Z
   * 20 Weak Mutation 23: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:78 - DeleteStatement: deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;
   * 21 Weak Mutation 22: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - DeleteStatement: next()Ljava/lang/Object;
   * 22 Weak Mutation 25: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:80 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 23 Weak Mutation 24: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:79 - ReplaceComparisonOperator == -> !=
   * 24 Weak Mutation 27: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:84 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 25 Weak Mutation 26: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:81 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 26 Weak Mutation 29: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:84 - ReplaceComparisonOperator == -> !=
   * 27 Weak Mutation 28: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:84 - DeleteStatement: hasNext()Z
   * 28 Weak Mutation 31: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:85 - DeleteStatement: remove(Lorg/softlang/company/Subunit;)Z
   * 29 Weak Mutation 30: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:84 - DeleteStatement: next()Ljava/lang/Object;
   * 30 Weak Mutation 34: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:86 - ReplaceComparisonOperator == -> !=
   * 31 Weak Mutation 35: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:86 - DeleteStatement: next()Ljava/lang/Object;
   * 32 Weak Mutation 32: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:86 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 33 Weak Mutation 33: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:86 - DeleteStatement: hasNext()Z
   * 34 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I21 Branch 5 IFEQ L77 - true
   * 35 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I21 Branch 5 IFEQ L77 - false
   * 36 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I36 Branch 6 IF_ACMPEQ L79 - false
   * 37 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I60 Branch 7 IFEQ L84 - true
   * 38 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I60 Branch 7 IFEQ L84 - false
   * 39 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I80 Branch 8 IFEQ L86 - true
   * 40 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I80 Branch 8 IFEQ L86 - false
   * 41 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Employee;)Lorg/softlang/company/Employee;: I4 Branch 3 IFEQ L60 - true
   * 42 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Employee;)Lorg/softlang/company/Employee;: I4 Branch 3 IFEQ L60 - false
   * 43 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Department;)Lorg/softlang/company/Department;: I4 Branch 2 IFEQ L49 - true
   * 44 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;: I4 Branch 4 IFEQ L70 - true
   */
  @Test
  public void test6()  throws Throwable  {
      AccessControl accessControl0 = new AccessControl();
      DepartmentImpl departmentImpl0 = new DepartmentImpl();
      departmentImpl0.add((Subunit) null);
      ProxyDepartment proxyDepartment0 = (ProxyDepartment)accessControl0.deploy((Department) departmentImpl0);
      assertNotNull(proxyDepartment0);
      
      ProxyDepartment proxyDepartment1 = (ProxyDepartment)accessControl0.deploy((Department) departmentImpl0);
      assertNotNull(proxyDepartment1);
      assertNotSame(proxyDepartment1, proxyDepartment0);
      assertEquals(true, accessControl0.isReadable());
      assertEquals(true, accessControl0.isWritable());
  }
}
