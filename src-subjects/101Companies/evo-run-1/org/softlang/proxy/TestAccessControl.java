/*
 * This file was automatically generated by EvoSuite
 */

package org.softlang.proxy;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.softlang.company.Company;
import org.softlang.company.Department;
import org.softlang.company.Subunit;
import org.softlang.company.impl.bean.CompanyImpl;
import org.softlang.company.impl.bean.DepartmentImpl;
import org.softlang.proxy.AccessControl;
import org.softlang.proxy.ProxyCompany;
import org.softlang.proxy.ProxyDepartment;
import org.softlang.proxy.ProxyEmployee;

@RunWith(EvoSuiteRunner.class)
public class TestAccessControl {


  //Test case number: 0
  /*
   * 8 covered goals:
   * 1 Weak Mutation 2: org.softlang.proxy.AccessControl.isReadable()Z:19 - InsertUnaryOp Negation
   * 2 Weak Mutation 3: org.softlang.proxy.AccessControl.isReadable()Z:19 - DeleteField: readZ
   * 3 org.softlang.proxy.AccessControl.isReadable()Z: root-Branch
   * 4 Weak Mutation 0: org.softlang.proxy.AccessControl.<init>()V:15 - ReplaceConstant - 1 -> 0
   * 5 Weak Mutation 1: org.softlang.proxy.AccessControl.<init>()V:16 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 2: org.softlang.proxy.AccessControl.isReadable()Z:19 - InsertUnaryOp Negation
   * 7 Weak Mutation 3: org.softlang.proxy.AccessControl.isReadable()Z:19 - DeleteField: readZ
   * 8 org.softlang.proxy.AccessControl.<init>()V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      AccessControl accessControl0 = new AccessControl();
      boolean boolean0 = accessControl0.isReadable();
      assertEquals(true, boolean0);
      assertEquals(true, accessControl0.isWritable());
  }

  //Test case number: 1
  /*
   * 5 covered goals:
   * 1 Weak Mutation 4: org.softlang.proxy.AccessControl.isWritable()Z:22 - InsertUnaryOp Negation
   * 2 Weak Mutation 5: org.softlang.proxy.AccessControl.isWritable()Z:22 - DeleteField: writeZ
   * 3 org.softlang.proxy.AccessControl.isWritable()Z: root-Branch
   * 4 Weak Mutation 4: org.softlang.proxy.AccessControl.isWritable()Z:22 - InsertUnaryOp Negation
   * 5 Weak Mutation 5: org.softlang.proxy.AccessControl.isWritable()Z:22 - DeleteField: writeZ
   */
  @Test
  public void test1()  throws Throwable  {
      AccessControl accessControl0 = new AccessControl();
      boolean boolean0 = accessControl0.isWritable();
      assertEquals(true, accessControl0.isReadable());
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 Weak Mutation 6: org.softlang.proxy.AccessControl.enableReadAcccess()V:25 - ReplaceConstant - 1 -> 0
   * 2 org.softlang.proxy.AccessControl.enableReadAcccess()V: root-Branch
   * 3 Weak Mutation 6: org.softlang.proxy.AccessControl.enableReadAcccess()V:25 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test2()  throws Throwable  {
      AccessControl accessControl0 = new AccessControl();
      accessControl0.enableReadAcccess();
      assertEquals(true, accessControl0.isReadable());
      assertEquals(true, accessControl0.isWritable());
  }

  //Test case number: 3
  /*
   * 5 covered goals:
   * 1 Weak Mutation 7: org.softlang.proxy.AccessControl.disableReadAcccess()V:28 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 8: org.softlang.proxy.AccessControl.disableReadAcccess()V:28 - ReplaceConstant - 0 -> 1
   * 3 org.softlang.proxy.AccessControl.disableReadAcccess()V: root-Branch
   * 4 Weak Mutation 7: org.softlang.proxy.AccessControl.disableReadAcccess()V:28 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 8: org.softlang.proxy.AccessControl.disableReadAcccess()V:28 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test3()  throws Throwable  {
      AccessControl accessControl0 = new AccessControl();
      accessControl0.disableReadAcccess();
      assertEquals(false, accessControl0.isReadable());
      assertEquals(false, accessControl0.isWritable());
  }

  //Test case number: 4
  /*
   * 5 covered goals:
   * 1 Weak Mutation 9: org.softlang.proxy.AccessControl.enableWriteAcccess()V:31 - ReplaceConstant - 1 -> 0
   * 2 Weak Mutation 10: org.softlang.proxy.AccessControl.enableWriteAcccess()V:31 - ReplaceConstant - 1 -> 0
   * 3 org.softlang.proxy.AccessControl.enableWriteAcccess()V: root-Branch
   * 4 Weak Mutation 9: org.softlang.proxy.AccessControl.enableWriteAcccess()V:31 - ReplaceConstant - 1 -> 0
   * 5 Weak Mutation 10: org.softlang.proxy.AccessControl.enableWriteAcccess()V:31 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test4()  throws Throwable  {
      AccessControl accessControl0 = new AccessControl();
      accessControl0.enableWriteAcccess();
      assertEquals(true, accessControl0.isWritable());
      assertEquals(true, accessControl0.isReadable());
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 Weak Mutation 11: org.softlang.proxy.AccessControl.disableWriteAcccess()V:34 - ReplaceConstant - 0 -> 1
   * 2 org.softlang.proxy.AccessControl.disableWriteAcccess()V: root-Branch
   * 3 Weak Mutation 11: org.softlang.proxy.AccessControl.disableWriteAcccess()V:34 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test5()  throws Throwable  {
      AccessControl accessControl0 = new AccessControl();
      assertEquals(true, accessControl0.isWritable());
      
      accessControl0.disableWriteAcccess();
      assertEquals(false, accessControl0.isWritable());
      assertEquals(true, accessControl0.isReadable());
  }

  //Test case number: 6
  /*
   * 39 covered goals:
   * 1 Weak Mutation 22: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - DeleteStatement: next()Ljava/lang/Object;
   * 2 Weak Mutation 23: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:78 - DeleteStatement: deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;
   * 3 Weak Mutation 24: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:79 - ReplaceComparisonOperator == -> !=
   * 4 Weak Mutation 25: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:80 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 5 Weak Mutation 26: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:81 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 6 Weak Mutation 30: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:84 - DeleteStatement: next()Ljava/lang/Object;
   * 7 Weak Mutation 31: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:85 - DeleteStatement: remove(Lorg/softlang/company/Subunit;)Z
   * 8 Weak Mutation 35: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:86 - DeleteStatement: next()Ljava/lang/Object;
   * 9 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I21 Branch 5 IFEQ L77 - false
   * 10 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I36 Branch 6 IF_ACMPEQ L79 - false
   * 11 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I60 Branch 7 IFEQ L84 - false
   * 12 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I80 Branch 8 IFEQ L86 - false
   * 13 Weak Mutation 13: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Department;)Lorg/softlang/company/Department;:49 - ReplaceComparisonOperator == -> !=
   * 14 Weak Mutation 15: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;:70 - ReplaceComparisonOperator == -> !=
   * 15 Weak Mutation 16: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;:70 - DeleteStatement: deploy(Lorg/softlang/company/Department;)Lorg/softlang/company/Department;
   * 16 Weak Mutation 19: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 17 Weak Mutation 18: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - DeleteStatement: subunits()Ljava/lang/Iterable;
   * 18 Weak Mutation 21: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - ReplaceComparisonOperator == -> !=
   * 19 Weak Mutation 20: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - DeleteStatement: hasNext()Z
   * 20 Weak Mutation 23: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:78 - DeleteStatement: deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;
   * 21 Weak Mutation 22: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - DeleteStatement: next()Ljava/lang/Object;
   * 22 Weak Mutation 25: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:80 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 23 Weak Mutation 24: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:79 - ReplaceComparisonOperator == -> !=
   * 24 Weak Mutation 27: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:84 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 25 Weak Mutation 26: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:81 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 26 Weak Mutation 29: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:84 - ReplaceComparisonOperator == -> !=
   * 27 Weak Mutation 28: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:84 - DeleteStatement: hasNext()Z
   * 28 Weak Mutation 31: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:85 - DeleteStatement: remove(Lorg/softlang/company/Subunit;)Z
   * 29 Weak Mutation 30: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:84 - DeleteStatement: next()Ljava/lang/Object;
   * 30 Weak Mutation 34: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:86 - ReplaceComparisonOperator == -> !=
   * 31 Weak Mutation 35: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:86 - DeleteStatement: next()Ljava/lang/Object;
   * 32 Weak Mutation 32: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:86 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 33 Weak Mutation 33: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:86 - DeleteStatement: hasNext()Z
   * 34 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I21 Branch 5 IFEQ L77 - true
   * 35 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I60 Branch 7 IFEQ L84 - true
   * 36 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I80 Branch 8 IFEQ L86 - true
   * 37 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Department;)Lorg/softlang/company/Department;: I4 Branch 2 IFEQ L49 - true
   * 38 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Department;)Lorg/softlang/company/Department;: I4 Branch 2 IFEQ L49 - false
   * 39 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;: I4 Branch 4 IFEQ L70 - false
   */
  @Test
  public void test6()  throws Throwable  {
      AccessControl accessControl0 = new AccessControl();
      DepartmentImpl departmentImpl0 = new DepartmentImpl();
      ProxyDepartment proxyDepartment0 = new ProxyDepartment(accessControl0, (Department) departmentImpl0);
      org.softlang.company.impl.pojo.DepartmentImpl departmentImpl1 = new org.softlang.company.impl.pojo.DepartmentImpl();
      departmentImpl1.add((Subunit) departmentImpl0);
      // Undeclared exception!
      try {
        proxyDepartment0.add((Subunit) departmentImpl1);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.softlang.proxy.ProxyDepartment cannot be cast to org.softlang.company.impl.bean.ComponentImpl
         */
      }
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Company;)Lorg/softlang/company/Company;: I4 Branch 1 IFEQ L38 - false
   * 2 Weak Mutation 12: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Company;)Lorg/softlang/company/Company;:38 - ReplaceComparisonOperator == -> !=
   * 3 Weak Mutation 12: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Company;)Lorg/softlang/company/Company;:38 - ReplaceComparisonOperator == -> !=
   */
  @Test
  public void test7()  throws Throwable  {
      AccessControl accessControl0 = new AccessControl();
      CompanyImpl companyImpl0 = new CompanyImpl();
      ProxyCompany proxyCompany0 = new ProxyCompany(accessControl0, (Company) companyImpl0);
      ProxyCompany proxyCompany1 = (ProxyCompany)accessControl0.deploy((Company) proxyCompany0);
      assertEquals(true, accessControl0.isReadable());
      assertEquals(true, accessControl0.isWritable());
      assertSame(proxyCompany0, proxyCompany1);
  }

  //Test case number: 8
  /*
   * 6 covered goals:
   * 1 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Employee;)Lorg/softlang/company/Employee;: I4 Branch 3 IFEQ L60 - true
   * 2 Weak Mutation 14: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Employee;)Lorg/softlang/company/Employee;:60 - ReplaceComparisonOperator == -> !=
   * 3 Weak Mutation 17: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;:70 - DeleteStatement: deploy(Lorg/softlang/company/Employee;)Lorg/softlang/company/Employee;
   * 4 Weak Mutation 14: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Employee;)Lorg/softlang/company/Employee;:60 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 17: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;:70 - DeleteStatement: deploy(Lorg/softlang/company/Employee;)Lorg/softlang/company/Employee;
   * 6 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;: I4 Branch 4 IFEQ L70 - true
   */
  @Test
  public void test8()  throws Throwable  {
      AccessControl accessControl0 = new AccessControl();
      ProxyEmployee proxyEmployee0 = (ProxyEmployee)accessControl0.deploy((Subunit) null);
      assertEquals(true, accessControl0.isReadable());
      assertEquals(true, accessControl0.isWritable());
      assertNotNull(proxyEmployee0);
  }

  //Test case number: 9
  /*
   * 19 covered goals:
   * 1 org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V: I36 Branch 6 IF_ACMPEQ L79 - true
   * 2 Weak Mutation 0: org.softlang.proxy.AccessControl.<init>()V:15 - ReplaceConstant - 1 -> 0
   * 3 Weak Mutation 1: org.softlang.proxy.AccessControl.<init>()V:16 - ReplaceConstant - 1 -> 0
   * 4 Weak Mutation 13: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Department;)Lorg/softlang/company/Department;:49 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 15: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;:70 - ReplaceComparisonOperator == -> !=
   * 6 Weak Mutation 16: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;:70 - DeleteStatement: deploy(Lorg/softlang/company/Department;)Lorg/softlang/company/Department;
   * 7 Weak Mutation 19: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 8 Weak Mutation 18: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - DeleteStatement: subunits()Ljava/lang/Iterable;
   * 9 Weak Mutation 21: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - ReplaceComparisonOperator == -> !=
   * 10 Weak Mutation 20: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - DeleteStatement: hasNext()Z
   * 11 Weak Mutation 23: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:78 - DeleteStatement: deploy(Lorg/softlang/company/Subunit;)Lorg/softlang/company/Subunit;
   * 12 Weak Mutation 22: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:77 - DeleteStatement: next()Ljava/lang/Object;
   * 13 Weak Mutation 24: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:79 - ReplaceComparisonOperator == -> !=
   * 14 Weak Mutation 27: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:84 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 15 Weak Mutation 29: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:84 - ReplaceComparisonOperator == -> !=
   * 16 Weak Mutation 28: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:84 - DeleteStatement: hasNext()Z
   * 17 Weak Mutation 34: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:86 - ReplaceComparisonOperator == -> !=
   * 18 Weak Mutation 32: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:86 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 19 Weak Mutation 33: org.softlang.proxy.AccessControl.deploy(Lorg/softlang/company/Container;)V:86 - DeleteStatement: hasNext()Z
   */
  @Test
  public void test9()  throws Throwable  {
      AccessControl accessControl0 = new AccessControl();
      org.softlang.company.impl.pojo.DepartmentImpl departmentImpl0 = new org.softlang.company.impl.pojo.DepartmentImpl();
      ProxyDepartment proxyDepartment0 = new ProxyDepartment(accessControl0, (Department) departmentImpl0);
      proxyDepartment0.add((Subunit) departmentImpl0);
      proxyDepartment0.add((Subunit) departmentImpl0);
      assertEquals(true, accessControl0.isWritable());
      assertEquals(true, accessControl0.isReadable());
  }
}
