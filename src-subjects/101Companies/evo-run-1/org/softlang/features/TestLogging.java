/*
 * This file was automatically generated by EvoSuite
 */

package org.softlang.features;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Observable;
import org.softlang.company.impl.bean.EmployeeImpl;
import org.softlang.features.Logging;

@RunWith(EvoSuiteRunner.class)
public class TestLogging {


  //Test case number: 0
  /*
   * 14 covered goals:
   * 1 Weak Mutation 0: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:18 - ReplaceComparisonOperator == -> !=
   * 2 Weak Mutation 1: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:18 - ReplaceComparisonOperator == -> !=
   * 3 Weak Mutation 2: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:20 - ReplaceConstant - salary -> 
   * 4 Weak Mutation 3: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:20 - DeleteStatement: StringEquals(Ljava/lang/String;Ljava/lang/Object;)I
   * 5 Weak Mutation 6: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:20 - ReplaceComparisonOperator <= -> -1
   * 6 org.softlang.features.Logging.<init>()V: root-Branch
   * 7 org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V: I4 Branch 1 IFEQ L18 - false
   * 8 org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V: I7 Branch 2 IFEQ L18 - false
   * 9 org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V: I19 Branch 3 IFLE L20 - false
   * 10 Weak Mutation 0: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:18 - ReplaceComparisonOperator == -> !=
   * 11 Weak Mutation 1: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:18 - ReplaceComparisonOperator == -> !=
   * 12 Weak Mutation 2: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:20 - ReplaceConstant - salary -> 
   * 13 Weak Mutation 3: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:20 - DeleteStatement: StringEquals(Ljava/lang/String;Ljava/lang/Object;)I
   * 14 Weak Mutation 6: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:20 - ReplaceComparisonOperator <= -> -1
   */
  @Test
  public void test0()  throws Throwable  {
      EmployeeImpl employeeImpl0 = new EmployeeImpl();
      Logging logging0 = new Logging();
      logging0.update((Observable) employeeImpl0, (Object) "salary");
      assertNull(employeeImpl0.getAddress());
  }

  //Test case number: 1
  /*
   * 5 covered goals:
   * 1 Weak Mutation 4: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:20 - ReplaceComparisonOperator <= -> ==
   * 2 org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V: I19 Branch 3 IFLE L20 - true
   * 3 Weak Mutation 2: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:20 - ReplaceConstant - salary -> 
   * 4 Weak Mutation 3: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:20 - DeleteStatement: StringEquals(Ljava/lang/String;Ljava/lang/Object;)I
   * 5 Weak Mutation 4: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:20 - ReplaceComparisonOperator <= -> ==
   */
  @Test
  public void test1()  throws Throwable  {
      Logging logging0 = new Logging();
      EmployeeImpl employeeImpl0 = new EmployeeImpl();
      logging0.update((Observable) employeeImpl0, (Object) "sal\"ry");
      assertEquals(false, employeeImpl0.hasChanged());
  }

  //Test case number: 2
  /*
   * 7 covered goals:
   * 1 Weak Mutation 7: org.softlang.features.Logging.getSize()I:35 - InsertUnaryOp Negation
   * 2 Weak Mutation 8: org.softlang.features.Logging.getSize()I:35 - InsertUnaryOp +1
   * 3 Weak Mutation 9: org.softlang.features.Logging.getSize()I:35 - InsertUnaryOp -1
   * 4 org.softlang.features.Logging.getSize()I: root-Branch
   * 5 Weak Mutation 7: org.softlang.features.Logging.getSize()I:35 - InsertUnaryOp Negation
   * 6 Weak Mutation 8: org.softlang.features.Logging.getSize()I:35 - InsertUnaryOp +1
   * 7 Weak Mutation 9: org.softlang.features.Logging.getSize()I:35 - InsertUnaryOp -1
   */
  @Test
  public void test2()  throws Throwable  {
      Logging logging0 = new Logging();
      int int0 = logging0.getSize();
      assertEquals(0, int0);
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 Weak Mutation 11: org.softlang.features.Logging.reset()V:42 - ReplaceConstant - 0 -> 1
   * 2 org.softlang.features.Logging.reset()V: root-Branch
   * 3 Weak Mutation 11: org.softlang.features.Logging.reset()V:42 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test3()  throws Throwable  {
      Logging logging0 = new Logging();
      logging0.reset();
      assertEquals(0, logging0.getSize());
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V: I7 Branch 2 IFEQ L18 - true
   * 2 Weak Mutation 0: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:18 - ReplaceComparisonOperator == -> !=
   * 3 Weak Mutation 1: org.softlang.features.Logging.update(Ljava/util/Observable;Ljava/lang/Object;)V:18 - ReplaceComparisonOperator == -> !=
   */
  @Test
  public void test4()  throws Throwable  {
      Logging logging0 = new Logging();
      EmployeeImpl employeeImpl0 = new EmployeeImpl();
      Object object0 = new Object();
      logging0.update((Observable) employeeImpl0, object0);
      assertEquals(0.0, employeeImpl0.getSalary(), 0.01D);
  }
}
