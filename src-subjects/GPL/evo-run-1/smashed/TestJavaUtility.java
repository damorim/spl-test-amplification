/*
 * This file was automatically generated by EvoSuite
 */

package smashed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import smashed.JavaUtility;

@RunWith(EvoSuiteRunner.class)
public class TestJavaUtility {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = false; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  //Test case number: 0
  /*
   * 12 covered goals:
   * 1 Weak Mutation 2: smashed.JavaUtility.writeToFile(Ljava/lang/String;Ljava/lang/String;)V:23 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 3: smashed.JavaUtility.writeToFile(Ljava/lang/String;Ljava/lang/String;)V:23 - DeleteStatement: writeToFile(Ljava/lang/String;Ljava/lang/String;Z)V
   * 3 Weak Mutation 4: smashed.JavaUtility.writeToFile(Ljava/lang/String;Ljava/lang/String;Z)V:28 - InsertUnaryOp Negation
   * 4 Weak Mutation 5: smashed.JavaUtility.writeToFile(Ljava/lang/String;Ljava/lang/String;Z)V:28 - InsertUnaryOp IINC 1
   * 5 Weak Mutation 6: smashed.JavaUtility.writeToFile(Ljava/lang/String;Ljava/lang/String;Z)V:28 - InsertUnaryOp IINC -1
   * 6 smashed.JavaUtility.writeToFile(Ljava/lang/String;Ljava/lang/String;)V: root-Branch
   * 7 smashed.JavaUtility.writeToFile(Ljava/lang/String;Ljava/lang/String;Z)V: root-Branch
   * 8 Weak Mutation 2: smashed.JavaUtility.writeToFile(Ljava/lang/String;Ljava/lang/String;)V:23 - ReplaceConstant - 0 -> 1
   * 9 Weak Mutation 3: smashed.JavaUtility.writeToFile(Ljava/lang/String;Ljava/lang/String;)V:23 - DeleteStatement: writeToFile(Ljava/lang/String;Ljava/lang/String;Z)V
   * 10 Weak Mutation 4: smashed.JavaUtility.writeToFile(Ljava/lang/String;Ljava/lang/String;Z)V:28 - InsertUnaryOp Negation
   * 11 Weak Mutation 5: smashed.JavaUtility.writeToFile(Ljava/lang/String;Ljava/lang/String;Z)V:28 - InsertUnaryOp IINC 1
   * 12 Weak Mutation 6: smashed.JavaUtility.writeToFile(Ljava/lang/String;Ljava/lang/String;Z)V:28 - InsertUnaryOp IINC -1
   */
  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          JavaUtility javaUtility0 = JavaUtility.INSTANCE;
          // Undeclared exception!
          try {
            javaUtility0.writeToFile("}n9", "}n9");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission }n9 write)
             * java.lang.Thread.getStackTrace(Thread.java:1503)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:116)
             * java.io.FileWriter.<init>(FileWriter.java:61)
             * smashed.JavaUtility.writeToFile(JavaUtility.java:28)
             * smashed.JavaUtility.writeToFile(JavaUtility.java:23)
             * sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:260)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:215)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:680)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
