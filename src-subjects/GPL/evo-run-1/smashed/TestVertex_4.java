/*
 * This file was automatically generated by EvoSuite
 */

package smashed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import smashed.FinishTimeWorkSpace;
import smashed.Vertex;
import smashed.WorkSpace;

@RunWith(EvoSuiteRunner.class)
public class TestVertex_4 {


  //Test case number: 4
  /*
   * 48 covered goals:
   * 1 Weak Mutation 36: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:113 - DeleteField: QueueLjava/util/LinkedList;
   * 2 Weak Mutation 37: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:113 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 3 Weak Mutation 40: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:119 - ReplaceComparisonOperator == -> >=
   * 4 Weak Mutation 43: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:121 - DeleteField: QueueLjava/util/LinkedList;
   * 5 Weak Mutation 44: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:121 - ReplaceConstant - 0 -> 1
   * 6 Weak Mutation 45: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:121 - DeleteStatement: get(I)Ljava/lang/Object;
   * 7 Weak Mutation 46: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:122 - DeleteField: QueueLjava/util/LinkedList;
   * 8 Weak Mutation 47: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:122 - ReplaceConstant - 0 -> 1
   * 9 Weak Mutation 48: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:122 - DeleteStatement: remove(I)Ljava/lang/Object;
   * 10 Weak Mutation 49: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:123 - DeleteStatement: bftNodeSearch(Lsmashed/WorkSpace;)V
   * 11 smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V: I49 Branch 3 IFNE L111 - false
   * 12 smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V: I64 Branch 4 IFEQ L119 - false
   * 13 Weak Mutation 10: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:88 - DeleteStatement: preVisitAction(Lsmashed/Vertex;)V
   * 14 Weak Mutation 11: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:90 - InsertUnaryOp Negation
   * 15 Weak Mutation 13: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:90 - ReplaceComparisonOperator == -> !=
   * 16 Weak Mutation 14: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:97 - ReplaceConstant - 1 -> 0
   * 17 Weak Mutation 15: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:101 - DeleteStatement: postVisitAction(Lsmashed/Vertex;)V
   * 18 Weak Mutation 17: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:103 - DeleteStatement: size()I
   * 19 Weak Mutation 16: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:103 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 20 Weak Mutation 19: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp Negation
   * 21 Weak Mutation 18: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - ReplaceConstant - 0 -> 1
   * 22 Weak Mutation 21: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp IINC -1
   * 23 Weak Mutation 20: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp IINC 1
   * 24 Weak Mutation 23: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp IINC 1
   * 25 Weak Mutation 22: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp Negation
   * 26 Weak Mutation 24: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp IINC -1
   * 27 Weak Mutation 27: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - ReplaceComparisonOperator >= -> -1
   * 28 Weak Mutation 26: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - ReplaceComparisonOperator >= -> >
   * 29 Weak Mutation 29: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - InsertUnaryOp Negation
   * 30 Weak Mutation 28: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 31 Weak Mutation 31: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - InsertUnaryOp IINC -1
   * 32 Weak Mutation 30: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - InsertUnaryOp IINC 1
   * 33 Weak Mutation 35: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:111 - ReplaceComparisonOperator != -> ==
   * 34 Weak Mutation 32: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - DeleteStatement: get(I)Ljava/lang/Object;
   * 35 Weak Mutation 33: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:111 - InsertUnaryOp Negation
   * 36 Weak Mutation 38: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:119 - DeleteField: QueueLjava/util/LinkedList;
   * 37 Weak Mutation 39: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:119 - DeleteStatement: size()I
   * 38 Weak Mutation 42: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:119 - ReplaceComparisonOperator == -> -2
   * 39 Weak Mutation 36: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:113 - DeleteField: QueueLjava/util/LinkedList;
   * 40 Weak Mutation 37: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:113 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 41 Weak Mutation 43: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:121 - DeleteField: QueueLjava/util/LinkedList;
   * 42 Weak Mutation 40: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:119 - ReplaceComparisonOperator == -> >=
   * 43 Weak Mutation 46: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:122 - DeleteField: QueueLjava/util/LinkedList;
   * 44 Weak Mutation 47: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:122 - ReplaceConstant - 0 -> 1
   * 45 Weak Mutation 44: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:121 - ReplaceConstant - 0 -> 1
   * 46 Weak Mutation 45: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:121 - DeleteStatement: get(I)Ljava/lang/Object;
   * 47 Weak Mutation 49: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:123 - DeleteStatement: bftNodeSearch(Lsmashed/WorkSpace;)V
   * 48 Weak Mutation 48: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:122 - DeleteStatement: remove(I)Ljava/lang/Object;
   */
  @Test
  public void test4()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Vertex vertex1 = new Vertex();
      vertex0.addAdjacent(vertex1);
      FinishTimeWorkSpace finishTimeWorkSpace0 = new FinishTimeWorkSpace();
      vertex0.bftNodeSearch((WorkSpace) finishTimeWorkSpace0);
      assertEquals(2, vertex0.finishTime);
      assertEquals(5, finishTimeWorkSpace0.FinishCounter);
  }
}
