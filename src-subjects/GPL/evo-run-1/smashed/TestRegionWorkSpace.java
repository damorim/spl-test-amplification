/*
 * This file was automatically generated by EvoSuite
 */

package smashed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import smashed.RegionWorkSpace;
import smashed.Vertex;

@RunWith(EvoSuiteRunner.class)
public class TestRegionWorkSpace {


  //Test case number: 0
  /*
   * 9 covered goals:
   * 1 Weak Mutation 1: smashed.RegionWorkSpace.init_vertex(Lsmashed/Vertex;)V:20 - ReplaceConstant - -1 -> 0
   * 2 Weak Mutation 2: smashed.RegionWorkSpace.init_vertex(Lsmashed/Vertex;)V:20 - ReplaceConstant - -1 -> 1
   * 3 Weak Mutation 3: smashed.RegionWorkSpace.init_vertex(Lsmashed/Vertex;)V:20 - ReplaceConstant - -1 -> -2
   * 4 smashed.RegionWorkSpace.init_vertex(Lsmashed/Vertex;)V: root-Branch
   * 5 Weak Mutation 0: smashed.RegionWorkSpace.<init>()V:14 - ReplaceConstant - 0 -> 1
   * 6 Weak Mutation 1: smashed.RegionWorkSpace.init_vertex(Lsmashed/Vertex;)V:20 - ReplaceConstant - -1 -> 0
   * 7 Weak Mutation 2: smashed.RegionWorkSpace.init_vertex(Lsmashed/Vertex;)V:20 - ReplaceConstant - -1 -> 1
   * 8 Weak Mutation 3: smashed.RegionWorkSpace.init_vertex(Lsmashed/Vertex;)V:20 - ReplaceConstant - -1 -> -2
   * 9 smashed.RegionWorkSpace.<init>()V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      RegionWorkSpace regionWorkSpace0 = new RegionWorkSpace();
      Vertex vertex0 = new Vertex();
      regionWorkSpace0.init_vertex(vertex0);
      assertEquals((-1), vertex0.componentNumber);
      assertEquals(0, regionWorkSpace0.counter);
  }

  //Test case number: 1
  /*
   * 26 covered goals:
   * 1 Weak Mutation 7: smashed.RegionWorkSpace.postVisitAction(Lsmashed/Vertex;)V:26 - DeleteField: counterI
   * 2 Weak Mutation 8: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - InsertUnaryOp Negation
   * 3 Weak Mutation 9: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - InsertUnaryOp +1
   * 4 Weak Mutation 10: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - InsertUnaryOp -1
   * 5 Weak Mutation 12: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 13: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - ReplaceArithmeticOperator + -> -
   * 7 Weak Mutation 14: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - ReplaceArithmeticOperator + -> %
   * 8 Weak Mutation 15: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - ReplaceArithmeticOperator + -> /
   * 9 Weak Mutation 16: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - ReplaceArithmeticOperator + -> *
   * 10 smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V: root-Branch
   * 11 Weak Mutation 4: smashed.RegionWorkSpace.postVisitAction(Lsmashed/Vertex;)V:26 - InsertUnaryOp Negation
   * 12 Weak Mutation 5: smashed.RegionWorkSpace.postVisitAction(Lsmashed/Vertex;)V:26 - InsertUnaryOp +1
   * 13 Weak Mutation 6: smashed.RegionWorkSpace.postVisitAction(Lsmashed/Vertex;)V:26 - InsertUnaryOp -1
   * 14 Weak Mutation 4: smashed.RegionWorkSpace.postVisitAction(Lsmashed/Vertex;)V:26 - InsertUnaryOp Negation
   * 15 Weak Mutation 5: smashed.RegionWorkSpace.postVisitAction(Lsmashed/Vertex;)V:26 - InsertUnaryOp +1
   * 16 Weak Mutation 6: smashed.RegionWorkSpace.postVisitAction(Lsmashed/Vertex;)V:26 - InsertUnaryOp -1
   * 17 Weak Mutation 7: smashed.RegionWorkSpace.postVisitAction(Lsmashed/Vertex;)V:26 - DeleteField: counterI
   * 18 Weak Mutation 8: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - InsertUnaryOp Negation
   * 19 Weak Mutation 9: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - InsertUnaryOp +1
   * 20 Weak Mutation 10: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - InsertUnaryOp -1
   * 21 Weak Mutation 12: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - ReplaceConstant - 1 -> 0
   * 22 Weak Mutation 13: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - ReplaceArithmeticOperator + -> -
   * 23 Weak Mutation 14: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - ReplaceArithmeticOperator + -> %
   * 24 Weak Mutation 15: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - ReplaceArithmeticOperator + -> /
   * 25 Weak Mutation 16: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - ReplaceArithmeticOperator + -> *
   * 26 smashed.RegionWorkSpace.postVisitAction(Lsmashed/Vertex;)V: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      RegionWorkSpace regionWorkSpace0 = new RegionWorkSpace();
      Vertex vertex0 = new Vertex();
      regionWorkSpace0.nextRegionAction(vertex0);
      regionWorkSpace0.postVisitAction(vertex0);
      assertEquals(1, regionWorkSpace0.counter);
      assertEquals(1, vertex0.componentNumber);
  }

  //Test case number: 2
  /*
   * 10 covered goals:
   * 1 Weak Mutation 11: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - DeleteField: counterI
   * 2 Weak Mutation 8: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - InsertUnaryOp Negation
   * 3 Weak Mutation 9: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - InsertUnaryOp +1
   * 4 Weak Mutation 10: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - InsertUnaryOp -1
   * 5 Weak Mutation 12: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 13: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - ReplaceArithmeticOperator + -> -
   * 7 Weak Mutation 14: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - ReplaceArithmeticOperator + -> %
   * 8 Weak Mutation 15: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - ReplaceArithmeticOperator + -> /
   * 9 Weak Mutation 16: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - ReplaceArithmeticOperator + -> *
   * 10 Weak Mutation 11: smashed.RegionWorkSpace.nextRegionAction(Lsmashed/Vertex;)V:32 - DeleteField: counterI
   */
  @Test
  public void test2()  throws Throwable  {
      RegionWorkSpace regionWorkSpace0 = new RegionWorkSpace();
      Vertex vertex0 = new Vertex();
      regionWorkSpace0.nextRegionAction(vertex0);
      regionWorkSpace0.nextRegionAction(vertex0);
      assertEquals(2, regionWorkSpace0.counter);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 smashed.RegionWorkSpace.checkNeighborAction(Lsmashed/Vertex;Lsmashed/Vertex;)V: root-Branch
   * 2 Weak Mutation 0: smashed.RegionWorkSpace.<init>()V:14 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test3()  throws Throwable  {
      RegionWorkSpace regionWorkSpace0 = new RegionWorkSpace();
      regionWorkSpace0.checkNeighborAction((Vertex) null, (Vertex) null);
      assertEquals(0, regionWorkSpace0.counter);
  }
}
