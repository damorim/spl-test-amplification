/*
 * This file was automatically generated by EvoSuite
 */

package smashed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import smashed.Edge;
import smashed.FinishTimeWorkSpace;
import smashed.Graph;
import smashed.Vertex;
import smashed.WorkSpace;

@RunWith(EvoSuiteRunner.class)
public class TestGraph_12 {


  //Test case number: 12
  /*
   * 66 covered goals:
   * 1 Weak Mutation 89: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - ReplaceComparisonOperator >= -> ==
   * 2 Weak Mutation 104: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - ReplaceComparisonOperator != -> <
   * 3 Weak Mutation 107: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:736 - ReplaceConstant - 1 -> 0
   * 4 smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I: I27 Branch 8 IF_ICMPNE L734 - true
   * 5 Weak Mutation 85: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - InsertUnaryOp Negation
   * 6 Weak Mutation 84: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - DeleteField: dweightI
   * 7 Weak Mutation 87: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - InsertUnaryOp -1
   * 8 Weak Mutation 86: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - InsertUnaryOp +1
   * 9 Weak Mutation 81: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - InsertUnaryOp Negation
   * 10 Weak Mutation 83: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - InsertUnaryOp -1
   * 11 Weak Mutation 82: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - InsertUnaryOp +1
   * 12 Weak Mutation 95: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - InsertUnaryOp Negation
   * 13 Weak Mutation 100: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - InsertUnaryOp +1
   * 14 Weak Mutation 101: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - InsertUnaryOp -1
   * 15 Weak Mutation 98: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - DeleteField: dweightI
   * 16 Weak Mutation 99: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - InsertUnaryOp Negation
   * 17 Weak Mutation 96: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - InsertUnaryOp +1
   * 18 Weak Mutation 97: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - InsertUnaryOp -1
   * 19 Weak Mutation 171: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:96 - InsertUnaryOp IINC 1
   * 20 Weak Mutation 170: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:96 - InsertUnaryOp Negation
   * 21 Weak Mutation 169: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:96 - ReplaceConstant - 0 -> 1
   * 22 Weak Mutation 175: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:96 - InsertUnaryOp IINC -1
   * 23 Weak Mutation 174: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:96 - InsertUnaryOp IINC 1
   * 24 Weak Mutation 173: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:96 - InsertUnaryOp Negation
   * 25 Weak Mutation 172: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:96 - InsertUnaryOp IINC -1
   * 26 Weak Mutation 163: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:92 - InsertUnaryOp Negation
   * 27 Weak Mutation 162: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:91 - DeleteStatement: size()I
   * 28 Weak Mutation 161: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:91 - DeleteField: verticesLjava/util/LinkedList;
   * 29 Weak Mutation 166: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:92 - ReplaceComparisonOperator != -> <
   * 30 Weak Mutation 165: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:92 - InsertUnaryOp IINC -1
   * 31 Weak Mutation 164: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:92 - InsertUnaryOp IINC 1
   * 32 Weak Mutation 186: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:103 - InsertUnaryOp Negation
   * 33 Weak Mutation 187: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:103 - InsertUnaryOp IINC 1
   * 34 Weak Mutation 184: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:98 - DeleteStatement: init_vertex(Lsmashed/WorkSpace;)V
   * 35 Weak Mutation 185: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:103 - ReplaceConstant - 0 -> 1
   * 36 Weak Mutation 190: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:103 - InsertUnaryOp IINC 1
   * 37 Weak Mutation 191: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:103 - InsertUnaryOp IINC -1
   * 38 Weak Mutation 188: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:103 - InsertUnaryOp IINC -1
   * 39 Weak Mutation 189: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:103 - InsertUnaryOp Negation
   * 40 Weak Mutation 178: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:96 - ReplaceComparisonOperator >= -> -1
   * 41 Weak Mutation 179: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:97 - DeleteField: verticesLjava/util/LinkedList;
   * 42 Weak Mutation 177: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:96 - ReplaceComparisonOperator >= -> >
   * 43 Weak Mutation 182: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:97 - InsertUnaryOp IINC -1
   * 44 Weak Mutation 183: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:97 - DeleteStatement: get(I)Ljava/lang/Object;
   * 45 Weak Mutation 180: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:97 - InsertUnaryOp Negation
   * 46 Weak Mutation 181: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:97 - InsertUnaryOp IINC 1
   * 47 Weak Mutation 204: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:107 - DeleteStatement: nodeSearch(Lsmashed/Vertex;Lsmashed/WorkSpace;)V
   * 48 Weak Mutation 207: smashed.Graph.StrongComponents()Lsmashed/Graph;:137 - DeleteStatement: GraphSearch(Lsmashed/WorkSpace;)V
   * 49 Weak Mutation 200: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:105 - InsertUnaryOp Negation
   * 50 Weak Mutation 203: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:106 - DeleteStatement: nextRegionAction(Lsmashed/Vertex;)V
   * 51 Weak Mutation 202: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:105 - ReplaceComparisonOperator != -> ==
   * 52 Weak Mutation 197: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:104 - InsertUnaryOp IINC 1
   * 53 Weak Mutation 196: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:104 - InsertUnaryOp Negation
   * 54 Weak Mutation 199: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:104 - DeleteStatement: get(I)Ljava/lang/Object;
   * 55 Weak Mutation 198: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:104 - InsertUnaryOp IINC -1
   * 56 Weak Mutation 193: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:103 - ReplaceComparisonOperator >= -> >
   * 57 Weak Mutation 195: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:104 - DeleteField: verticesLjava/util/LinkedList;
   * 58 Weak Mutation 194: smashed.Graph.GraphSearch(Lsmashed/WorkSpace;)V:103 - ReplaceComparisonOperator >= -> -1
   * 59 Weak Mutation 208: smashed.Graph.StrongComponents()Lsmashed/Graph;:140 - DeleteField: verticesLjava/util/LinkedList;
   * 60 Weak Mutation 209: smashed.Graph.StrongComponents()Lsmashed/Graph;:140 - DeleteStatement: sort(Ljava/util/List;Ljava/util/Comparator;)V
   * 61 Weak Mutation 210: smashed.Graph.StrongComponents()Lsmashed/Graph;:160 - DeleteStatement: ComputeTranspose(Lsmashed/Graph;)Lsmashed/Graph;
   * 62 Weak Mutation 211: smashed.Graph.StrongComponents()Lsmashed/Graph;:164 - DeleteStatement: GraphSearch(Lsmashed/WorkSpace;)V
   * 63 Weak Mutation 243: smashed.Graph.ComputeTranspose(Lsmashed/Graph;)Lsmashed/Graph;:192 - ReplaceComparisonOperator >= -> >
   * 64 Weak Mutation 89: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - ReplaceComparisonOperator >= -> ==
   * 65 Weak Mutation 107: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:736 - ReplaceConstant - 1 -> 0
   * 66 Weak Mutation 104: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - ReplaceComparisonOperator != -> <
   */
  @Test
  public void test12()  throws Throwable  {
      Graph graph0 = new Graph();
      Vertex vertex0 = new Vertex();
      Vertex vertex1 = new Vertex();
      graph0.addEdge(vertex0, vertex1, 0);
      graph0.addVertex(vertex1);
      Graph graph1 = graph0.StrongComponents();
      graph1.addVertex(vertex1);
      assertEquals(Integer.MAX_VALUE, vertex1.VertexCycle);
      
      graph1.ShortestPath(vertex0);
      assertEquals(0, vertex0.dweight);
  }
}
