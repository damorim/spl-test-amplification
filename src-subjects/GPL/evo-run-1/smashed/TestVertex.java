/*
 * This file was automatically generated by EvoSuite
 */

package smashed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import smashed.FinishTimeWorkSpace;
import smashed.RegionWorkSpace;
import smashed.Vertex;
import smashed.WorkSpace;
import smashed.WorkSpaceTranspose;

@RunWith(EvoSuiteRunner.class)
public class TestVertex {


  //Test case number: 0
  /*
   * 14 covered goals:
   * 1 Weak Mutation 3: smashed.Vertex.addWeight(I)V:43 - DeleteField: weightsListLjava/util/LinkedList;
   * 2 Weak Mutation 4: smashed.Vertex.addWeight(I)V:43 - InsertUnaryOp Negation
   * 3 Weak Mutation 5: smashed.Vertex.addWeight(I)V:43 - InsertUnaryOp IINC 1
   * 4 Weak Mutation 6: smashed.Vertex.addWeight(I)V:43 - InsertUnaryOp IINC -1
   * 5 Weak Mutation 7: smashed.Vertex.addWeight(I)V:43 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 6 smashed.Vertex.addWeight(I)V: root-Branch
   * 7 Weak Mutation 0: smashed.Vertex.<init>()V:19 - DeleteStatement: VertexConstructor()V
   * 8 Weak Mutation 3: smashed.Vertex.addWeight(I)V:43 - DeleteField: weightsListLjava/util/LinkedList;
   * 9 Weak Mutation 4: smashed.Vertex.addWeight(I)V:43 - InsertUnaryOp Negation
   * 10 Weak Mutation 5: smashed.Vertex.addWeight(I)V:43 - InsertUnaryOp IINC 1
   * 11 Weak Mutation 6: smashed.Vertex.addWeight(I)V:43 - InsertUnaryOp IINC -1
   * 12 Weak Mutation 7: smashed.Vertex.addWeight(I)V:43 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 13 smashed.Vertex.<init>()V: root-Branch
   * 14 smashed.Vertex.VertexConstructor()V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      vertex0.addWeight(0);
      assertEquals(0, vertex0.componentNumber);
  }

  //Test case number: 1
  /*
   * 5 covered goals:
   * 1 Weak Mutation 8: smashed.Vertex.init_vertex(Lsmashed/WorkSpace;)V:74 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 9: smashed.Vertex.init_vertex(Lsmashed/WorkSpace;)V:75 - DeleteStatement: init_vertex(Lsmashed/Vertex;)V
   * 3 smashed.Vertex.init_vertex(Lsmashed/WorkSpace;)V: root-Branch
   * 4 Weak Mutation 8: smashed.Vertex.init_vertex(Lsmashed/WorkSpace;)V:74 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 9: smashed.Vertex.init_vertex(Lsmashed/WorkSpace;)V:75 - DeleteStatement: init_vertex(Lsmashed/Vertex;)V
   */
  @Test
  public void test1()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      RegionWorkSpace regionWorkSpace0 = new RegionWorkSpace();
      vertex0.init_vertex((WorkSpace) regionWorkSpace0);
      assertEquals((-1), vertex0.componentNumber);
  }

  //Test case number: 2
  /*
   * 38 covered goals:
   * 1 Weak Mutation 12: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:90 - DeleteField: visitedZ
   * 2 Weak Mutation 50: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:135 - DeleteStatement: preVisitAction(Lsmashed/Vertex;)V
   * 3 Weak Mutation 51: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:137 - InsertUnaryOp Negation
   * 4 Weak Mutation 53: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:137 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 54: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:143 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 55: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:145 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 7 Weak Mutation 56: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:145 - DeleteStatement: size()I
   * 8 Weak Mutation 59: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp IINC 1
   * 9 Weak Mutation 58: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp Negation
   * 10 Weak Mutation 57: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - ReplaceConstant - 0 -> 1
   * 11 Weak Mutation 63: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp IINC -1
   * 12 Weak Mutation 62: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp IINC 1
   * 13 Weak Mutation 61: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp Negation
   * 14 Weak Mutation 60: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp IINC -1
   * 15 Weak Mutation 65: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - ReplaceComparisonOperator >= -> >
   * 16 Weak Mutation 74: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:155 - DeleteStatement: postVisitAction(Lsmashed/Vertex;)V
   * 17 smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V: I9 Branch 1 IFEQ L90 - false
   * 18 smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V: I9 Branch 5 IFEQ L137 - true
   * 19 smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V: I31 Branch 6 IF_ICMPGE L146 - true
   * 20 Weak Mutation 10: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:88 - DeleteStatement: preVisitAction(Lsmashed/Vertex;)V
   * 21 Weak Mutation 11: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:90 - InsertUnaryOp Negation
   * 22 Weak Mutation 12: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:90 - DeleteField: visitedZ
   * 23 Weak Mutation 13: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:90 - ReplaceComparisonOperator == -> !=
   * 24 Weak Mutation 51: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:137 - InsertUnaryOp Negation
   * 25 Weak Mutation 50: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:135 - DeleteStatement: preVisitAction(Lsmashed/Vertex;)V
   * 26 Weak Mutation 55: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:145 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 27 Weak Mutation 54: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:143 - ReplaceConstant - 1 -> 0
   * 28 Weak Mutation 53: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:137 - ReplaceComparisonOperator == -> !=
   * 29 Weak Mutation 59: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp IINC 1
   * 30 Weak Mutation 58: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp Negation
   * 31 Weak Mutation 57: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - ReplaceConstant - 0 -> 1
   * 32 Weak Mutation 56: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:145 - DeleteStatement: size()I
   * 33 Weak Mutation 63: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp IINC -1
   * 34 Weak Mutation 62: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp IINC 1
   * 35 Weak Mutation 61: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp Negation
   * 36 Weak Mutation 60: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp IINC -1
   * 37 Weak Mutation 65: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - ReplaceComparisonOperator >= -> >
   * 38 Weak Mutation 74: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:155 - DeleteStatement: postVisitAction(Lsmashed/Vertex;)V
   */
  @Test
  public void test2()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      FinishTimeWorkSpace finishTimeWorkSpace0 = new FinishTimeWorkSpace();
      vertex0.dftNodeSearch((WorkSpace) finishTimeWorkSpace0);
      WorkSpaceTranspose workSpaceTranspose0 = new WorkSpaceTranspose();
      vertex0.bftNodeSearch((WorkSpace) workSpaceTranspose0);
      assertEquals(2, vertex0.finishTime);
  }

  //Test case number: 3
  /*
   * 41 covered goals:
   * 1 Weak Mutation 27: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 29: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - InsertUnaryOp Negation
   * 3 Weak Mutation 28: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 4 Weak Mutation 31: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - InsertUnaryOp IINC -1
   * 5 Weak Mutation 30: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - InsertUnaryOp IINC 1
   * 6 Weak Mutation 32: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - DeleteStatement: get(I)Ljava/lang/Object;
   * 7 Weak Mutation 34: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:111 - DeleteField: visitedZ
   * 8 Weak Mutation 35: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:111 - ReplaceComparisonOperator != -> ==
   * 9 Weak Mutation 33: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:111 - InsertUnaryOp Negation
   * 10 smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V: I36 Branch 2 IF_ICMPGE L106 - false
   * 11 smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V: I49 Branch 3 IFNE L111 - true
   * 12 Weak Mutation 1: smashed.Vertex.addAdjacent(Lsmashed/Vertex;)V:32 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 13 Weak Mutation 2: smashed.Vertex.addAdjacent(Lsmashed/Vertex;)V:32 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 14 Weak Mutation 14: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:97 - ReplaceConstant - 1 -> 0
   * 15 Weak Mutation 15: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:101 - DeleteStatement: postVisitAction(Lsmashed/Vertex;)V
   * 16 Weak Mutation 17: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:103 - DeleteStatement: size()I
   * 17 Weak Mutation 16: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:103 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 18 Weak Mutation 19: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp Negation
   * 19 Weak Mutation 18: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - ReplaceConstant - 0 -> 1
   * 20 Weak Mutation 21: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp IINC -1
   * 21 Weak Mutation 20: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp IINC 1
   * 22 Weak Mutation 23: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp IINC 1
   * 23 Weak Mutation 22: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp Negation
   * 24 Weak Mutation 24: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp IINC -1
   * 25 Weak Mutation 27: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - ReplaceComparisonOperator >= -> -1
   * 26 Weak Mutation 26: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - ReplaceComparisonOperator >= -> >
   * 27 Weak Mutation 29: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - InsertUnaryOp Negation
   * 28 Weak Mutation 28: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 29 Weak Mutation 31: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - InsertUnaryOp IINC -1
   * 30 Weak Mutation 30: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - InsertUnaryOp IINC 1
   * 31 Weak Mutation 34: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:111 - DeleteField: visitedZ
   * 32 Weak Mutation 35: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:111 - ReplaceComparisonOperator != -> ==
   * 33 Weak Mutation 32: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - DeleteStatement: get(I)Ljava/lang/Object;
   * 34 Weak Mutation 33: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:111 - InsertUnaryOp Negation
   * 35 Weak Mutation 38: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:119 - DeleteField: QueueLjava/util/LinkedList;
   * 36 Weak Mutation 39: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:119 - DeleteStatement: size()I
   * 37 Weak Mutation 42: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:119 - ReplaceComparisonOperator == -> -2
   * 38 smashed.Vertex.addAdjacent(Lsmashed/Vertex;)V: root-Branch
   * 39 smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V: I9 Branch 1 IFEQ L90 - true
   * 40 smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V: I36 Branch 2 IF_ICMPGE L106 - true
   * 41 smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V: I64 Branch 4 IFEQ L119 - true
   */
  @Test
  public void test3()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      vertex0.addAdjacent(vertex0);
      RegionWorkSpace regionWorkSpace0 = new RegionWorkSpace();
      vertex0.bftNodeSearch((WorkSpace) regionWorkSpace0);
      assertEquals(true, vertex0.visited);
  }

  //Test case number: 4
  /*
   * 48 covered goals:
   * 1 Weak Mutation 36: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:113 - DeleteField: QueueLjava/util/LinkedList;
   * 2 Weak Mutation 37: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:113 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 3 Weak Mutation 40: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:119 - ReplaceComparisonOperator == -> >=
   * 4 Weak Mutation 43: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:121 - DeleteField: QueueLjava/util/LinkedList;
   * 5 Weak Mutation 44: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:121 - ReplaceConstant - 0 -> 1
   * 6 Weak Mutation 45: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:121 - DeleteStatement: get(I)Ljava/lang/Object;
   * 7 Weak Mutation 46: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:122 - DeleteField: QueueLjava/util/LinkedList;
   * 8 Weak Mutation 47: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:122 - ReplaceConstant - 0 -> 1
   * 9 Weak Mutation 48: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:122 - DeleteStatement: remove(I)Ljava/lang/Object;
   * 10 Weak Mutation 49: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:123 - DeleteStatement: bftNodeSearch(Lsmashed/WorkSpace;)V
   * 11 smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V: I49 Branch 3 IFNE L111 - false
   * 12 smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V: I64 Branch 4 IFEQ L119 - false
   * 13 Weak Mutation 10: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:88 - DeleteStatement: preVisitAction(Lsmashed/Vertex;)V
   * 14 Weak Mutation 11: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:90 - InsertUnaryOp Negation
   * 15 Weak Mutation 13: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:90 - ReplaceComparisonOperator == -> !=
   * 16 Weak Mutation 14: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:97 - ReplaceConstant - 1 -> 0
   * 17 Weak Mutation 15: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:101 - DeleteStatement: postVisitAction(Lsmashed/Vertex;)V
   * 18 Weak Mutation 17: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:103 - DeleteStatement: size()I
   * 19 Weak Mutation 16: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:103 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 20 Weak Mutation 19: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp Negation
   * 21 Weak Mutation 18: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - ReplaceConstant - 0 -> 1
   * 22 Weak Mutation 21: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp IINC -1
   * 23 Weak Mutation 20: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp IINC 1
   * 24 Weak Mutation 23: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp IINC 1
   * 25 Weak Mutation 22: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp Negation
   * 26 Weak Mutation 24: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - InsertUnaryOp IINC -1
   * 27 Weak Mutation 27: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - ReplaceComparisonOperator >= -> -1
   * 28 Weak Mutation 26: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:106 - ReplaceComparisonOperator >= -> >
   * 29 Weak Mutation 29: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - InsertUnaryOp Negation
   * 30 Weak Mutation 28: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 31 Weak Mutation 31: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - InsertUnaryOp IINC -1
   * 32 Weak Mutation 30: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - InsertUnaryOp IINC 1
   * 33 Weak Mutation 35: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:111 - ReplaceComparisonOperator != -> ==
   * 34 Weak Mutation 32: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:108 - DeleteStatement: get(I)Ljava/lang/Object;
   * 35 Weak Mutation 33: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:111 - InsertUnaryOp Negation
   * 36 Weak Mutation 38: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:119 - DeleteField: QueueLjava/util/LinkedList;
   * 37 Weak Mutation 39: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:119 - DeleteStatement: size()I
   * 38 Weak Mutation 42: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:119 - ReplaceComparisonOperator == -> -2
   * 39 Weak Mutation 36: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:113 - DeleteField: QueueLjava/util/LinkedList;
   * 40 Weak Mutation 37: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:113 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 41 Weak Mutation 43: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:121 - DeleteField: QueueLjava/util/LinkedList;
   * 42 Weak Mutation 40: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:119 - ReplaceComparisonOperator == -> >=
   * 43 Weak Mutation 46: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:122 - DeleteField: QueueLjava/util/LinkedList;
   * 44 Weak Mutation 47: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:122 - ReplaceConstant - 0 -> 1
   * 45 Weak Mutation 44: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:121 - ReplaceConstant - 0 -> 1
   * 46 Weak Mutation 45: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:121 - DeleteStatement: get(I)Ljava/lang/Object;
   * 47 Weak Mutation 49: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:123 - DeleteStatement: bftNodeSearch(Lsmashed/WorkSpace;)V
   * 48 Weak Mutation 48: smashed.Vertex.bftNodeSearch(Lsmashed/WorkSpace;)V:122 - DeleteStatement: remove(I)Ljava/lang/Object;
   */
  @Test
  public void test4()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Vertex vertex1 = new Vertex();
      RegionWorkSpace regionWorkSpace0 = new RegionWorkSpace();
      vertex0.addAdjacent(vertex1);
      vertex0.bftNodeSearch((WorkSpace) regionWorkSpace0);
      assertEquals(true, vertex0.visited);
  }

  //Test case number: 5
  /*
   * 35 covered goals:
   * 1 Weak Mutation 52: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:137 - DeleteField: visitedZ
   * 2 Weak Mutation 66: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - ReplaceComparisonOperator >= -> -1
   * 3 Weak Mutation 68: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:148 - InsertUnaryOp Negation
   * 4 Weak Mutation 69: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:148 - InsertUnaryOp IINC 1
   * 5 Weak Mutation 70: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:148 - InsertUnaryOp IINC -1
   * 6 Weak Mutation 71: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:148 - DeleteStatement: get(I)Ljava/lang/Object;
   * 7 Weak Mutation 67: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:148 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 8 Weak Mutation 72: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:149 - DeleteStatement: checkNeighborAction(Lsmashed/Vertex;Lsmashed/Vertex;)V
   * 9 Weak Mutation 73: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:150 - DeleteStatement: dftNodeSearch(Lsmashed/WorkSpace;)V
   * 10 smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V: I9 Branch 5 IFEQ L137 - false
   * 11 smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V: I31 Branch 6 IF_ICMPGE L146 - false
   * 12 Weak Mutation 51: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:137 - InsertUnaryOp Negation
   * 13 Weak Mutation 50: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:135 - DeleteStatement: preVisitAction(Lsmashed/Vertex;)V
   * 14 Weak Mutation 55: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:145 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 15 Weak Mutation 54: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:143 - ReplaceConstant - 1 -> 0
   * 16 Weak Mutation 53: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:137 - ReplaceComparisonOperator == -> !=
   * 17 Weak Mutation 59: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp IINC 1
   * 18 Weak Mutation 58: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp Negation
   * 19 Weak Mutation 57: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - ReplaceConstant - 0 -> 1
   * 20 Weak Mutation 56: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:145 - DeleteStatement: size()I
   * 21 Weak Mutation 63: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp IINC -1
   * 22 Weak Mutation 62: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp IINC 1
   * 23 Weak Mutation 61: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp Negation
   * 24 Weak Mutation 60: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - InsertUnaryOp IINC -1
   * 25 Weak Mutation 65: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - ReplaceComparisonOperator >= -> >
   * 26 Weak Mutation 74: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:155 - DeleteStatement: postVisitAction(Lsmashed/Vertex;)V
   * 27 Weak Mutation 52: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:137 - DeleteField: visitedZ
   * 28 Weak Mutation 68: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:148 - InsertUnaryOp Negation
   * 29 Weak Mutation 69: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:148 - InsertUnaryOp IINC 1
   * 30 Weak Mutation 70: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:148 - InsertUnaryOp IINC -1
   * 31 Weak Mutation 71: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:148 - DeleteStatement: get(I)Ljava/lang/Object;
   * 32 Weak Mutation 66: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:146 - ReplaceComparisonOperator >= -> -1
   * 33 Weak Mutation 67: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:148 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 34 Weak Mutation 72: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:149 - DeleteStatement: checkNeighborAction(Lsmashed/Vertex;Lsmashed/Vertex;)V
   * 35 Weak Mutation 73: smashed.Vertex.dftNodeSearch(Lsmashed/WorkSpace;)V:150 - DeleteStatement: dftNodeSearch(Lsmashed/WorkSpace;)V
   */
  @Test
  public void test5()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      FinishTimeWorkSpace finishTimeWorkSpace0 = new FinishTimeWorkSpace();
      vertex0.addAdjacent(vertex0);
      vertex0.dftNodeSearch((WorkSpace) finishTimeWorkSpace0);
      assertEquals(true, vertex0.visited);
      assertEquals(2, vertex0.finishTime);
  }

  //Test case number: 6
  /*
   * 57 covered goals:
   * 1 Weak Mutation 98: smashed.Vertex.display()V:257 - DeleteField: nameLjava/lang/String;
   * 2 Weak Mutation 1: smashed.Vertex.addAdjacent(Lsmashed/Vertex;)V:32 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 3 Weak Mutation 2: smashed.Vertex.addAdjacent(Lsmashed/Vertex;)V:32 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 4 Weak Mutation 76: smashed.Vertex.display()V:203 - DeleteStatement: splPrint___(Ljava/lang/String;)V
   * 5 Weak Mutation 77: smashed.Vertex.display()V:204 - DeleteField: nameLjava/lang/String;
   * 6 Weak Mutation 78: smashed.Vertex.display()V:204 - DeleteStatement: splPrint___(Ljava/lang/String;)V
   * 7 Weak Mutation 79: smashed.Vertex.display()V:253 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 8 Weak Mutation 75: smashed.Vertex.display()V:203 - ReplaceConstant - Printing vertex:  -> 
   * 9 Weak Mutation 85: smashed.Vertex.display()V:256 - InsertUnaryOp IINC 1
   * 10 Weak Mutation 84: smashed.Vertex.display()V:256 - InsertUnaryOp Negation
   * 11 Weak Mutation 87: smashed.Vertex.display()V:256 - InsertUnaryOp Negation
   * 12 Weak Mutation 86: smashed.Vertex.display()V:256 - InsertUnaryOp IINC -1
   * 13 Weak Mutation 81: smashed.Vertex.display()V:255 - ReplaceConstant - Connected to:  -> 
   * 14 Weak Mutation 80: smashed.Vertex.display()V:253 - DeleteStatement: size()I
   * 15 Weak Mutation 83: smashed.Vertex.display()V:256 - ReplaceConstant - 0 -> 1
   * 16 Weak Mutation 82: smashed.Vertex.display()V:255 - DeleteStatement: splPrint___(Ljava/lang/String;)V
   * 17 Weak Mutation 93: smashed.Vertex.display()V:257 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 18 Weak Mutation 92: smashed.Vertex.display()V:256 - ReplaceComparisonOperator >= -> -1
   * 19 Weak Mutation 95: smashed.Vertex.display()V:257 - InsertUnaryOp IINC 1
   * 20 Weak Mutation 94: smashed.Vertex.display()V:257 - InsertUnaryOp Negation
   * 21 Weak Mutation 89: smashed.Vertex.display()V:256 - InsertUnaryOp IINC -1
   * 22 Weak Mutation 88: smashed.Vertex.display()V:256 - InsertUnaryOp IINC 1
   * 23 Weak Mutation 91: smashed.Vertex.display()V:256 - ReplaceComparisonOperator >= -> >
   * 24 Weak Mutation 100: smashed.Vertex.display()V:258 - ReplaceConstant - 
 -> 
   * 25 Weak Mutation 101: smashed.Vertex.display()V:258 - DeleteStatement: splPrint___(Ljava/lang/String;)V
   * 26 Weak Mutation 99: smashed.Vertex.display()V:257 - DeleteStatement: splPrint___(Ljava/lang/String;)V
   * 27 Weak Mutation 96: smashed.Vertex.display()V:257 - InsertUnaryOp IINC -1
   * 28 Weak Mutation 97: smashed.Vertex.display()V:257 - DeleteStatement: get(I)Ljava/lang/Object;
   * 29 Weak Mutation 76: smashed.Vertex.display()V:203 - DeleteStatement: splPrint___(Ljava/lang/String;)V
   * 30 Weak Mutation 77: smashed.Vertex.display()V:204 - DeleteField: nameLjava/lang/String;
   * 31 Weak Mutation 78: smashed.Vertex.display()V:204 - DeleteStatement: splPrint___(Ljava/lang/String;)V
   * 32 Weak Mutation 79: smashed.Vertex.display()V:253 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 33 Weak Mutation 75: smashed.Vertex.display()V:203 - ReplaceConstant - Printing vertex:  -> 
   * 34 Weak Mutation 85: smashed.Vertex.display()V:256 - InsertUnaryOp IINC 1
   * 35 Weak Mutation 84: smashed.Vertex.display()V:256 - InsertUnaryOp Negation
   * 36 Weak Mutation 87: smashed.Vertex.display()V:256 - InsertUnaryOp Negation
   * 37 Weak Mutation 86: smashed.Vertex.display()V:256 - InsertUnaryOp IINC -1
   * 38 Weak Mutation 81: smashed.Vertex.display()V:255 - ReplaceConstant - Connected to:  -> 
   * 39 Weak Mutation 80: smashed.Vertex.display()V:253 - DeleteStatement: size()I
   * 40 Weak Mutation 83: smashed.Vertex.display()V:256 - ReplaceConstant - 0 -> 1
   * 41 Weak Mutation 82: smashed.Vertex.display()V:255 - DeleteStatement: splPrint___(Ljava/lang/String;)V
   * 42 Weak Mutation 93: smashed.Vertex.display()V:257 - DeleteField: adjacentVerticesLjava/util/LinkedList;
   * 43 Weak Mutation 92: smashed.Vertex.display()V:256 - ReplaceComparisonOperator >= -> -1
   * 44 Weak Mutation 95: smashed.Vertex.display()V:257 - InsertUnaryOp IINC 1
   * 45 Weak Mutation 94: smashed.Vertex.display()V:257 - InsertUnaryOp Negation
   * 46 Weak Mutation 89: smashed.Vertex.display()V:256 - InsertUnaryOp IINC -1
   * 47 Weak Mutation 88: smashed.Vertex.display()V:256 - InsertUnaryOp IINC 1
   * 48 Weak Mutation 91: smashed.Vertex.display()V:256 - ReplaceComparisonOperator >= -> >
   * 49 Weak Mutation 100: smashed.Vertex.display()V:258 - ReplaceConstant - 
 -> 
   * 50 Weak Mutation 101: smashed.Vertex.display()V:258 - DeleteStatement: splPrint___(Ljava/lang/String;)V
   * 51 Weak Mutation 98: smashed.Vertex.display()V:257 - DeleteField: nameLjava/lang/String;
   * 52 Weak Mutation 99: smashed.Vertex.display()V:257 - DeleteStatement: splPrint___(Ljava/lang/String;)V
   * 53 Weak Mutation 96: smashed.Vertex.display()V:257 - InsertUnaryOp IINC -1
   * 54 Weak Mutation 97: smashed.Vertex.display()V:257 - DeleteStatement: get(I)Ljava/lang/Object;
   * 55 smashed.Vertex.assignName(Ljava/lang/String;)Lsmashed/Vertex;: root-Branch
   * 56 smashed.Vertex.display()V: I26 Branch 7 IF_ICMPGE L256 - true
   * 57 smashed.Vertex.display()V: I26 Branch 7 IF_ICMPGE L256 - false
   */
  @Test
  public void test6()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Vertex vertex1 = vertex0.assignName("[_");
      vertex0.addAdjacent(vertex1);
      vertex0.display();
      assertEquals(0, vertex0.componentNumber);
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 smashed.Vertex.adjustAdorns(Lsmashed/Vertex;I)V: root-Branch
   * 2 Weak Mutation 0: smashed.Vertex.<init>()V:19 - DeleteStatement: VertexConstructor()V
   */
  @Test
  public void test7()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      vertex0.adjustAdorns(vertex0, 0);
      assertEquals(0, vertex0.componentNumber);
  }
}
