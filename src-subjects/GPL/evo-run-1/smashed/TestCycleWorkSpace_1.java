/*
 * This file was automatically generated by EvoSuite
 */

package smashed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import smashed.CycleWorkSpace;
import smashed.Vertex;
import smashed.WorkSpace;

@RunWith(EvoSuiteRunner.class)
public class TestCycleWorkSpace_1 {


  //Test case number: 1
  /*
   * 41 covered goals:
   * 1 Weak Mutation 9: smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V:32 - DeleteField: visitedZ
   * 2 Weak Mutation 23: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:44 - ReplaceConstant - 2 -> 1
   * 3 Weak Mutation 22: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:44 - ReplaceConstant - 2 -> 0
   * 4 Weak Mutation 25: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:44 - ReplaceConstant - 2 -> 3
   * 5 Weak Mutation 24: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:44 - ReplaceConstant - 2 -> -1
   * 6 Weak Mutation 27: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - InsertUnaryOp +1
   * 7 Weak Mutation 26: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - InsertUnaryOp Negation
   * 8 Weak Mutation 29: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - DeleteField: counterI
   * 9 Weak Mutation 28: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - InsertUnaryOp -1
   * 10 Weak Mutation 31: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - ReplaceArithmeticOperator - -> +
   * 11 Weak Mutation 30: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - ReplaceConstant - 1 -> 0
   * 12 Weak Mutation 34: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - ReplaceArithmeticOperator - -> *
   * 13 Weak Mutation 33: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - ReplaceArithmeticOperator - -> /
   * 14 smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V: root-Branch
   * 15 smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V: I5 Branch 1 IF_ICMPEQ L32 - true
   * 16 Weak Mutation 8: smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V:32 - InsertUnaryOp Negation
   * 17 Weak Mutation 9: smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V:32 - DeleteField: visitedZ
   * 18 Weak Mutation 10: smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V:32 - ReplaceConstant - 1 -> 0
   * 19 Weak Mutation 11: smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V:32 - ReplaceComparisonOperator == -> !=
   * 20 Weak Mutation 12: smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V:35 - InsertUnaryOp Negation
   * 21 Weak Mutation 13: smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V:35 - InsertUnaryOp +1
   * 22 Weak Mutation 14: smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V:35 - InsertUnaryOp -1
   * 23 Weak Mutation 17: smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V:35 - ReplaceArithmeticOperator + -> -
   * 24 Weak Mutation 16: smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V:35 - ReplaceConstant - 1 -> 0
   * 25 Weak Mutation 19: smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V:35 - ReplaceArithmeticOperator + -> /
   * 26 Weak Mutation 18: smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V:35 - ReplaceArithmeticOperator + -> %
   * 27 Weak Mutation 21: smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V:36 - ReplaceConstant - 1 -> 0
   * 28 Weak Mutation 20: smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V:35 - ReplaceArithmeticOperator + -> *
   * 29 Weak Mutation 23: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:44 - ReplaceConstant - 2 -> 1
   * 30 Weak Mutation 22: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:44 - ReplaceConstant - 2 -> 0
   * 31 Weak Mutation 25: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:44 - ReplaceConstant - 2 -> 3
   * 32 Weak Mutation 24: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:44 - ReplaceConstant - 2 -> -1
   * 33 Weak Mutation 27: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - InsertUnaryOp +1
   * 34 Weak Mutation 26: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - InsertUnaryOp Negation
   * 35 Weak Mutation 29: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - DeleteField: counterI
   * 36 Weak Mutation 28: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - InsertUnaryOp -1
   * 37 Weak Mutation 31: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - ReplaceArithmeticOperator - -> +
   * 38 Weak Mutation 30: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - ReplaceConstant - 1 -> 0
   * 39 Weak Mutation 34: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - ReplaceArithmeticOperator - -> *
   * 40 Weak Mutation 33: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - ReplaceArithmeticOperator - -> /
   * 41 smashed.CycleWorkSpace.preVisitAction(Lsmashed/Vertex;)V: I5 Branch 1 IF_ICMPEQ L32 - false
   */
  @Test
  public void test1()  throws Throwable  {
      CycleWorkSpace cycleWorkSpace0 = new CycleWorkSpace();
      Vertex vertex0 = new Vertex();
      vertex0.bftNodeSearch((WorkSpace) cycleWorkSpace0);
      vertex0.bftNodeSearch((WorkSpace) cycleWorkSpace0);
      assertEquals(2, vertex0.VertexColor);
      assertEquals(0, cycleWorkSpace0.counter);
  }
}
