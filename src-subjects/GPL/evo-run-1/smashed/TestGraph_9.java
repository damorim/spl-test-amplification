/*
 * This file was automatically generated by EvoSuite
 */

package smashed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import smashed.Edge;
import smashed.FinishTimeWorkSpace;
import smashed.Graph;
import smashed.Vertex;
import smashed.WorkSpace;

@RunWith(EvoSuiteRunner.class)
public class TestGraph_9 {


  //Test case number: 9
  /*
   * 10 covered goals:
   * 1 Weak Mutation 35: smashed.Graph$2.compare(Ljava/lang/Object;Ljava/lang/Object;)I:328 - ReplaceComparisonOperator >= -> ==
   * 2 Weak Mutation 50: smashed.Graph$2.compare(Ljava/lang/Object;Ljava/lang/Object;)I:331 - ReplaceComparisonOperator != -> <
   * 3 Weak Mutation 53: smashed.Graph$2.compare(Ljava/lang/Object;Ljava/lang/Object;)I:333 - ReplaceConstant - 1 -> 0
   * 4 smashed.Graph$2.compare(Ljava/lang/Object;Ljava/lang/Object;)I: I27 Branch 4 IF_ICMPNE L331 - true
   * 5 smashed.Graph.Prim(Lsmashed/Vertex;)Lsmashed/Graph;: I200 Branch 28 IFGE L338 - false
   * 6 Weak Mutation 30: smashed.Graph$2.compare(Ljava/lang/Object;Ljava/lang/Object;)I:328 - DeleteField: keyI
   * 7 Weak Mutation 44: smashed.Graph$2.compare(Ljava/lang/Object;Ljava/lang/Object;)I:331 - DeleteField: keyI
   * 8 Weak Mutation 35: smashed.Graph$2.compare(Ljava/lang/Object;Ljava/lang/Object;)I:328 - ReplaceComparisonOperator >= -> ==
   * 9 Weak Mutation 50: smashed.Graph$2.compare(Ljava/lang/Object;Ljava/lang/Object;)I:331 - ReplaceComparisonOperator != -> <
   * 10 Weak Mutation 53: smashed.Graph$2.compare(Ljava/lang/Object;Ljava/lang/Object;)I:333 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test9()  throws Throwable  {
      Graph graph0 = new Graph();
      Vertex vertex0 = new Vertex();
      Edge edge0 = new Edge(vertex0, vertex0, 0);
      Vertex vertex1 = new Vertex();
      graph0.addEdge(vertex0, vertex1, 0);
      graph0.addVertex(vertex1);
      Graph graph1 = graph0.StrongComponents();
      Vertex vertex2 = vertex1.assignName((String) null);
      graph1.addVertex(vertex2);
      assertEquals(Integer.MAX_VALUE, vertex1.VertexCycle);
      
      graph1.Prim(edge0.end);
      assertEquals(0, vertex0.key);
  }
}
