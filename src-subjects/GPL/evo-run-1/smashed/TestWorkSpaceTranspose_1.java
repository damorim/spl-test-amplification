/*
 * This file was automatically generated by EvoSuite
 */

package smashed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import smashed.Vertex;
import smashed.WorkSpace;
import smashed.WorkSpaceTranspose;

@RunWith(EvoSuiteRunner.class)
public class TestWorkSpaceTranspose_1 {


  //Test case number: 1
  /*
   * 25 covered goals:
   * 1 Weak Mutation 8: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:30 - DeleteField: SCCCounterI
   * 2 Weak Mutation 9: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - InsertUnaryOp Negation
   * 3 Weak Mutation 10: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - InsertUnaryOp +1
   * 4 Weak Mutation 11: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - InsertUnaryOp -1
   * 5 Weak Mutation 13: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 14: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - ReplaceArithmeticOperator + -> -
   * 7 Weak Mutation 15: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - ReplaceArithmeticOperator + -> %
   * 8 Weak Mutation 17: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - ReplaceArithmeticOperator + -> *
   * 9 Weak Mutation 16: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - ReplaceArithmeticOperator + -> /
   * 10 smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V: root-Branch
   * 11 Weak Mutation 1: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:28 - InsertUnaryOp Negation
   * 12 Weak Mutation 3: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:28 - ReplaceConstant - 1 -> 0
   * 13 Weak Mutation 4: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:28 - ReplaceComparisonOperator == -> !=
   * 14 Weak Mutation 5: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:30 - InsertUnaryOp Negation
   * 15 Weak Mutation 6: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:30 - InsertUnaryOp +1
   * 16 Weak Mutation 7: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:30 - InsertUnaryOp -1
   * 17 Weak Mutation 8: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:30 - DeleteField: SCCCounterI
   * 18 Weak Mutation 9: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - InsertUnaryOp Negation
   * 19 Weak Mutation 10: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - InsertUnaryOp +1
   * 20 Weak Mutation 11: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - InsertUnaryOp -1
   * 21 Weak Mutation 13: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - ReplaceConstant - 1 -> 0
   * 22 Weak Mutation 14: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - ReplaceArithmeticOperator + -> -
   * 23 Weak Mutation 15: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - ReplaceArithmeticOperator + -> %
   * 24 Weak Mutation 17: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - ReplaceArithmeticOperator + -> *
   * 25 Weak Mutation 16: smashed.WorkSpaceTranspose.nextRegionAction(Lsmashed/Vertex;)V:39 - ReplaceArithmeticOperator + -> /
   */
  @Test
  public void test1()  throws Throwable  {
      WorkSpaceTranspose workSpaceTranspose0 = new WorkSpaceTranspose();
      Vertex vertex0 = new Vertex();
      workSpaceTranspose0.nextRegionAction(vertex0);
      workSpaceTranspose0.preVisitAction(vertex0);
      assertEquals(1, vertex0.strongComponentNumber);
      assertEquals(1, workSpaceTranspose0.SCCCounter);
  }
}
