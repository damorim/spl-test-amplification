/*
 * This file was automatically generated by EvoSuite
 */

package smashed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import smashed.Vertex;
import smashed.WorkSpace;
import smashed.WorkSpaceTranspose;

@RunWith(EvoSuiteRunner.class)
public class TestWorkSpaceTranspose_0 {


  //Test case number: 0
  /*
   * 13 covered goals:
   * 1 Weak Mutation 2: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:28 - DeleteField: visitedZ
   * 2 smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V: I5 Branch 1 IF_ICMPEQ L28 - true
   * 3 Weak Mutation 0: smashed.WorkSpaceTranspose.<init>()V:21 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 1: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:28 - InsertUnaryOp Negation
   * 5 Weak Mutation 2: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:28 - DeleteField: visitedZ
   * 6 Weak Mutation 3: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:28 - ReplaceConstant - 1 -> 0
   * 7 Weak Mutation 4: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:28 - ReplaceComparisonOperator == -> !=
   * 8 Weak Mutation 5: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:30 - InsertUnaryOp Negation
   * 9 Weak Mutation 6: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:30 - InsertUnaryOp +1
   * 10 Weak Mutation 7: smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V:30 - InsertUnaryOp -1
   * 11 smashed.WorkSpaceTranspose.postVisitAction(Lsmashed/Vertex;)V: root-Branch
   * 12 smashed.WorkSpaceTranspose.<init>()V: root-Branch
   * 13 smashed.WorkSpaceTranspose.preVisitAction(Lsmashed/Vertex;)V: I5 Branch 1 IF_ICMPEQ L28 - false
   */
  @Test
  public void test0()  throws Throwable  {
      WorkSpaceTranspose workSpaceTranspose0 = new WorkSpaceTranspose();
      Vertex vertex0 = new Vertex();
      vertex0.bftNodeSearch((WorkSpace) workSpaceTranspose0);
      workSpaceTranspose0.preVisitAction(vertex0);
      assertEquals(0, vertex0.strongComponentNumber);
  }
}
