/*
 * This file was automatically generated by EvoSuite
 */

package smashed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import smashed.Edge;
import smashed.FinishTimeWorkSpace;
import smashed.Graph;
import smashed.Vertex;
import smashed.WorkSpace;

@RunWith(EvoSuiteRunner.class)
public class TestGraph_11 {


  //Test case number: 11
  /*
   * 30 covered goals:
   * 1 Weak Mutation 84: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - DeleteField: dweightI
   * 2 Weak Mutation 88: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - DeleteField: dweightI
   * 3 Weak Mutation 102: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - DeleteField: dweightI
   * 4 Weak Mutation 98: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - DeleteField: dweightI
   * 5 Weak Mutation 90: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - ReplaceComparisonOperator >= -> >
   * 6 Weak Mutation 106: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:735 - ReplaceConstant - 0 -> 1
   * 7 Weak Mutation 105: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - ReplaceComparisonOperator != -> -1
   * 8 Weak Mutation 85: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - InsertUnaryOp Negation
   * 9 Weak Mutation 84: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - DeleteField: dweightI
   * 10 Weak Mutation 87: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - InsertUnaryOp -1
   * 11 Weak Mutation 86: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - InsertUnaryOp +1
   * 12 Weak Mutation 81: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - InsertUnaryOp Negation
   * 13 Weak Mutation 83: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - InsertUnaryOp -1
   * 14 Weak Mutation 82: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - InsertUnaryOp +1
   * 15 Weak Mutation 95: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - InsertUnaryOp Negation
   * 16 Weak Mutation 88: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - DeleteField: dweightI
   * 17 Weak Mutation 90: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:731 - ReplaceComparisonOperator >= -> >
   * 18 Weak Mutation 102: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - DeleteField: dweightI
   * 19 Weak Mutation 100: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - InsertUnaryOp +1
   * 20 Weak Mutation 101: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - InsertUnaryOp -1
   * 21 Weak Mutation 98: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - DeleteField: dweightI
   * 22 Weak Mutation 99: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - InsertUnaryOp Negation
   * 23 Weak Mutation 96: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - InsertUnaryOp +1
   * 24 Weak Mutation 97: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - InsertUnaryOp -1
   * 25 Weak Mutation 106: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:735 - ReplaceConstant - 0 -> 1
   * 26 Weak Mutation 105: smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I:734 - ReplaceComparisonOperator != -> -1
   * 27 smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I: I16 Branch 7 IF_ICMPGE L731 - true
   * 28 smashed.Graph$4.compare(Ljava/lang/Object;Ljava/lang/Object;)I: I27 Branch 8 IF_ICMPNE L734 - false
   * 29 smashed.Graph.ShortestPath(Lsmashed/Vertex;)Lsmashed/Graph;: I184 Branch 56 IFLT L717 - true
   * 30 smashed.Graph.ShortestPath(Lsmashed/Vertex;)Lsmashed/Graph;: I204 Branch 57 IFGE L741 - true
   */
  @Test
  public void test11()  throws Throwable  {
      Graph graph0 = new Graph();
      Vertex vertex0 = new Vertex();
      Edge edge0 = new Edge(vertex0, vertex0, 0);
      graph0.addAnEdge(edge0.end, edge0.start, (-1814));
      Vertex vertex1 = new Vertex();
      graph0.addEdge(vertex0, vertex1, 0);
      graph0.addVertex(vertex1);
      Vertex vertex2 = vertex1.assignName((String) null);
      graph0.addVertex(vertex2);
      graph0.ShortestPath(edge0.end);
      assertEquals((-1814), vertex0.dweight);
  }
}
