/*
 * This file was automatically generated by EvoSuite
 */

package smashed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import smashed.CycleWorkSpace;
import smashed.Vertex;
import smashed.WorkSpace;

@RunWith(EvoSuiteRunner.class)
public class TestCycleWorkSpace_3 {


  //Test case number: 3
  /*
   * 13 covered goals:
   * 1 Weak Mutation 32: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - ReplaceArithmeticOperator - -> %
   * 2 Weak Mutation 23: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:44 - ReplaceConstant - 2 -> 1
   * 3 Weak Mutation 22: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:44 - ReplaceConstant - 2 -> 0
   * 4 Weak Mutation 25: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:44 - ReplaceConstant - 2 -> 3
   * 5 Weak Mutation 24: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:44 - ReplaceConstant - 2 -> -1
   * 6 Weak Mutation 27: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - InsertUnaryOp +1
   * 7 Weak Mutation 26: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - InsertUnaryOp Negation
   * 8 Weak Mutation 28: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - InsertUnaryOp -1
   * 9 Weak Mutation 31: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - ReplaceArithmeticOperator - -> +
   * 10 Weak Mutation 30: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - ReplaceConstant - 1 -> 0
   * 11 Weak Mutation 34: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - ReplaceArithmeticOperator - -> *
   * 12 Weak Mutation 33: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - ReplaceArithmeticOperator - -> /
   * 13 Weak Mutation 32: smashed.CycleWorkSpace.postVisitAction(Lsmashed/Vertex;)V:45 - ReplaceArithmeticOperator - -> %
   */
  @Test
  public void test3()  throws Throwable  {
      CycleWorkSpace cycleWorkSpace0 = new CycleWorkSpace();
      Vertex vertex0 = new Vertex();
      cycleWorkSpace0.postVisitAction(vertex0);
      assertEquals((-1), cycleWorkSpace0.counter);
      assertEquals(2, vertex0.VertexColor);
  }
}
