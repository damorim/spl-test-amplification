/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.tests;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.log.LogException;
import com.sleepycat.tests.SimpleExample;
import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;

@RunWith(EvoSuiteRunner.class)
public class TestSimpleExample {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = false; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  //Test case number: 0
  /*
   * 33 covered goals:
   * 1 Weak Mutation 17: com.sleepycat.tests.SimpleExample.run()V:117 - DeleteStatement: setTransactional(Z)V
   * 2 Weak Mutation 16: com.sleepycat.tests.SimpleExample.run()V:117 - ReplaceConstant - 1 -> 0
   * 3 Weak Mutation 19: com.sleepycat.tests.SimpleExample.run()V:118 - DeleteStatement: setAllowCreate(Z)V
   * 4 Weak Mutation 18: com.sleepycat.tests.SimpleExample.run()V:118 - ReplaceConstant - 1 -> 0
   * 5 Weak Mutation 20: com.sleepycat.tests.SimpleExample.run()V:119 - DeleteField: envDirLjava/io/File;
   * 6 Weak Mutation 0: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:44 - ReplaceVariable numRecords -> offset
   * 7 Weak Mutation 1: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:44 - InsertUnaryOp Negation of numRecords
   * 8 Weak Mutation 2: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:44 - InsertUnaryOp IINC 1 numRecords
   * 9 Weak Mutation 3: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:44 - InsertUnaryOp IINC -1 numRecords
   * 10 Weak Mutation 4: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:45 - InsertUnaryOp Negation of doInsert
   * 11 Weak Mutation 5: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:45 - InsertUnaryOp IINC 1 doInsert
   * 12 Weak Mutation 6: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:45 - InsertUnaryOp IINC -1 doInsert
   * 13 Weak Mutation 7: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:47 - ReplaceVariable offset -> numRecords
   * 14 Weak Mutation 8: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:47 - InsertUnaryOp Negation of offset
   * 15 Weak Mutation 9: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:47 - InsertUnaryOp IINC 1 offset
   * 16 Weak Mutation 10: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:47 - InsertUnaryOp IINC -1 offset
   * 17 Weak Mutation 0: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:44 - ReplaceVariable numRecords -> offset
   * 18 Weak Mutation 1: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:44 - InsertUnaryOp Negation of numRecords
   * 19 Weak Mutation 2: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:44 - InsertUnaryOp IINC 1 numRecords
   * 20 Weak Mutation 3: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:44 - InsertUnaryOp IINC -1 numRecords
   * 21 Weak Mutation 4: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:45 - InsertUnaryOp Negation of doInsert
   * 22 Weak Mutation 5: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:45 - InsertUnaryOp IINC 1 doInsert
   * 23 Weak Mutation 6: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:45 - InsertUnaryOp IINC -1 doInsert
   * 24 Weak Mutation 7: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:47 - ReplaceVariable offset -> numRecords
   * 25 Weak Mutation 8: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:47 - InsertUnaryOp Negation of offset
   * 26 Weak Mutation 9: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:47 - InsertUnaryOp IINC 1 offset
   * 27 Weak Mutation 10: com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V:47 - InsertUnaryOp IINC -1 offset
   * 28 Weak Mutation 17: com.sleepycat.tests.SimpleExample.run()V:117 - DeleteStatement: setTransactional(Z)V
   * 29 Weak Mutation 16: com.sleepycat.tests.SimpleExample.run()V:117 - ReplaceConstant - 1 -> 0
   * 30 Weak Mutation 19: com.sleepycat.tests.SimpleExample.run()V:118 - DeleteStatement: setAllowCreate(Z)V
   * 31 Weak Mutation 18: com.sleepycat.tests.SimpleExample.run()V:118 - ReplaceConstant - 1 -> 0
   * 32 Weak Mutation 20: com.sleepycat.tests.SimpleExample.run()V:119 - DeleteField: envDirLjava/io/File;
   * 33 com.sleepycat.tests.SimpleExample.<init>(IZLjava/io/File;I)V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("_", "_");
      SimpleExample simpleExample0 = new SimpleExample((-26), true, file0, (-8));
      try {
        simpleExample0.run();
        fail("Expecting exception: LogException");
      } catch(LogException e) {
        /*
         * Environment home _/_ doesn't exist
         */
      }
  }

  //Test case number: 1
  /*
   * 11 covered goals:
   * 1 Weak Mutation 11: com.sleepycat.tests.SimpleExample.usage()V:54 - DeleteField: outLjava/io/PrintStream;
   * 2 Weak Mutation 12: com.sleepycat.tests.SimpleExample.usage()V:54 - ReplaceConstant - usage: java je.SimpleExample <dbEnvHomeDirectory> <insert|retrieve> <numRecords> [offset] -> 
   * 3 Weak Mutation 13: com.sleepycat.tests.SimpleExample.usage()V:54 - DeleteStatement: println(Ljava/lang/String;)V
   * 4 Weak Mutation 14: com.sleepycat.tests.SimpleExample.usage()V:58 - ReplaceConstant - 1 -> 0
   * 5 Weak Mutation 15: com.sleepycat.tests.SimpleExample.usage()V:58 - DeleteStatement: exit(I)V
   * 6 com.sleepycat.tests.SimpleExample.usage()V: root-Branch
   * 7 Weak Mutation 11: com.sleepycat.tests.SimpleExample.usage()V:54 - DeleteField: outLjava/io/PrintStream;
   * 8 Weak Mutation 12: com.sleepycat.tests.SimpleExample.usage()V:54 - ReplaceConstant - usage: java je.SimpleExample <dbEnvHomeDirectory> <insert|retrieve> <numRecords> [offset] -> 
   * 9 Weak Mutation 13: com.sleepycat.tests.SimpleExample.usage()V:54 - DeleteStatement: println(Ljava/lang/String;)V
   * 10 Weak Mutation 14: com.sleepycat.tests.SimpleExample.usage()V:58 - ReplaceConstant - 1 -> 0
   * 11 Weak Mutation 15: com.sleepycat.tests.SimpleExample.usage()V:58 - DeleteStatement: exit(I)V
   */
  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          // Undeclared exception!
          try {
            SimpleExample.usage();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.lang.RuntimePermission exitVM.1)
             * java.lang.Thread.getStackTrace(Thread.java:1503)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkExit(SecurityManager.java:744)
             * java.lang.Runtime.exit(Runtime.java:88)
             * java.lang.System.exit(System.java:921)
             * com.sleepycat.tests.SimpleExample.usage(SimpleExample.java:58)
             * sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:260)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:215)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:680)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
