/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.compat;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.compat.DbCompat;
import com.sleepycat.je.CursorConfig;
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.SecondaryConfig;
import com.sleepycat.je.Transaction;
import com.sleepycat.je.TransactionConfig;
import java.io.FileNotFoundException;
import java.util.Comparator;
import java.util.Properties;

@RunWith(EvoSuiteRunner.class)
public class TestDbCompat {


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 Weak Mutation 0: com.sleepycat.compat.DbCompat.getInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;)Z:41 - ReplaceConstant - 1 -> 0
   * 2 com.sleepycat.compat.DbCompat.getInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;)Z: root-Branch
   * 3 Weak Mutation 0: com.sleepycat.compat.DbCompat.getInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;)Z:41 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test0()  throws Throwable  {
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      boolean boolean0 = DbCompat.getInitializeLocking(environmentConfig0);
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 Weak Mutation 1: com.sleepycat.compat.DbCompat.getInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;)Z:44 - ReplaceConstant - 0 -> 1
   * 2 com.sleepycat.compat.DbCompat.getInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;)Z: root-Branch
   * 3 Weak Mutation 1: com.sleepycat.compat.DbCompat.getInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;)Z:44 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test1()  throws Throwable  {
      Properties properties0 = new Properties();
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig(properties0);
      boolean boolean0 = DbCompat.getInitializeCDB(environmentConfig0);
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 Weak Mutation 2: com.sleepycat.compat.DbCompat.isTypeBtree(Lcom/sleepycat/je/DatabaseConfig;)Z:47 - ReplaceConstant - 1 -> 0
   * 2 com.sleepycat.compat.DbCompat.isTypeBtree(Lcom/sleepycat/je/DatabaseConfig;)Z: root-Branch
   * 3 Weak Mutation 2: com.sleepycat.compat.DbCompat.isTypeBtree(Lcom/sleepycat/je/DatabaseConfig;)Z:47 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test2()  throws Throwable  {
      DatabaseConfig databaseConfig0 = new DatabaseConfig();
      boolean boolean0 = DbCompat.isTypeBtree(databaseConfig0);
      assertEquals(true, boolean0);
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 Weak Mutation 3: com.sleepycat.compat.DbCompat.isTypeHash(Lcom/sleepycat/je/DatabaseConfig;)Z:50 - ReplaceConstant - 0 -> 1
   * 2 com.sleepycat.compat.DbCompat.isTypeHash(Lcom/sleepycat/je/DatabaseConfig;)Z: root-Branch
   * 3 Weak Mutation 3: com.sleepycat.compat.DbCompat.isTypeHash(Lcom/sleepycat/je/DatabaseConfig;)Z:50 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test3()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      boolean boolean0 = DbCompat.isTypeHash((DatabaseConfig) secondaryConfig0);
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 Weak Mutation 4: com.sleepycat.compat.DbCompat.isTypeQueue(Lcom/sleepycat/je/DatabaseConfig;)Z:53 - ReplaceConstant - 0 -> 1
   * 2 com.sleepycat.compat.DbCompat.isTypeQueue(Lcom/sleepycat/je/DatabaseConfig;)Z: root-Branch
   * 3 Weak Mutation 4: com.sleepycat.compat.DbCompat.isTypeQueue(Lcom/sleepycat/je/DatabaseConfig;)Z:53 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test4()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      boolean boolean0 = DbCompat.isTypeQueue((DatabaseConfig) secondaryConfig0);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 Weak Mutation 5: com.sleepycat.compat.DbCompat.isTypeRecno(Lcom/sleepycat/je/DatabaseConfig;)Z:56 - ReplaceConstant - 0 -> 1
   * 2 com.sleepycat.compat.DbCompat.isTypeRecno(Lcom/sleepycat/je/DatabaseConfig;)Z: root-Branch
   * 3 Weak Mutation 5: com.sleepycat.compat.DbCompat.isTypeRecno(Lcom/sleepycat/je/DatabaseConfig;)Z:56 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test5()  throws Throwable  {
      boolean boolean0 = DbCompat.isTypeRecno((DatabaseConfig) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * 1 Weak Mutation 6: com.sleepycat.compat.DbCompat.getBtreeRecordNumbers(Lcom/sleepycat/je/DatabaseConfig;)Z:59 - ReplaceConstant - 0 -> 1
   * 2 com.sleepycat.compat.DbCompat.getBtreeRecordNumbers(Lcom/sleepycat/je/DatabaseConfig;)Z: root-Branch
   * 3 Weak Mutation 6: com.sleepycat.compat.DbCompat.getBtreeRecordNumbers(Lcom/sleepycat/je/DatabaseConfig;)Z:59 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test6()  throws Throwable  {
      DatabaseConfig databaseConfig0 = new DatabaseConfig();
      boolean boolean0 = DbCompat.getBtreeRecordNumbers(databaseConfig0);
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 Weak Mutation 7: com.sleepycat.compat.DbCompat.getReadUncommitted(Lcom/sleepycat/je/DatabaseConfig;)Z:62 - ReplaceConstant - 1 -> 0
   * 2 com.sleepycat.compat.DbCompat.getReadUncommitted(Lcom/sleepycat/je/DatabaseConfig;)Z: root-Branch
   * 3 Weak Mutation 7: com.sleepycat.compat.DbCompat.getReadUncommitted(Lcom/sleepycat/je/DatabaseConfig;)Z:62 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test7()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      boolean boolean0 = DbCompat.getReadUncommitted(databaseConfig0);
      assertEquals(true, boolean0);
  }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 Weak Mutation 8: com.sleepycat.compat.DbCompat.getRenumbering(Lcom/sleepycat/je/DatabaseConfig;)Z:65 - ReplaceConstant - 0 -> 1
   * 2 com.sleepycat.compat.DbCompat.getRenumbering(Lcom/sleepycat/je/DatabaseConfig;)Z: root-Branch
   * 3 Weak Mutation 8: com.sleepycat.compat.DbCompat.getRenumbering(Lcom/sleepycat/je/DatabaseConfig;)Z:65 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test8()  throws Throwable  {
      DatabaseConfig databaseConfig0 = new DatabaseConfig();
      boolean boolean0 = DbCompat.getRenumbering(databaseConfig0);
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * 1 Weak Mutation 9: com.sleepycat.compat.DbCompat.getSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;)Z:68 - DeleteStatement: getSortedDuplicates()Z
   * 2 com.sleepycat.compat.DbCompat.getSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;)Z: root-Branch
   * 3 Weak Mutation 9: com.sleepycat.compat.DbCompat.getSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;)Z:68 - DeleteStatement: getSortedDuplicates()Z
   */
  @Test
  public void test9()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      boolean boolean0 = DbCompat.getSortedDuplicates(databaseConfig0);
      assertEquals(true, boolean0);
  }

  //Test case number: 10
  /*
   * 3 covered goals:
   * 1 Weak Mutation 10: com.sleepycat.compat.DbCompat.getUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;)Z:71 - ReplaceConstant - 0 -> 1
   * 2 com.sleepycat.compat.DbCompat.getUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;)Z: root-Branch
   * 3 Weak Mutation 10: com.sleepycat.compat.DbCompat.getUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;)Z:71 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test10()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      boolean boolean0 = DbCompat.getUnsortedDuplicates(databaseConfig0);
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 19 covered goals:
   * 1 Weak Mutation 11: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:75 - ReplaceVariable newConfig -> config
   * 2 Weak Mutation 12: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:75 - ReplaceVariable config -> newConfig
   * 3 Weak Mutation 13: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:75 - DeleteStatement: getReadCommitted()Z
   * 4 Weak Mutation 14: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:75 - DeleteStatement: setReadCommitted(Z)V
   * 5 Weak Mutation 15: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:76 - ReplaceVariable newConfig -> config
   * 6 Weak Mutation 17: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:76 - DeleteStatement: getReadUncommitted()Z
   * 7 Weak Mutation 16: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:76 - ReplaceVariable config -> newConfig
   * 8 Weak Mutation 18: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:76 - DeleteStatement: setReadUncommitted(Z)V
   * 9 Weak Mutation 19: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:77 - ReplaceVariable newConfig -> config
   * 10 com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;: root-Branch
   * 11 Weak Mutation 11: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:75 - ReplaceVariable newConfig -> config
   * 12 Weak Mutation 12: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:75 - ReplaceVariable config -> newConfig
   * 13 Weak Mutation 13: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:75 - DeleteStatement: getReadCommitted()Z
   * 14 Weak Mutation 14: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:75 - DeleteStatement: setReadCommitted(Z)V
   * 15 Weak Mutation 15: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:76 - ReplaceVariable newConfig -> config
   * 16 Weak Mutation 17: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:76 - DeleteStatement: getReadUncommitted()Z
   * 17 Weak Mutation 16: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:76 - ReplaceVariable config -> newConfig
   * 18 Weak Mutation 19: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:77 - ReplaceVariable newConfig -> config
   * 19 Weak Mutation 18: com.sleepycat.compat.DbCompat.cloneCursorConfig(Lcom/sleepycat/je/CursorConfig;)Lcom/sleepycat/je/CursorConfig;:76 - DeleteStatement: setReadUncommitted(Z)V
   */
  @Test
  public void test11()  throws Throwable  {
      CursorConfig cursorConfig0 = CursorConfig.READ_UNCOMMITTED;
      CursorConfig cursorConfig1 = DbCompat.cloneCursorConfig(cursorConfig0);
      assertNotSame(cursorConfig1, cursorConfig0);
      assertEquals(true, cursorConfig1.getReadCommitted());
  }

  //Test case number: 12
  /*
   * 3 covered goals:
   * 1 Weak Mutation 20: com.sleepycat.compat.DbCompat.getWriteCursor(Lcom/sleepycat/je/CursorConfig;)Z:80 - ReplaceConstant - 0 -> 1
   * 2 com.sleepycat.compat.DbCompat.getWriteCursor(Lcom/sleepycat/je/CursorConfig;)Z: root-Branch
   * 3 Weak Mutation 20: com.sleepycat.compat.DbCompat.getWriteCursor(Lcom/sleepycat/je/CursorConfig;)Z:80 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test12()  throws Throwable  {
      boolean boolean0 = DbCompat.getWriteCursor((CursorConfig) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 27 covered goals:
   * 1 Weak Mutation 21: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> INSERTION_ORDERED_DUPLICATES
   * 2 Weak Mutation 23: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> OPTIONAL_READ_UNCOMMITTED
   * 3 Weak Mutation 22: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> MEMORY_SUBSYSTEM
   * 4 Weak Mutation 25: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> BTREE_RECNUM_METHOD
   * 5 Weak Mutation 24: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> HASH_METHOD
   * 6 Weak Mutation 27: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> NESTED_TRANSACTIONS
   * 7 Weak Mutation 26: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> SEPARATE_DATABASE_FILES
   * 8 Weak Mutation 29: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> CDB
   * 9 Weak Mutation 31: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> RECNO_METHOD
   * 10 Weak Mutation 34: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - InsertUnaryOp Negation of write
   * 11 Weak Mutation 35: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceComparisonOperator == -> !=
   * 12 Weak Mutation 32: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> QUEUE_METHOD
   * 13 Weak Mutation 33: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> LOCK_SUBSYSTEM
   * 14 com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V: I3 Branch 1 IFEQ L83 - false
   * 15 Weak Mutation 21: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> INSERTION_ORDERED_DUPLICATES
   * 16 Weak Mutation 23: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> OPTIONAL_READ_UNCOMMITTED
   * 17 Weak Mutation 22: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> MEMORY_SUBSYSTEM
   * 18 Weak Mutation 25: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> BTREE_RECNUM_METHOD
   * 19 Weak Mutation 24: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> HASH_METHOD
   * 20 Weak Mutation 27: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> NESTED_TRANSACTIONS
   * 21 Weak Mutation 26: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> SEPARATE_DATABASE_FILES
   * 22 Weak Mutation 29: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> CDB
   * 23 Weak Mutation 31: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> RECNO_METHOD
   * 24 Weak Mutation 34: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - InsertUnaryOp Negation of write
   * 25 Weak Mutation 35: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceComparisonOperator == -> !=
   * 26 Weak Mutation 32: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> QUEUE_METHOD
   * 27 Weak Mutation 33: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> LOCK_SUBSYSTEM
   */
  @Test
  public void test13()  throws Throwable  {
      CursorConfig cursorConfig0 = CursorConfig.DEFAULT;
      // Undeclared exception!
      try {
        DbCompat.setWriteCursor(cursorConfig0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  //Test case number: 14
  /*
   * 7 covered goals:
   * 1 Weak Mutation 28: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> SECONDARIES
   * 2 Weak Mutation 30: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> JOIN
   * 3 com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V: I3 Branch 1 IFEQ L83 - true
   * 4 Weak Mutation 34: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - InsertUnaryOp Negation of write
   * 5 Weak Mutation 35: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceComparisonOperator == -> !=
   * 6 Weak Mutation 28: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> SECONDARIES
   * 7 Weak Mutation 30: com.sleepycat.compat.DbCompat.setWriteCursor(Lcom/sleepycat/je/CursorConfig;Z)V:83 - ReplaceVariable write -> JOIN
   */
  @Test
  public void test14()  throws Throwable  {
      CursorConfig cursorConfig0 = CursorConfig.READ_UNCOMMITTED;
      DbCompat.setWriteCursor(cursorConfig0, false);
      assertEquals(false, cursorConfig0.getReadUncommitted());
  }

  //Test case number: 15
  /*
   * 3 covered goals:
   * 1 Weak Mutation 36: com.sleepycat.compat.DbCompat.getThreadTransaction(Lcom/sleepycat/je/Environment;)Lcom/sleepycat/je/Transaction;:119 - DeleteStatement: getThreadTransaction()Lcom/sleepycat/je/Transaction;
   * 2 com.sleepycat.compat.DbCompat.getThreadTransaction(Lcom/sleepycat/je/Environment;)Lcom/sleepycat/je/Transaction;: root-Branch
   * 3 Weak Mutation 36: com.sleepycat.compat.DbCompat.getThreadTransaction(Lcom/sleepycat/je/Environment;)Lcom/sleepycat/je/Transaction;:119 - DeleteStatement: getThreadTransaction()Lcom/sleepycat/je/Transaction;
   */
  @Test
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try {
        DbCompat.getThreadTransaction((Environment) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 16
  /*
   * 27 covered goals:
   * 1 Weak Mutation 38: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> MEMORY_SUBSYSTEM
   * 2 Weak Mutation 39: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> OPTIONAL_READ_UNCOMMITTED
   * 3 Weak Mutation 37: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> INSERTION_ORDERED_DUPLICATES
   * 4 Weak Mutation 42: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> SEPARATE_DATABASE_FILES
   * 5 Weak Mutation 43: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> NESTED_TRANSACTIONS
   * 6 Weak Mutation 40: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> HASH_METHOD
   * 7 Weak Mutation 41: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> BTREE_RECNUM_METHOD
   * 8 Weak Mutation 47: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> RECNO_METHOD
   * 9 Weak Mutation 45: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> CDB
   * 10 Weak Mutation 51: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceComparisonOperator != -> ==
   * 11 Weak Mutation 50: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - InsertUnaryOp Negation of val
   * 12 Weak Mutation 49: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> LOCK_SUBSYSTEM
   * 13 Weak Mutation 48: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> QUEUE_METHOD
   * 14 com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V: I3 Branch 2 IFNE L123 - true
   * 15 Weak Mutation 38: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> MEMORY_SUBSYSTEM
   * 16 Weak Mutation 39: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> OPTIONAL_READ_UNCOMMITTED
   * 17 Weak Mutation 37: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> INSERTION_ORDERED_DUPLICATES
   * 18 Weak Mutation 42: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> SEPARATE_DATABASE_FILES
   * 19 Weak Mutation 43: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> NESTED_TRANSACTIONS
   * 20 Weak Mutation 40: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> HASH_METHOD
   * 21 Weak Mutation 41: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> BTREE_RECNUM_METHOD
   * 22 Weak Mutation 47: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> RECNO_METHOD
   * 23 Weak Mutation 45: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> CDB
   * 24 Weak Mutation 51: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceComparisonOperator != -> ==
   * 25 Weak Mutation 50: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - InsertUnaryOp Negation of val
   * 26 Weak Mutation 49: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> LOCK_SUBSYSTEM
   * 27 Weak Mutation 48: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> QUEUE_METHOD
   */
  @Test
  public void test16()  throws Throwable  {
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      DbCompat.setInitializeCache(environmentConfig0, true);
      assertEquals(false, environmentConfig0.getAllowCreate());
  }

  //Test case number: 17
  /*
   * 7 covered goals:
   * 1 Weak Mutation 46: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> JOIN
   * 2 Weak Mutation 44: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> SECONDARIES
   * 3 com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V: I3 Branch 2 IFNE L123 - false
   * 4 Weak Mutation 51: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceComparisonOperator != -> ==
   * 5 Weak Mutation 50: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - InsertUnaryOp Negation of val
   * 6 Weak Mutation 46: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> JOIN
   * 7 Weak Mutation 44: com.sleepycat.compat.DbCompat.setInitializeCache(Lcom/sleepycat/je/EnvironmentConfig;Z)V:123 - ReplaceVariable val -> SECONDARIES
   */
  @Test
  public void test17()  throws Throwable  {
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      // Undeclared exception!
      try {
        DbCompat.setInitializeCache(environmentConfig0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  //Test case number: 18
  /*
   * 27 covered goals:
   * 1 Weak Mutation 55: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> HASH_METHOD
   * 2 Weak Mutation 54: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> OPTIONAL_READ_UNCOMMITTED
   * 3 Weak Mutation 53: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> MEMORY_SUBSYSTEM
   * 4 Weak Mutation 52: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> INSERTION_ORDERED_DUPLICATES
   * 5 Weak Mutation 58: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> NESTED_TRANSACTIONS
   * 6 Weak Mutation 57: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> SEPARATE_DATABASE_FILES
   * 7 Weak Mutation 56: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> BTREE_RECNUM_METHOD
   * 8 Weak Mutation 63: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> QUEUE_METHOD
   * 9 Weak Mutation 62: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> RECNO_METHOD
   * 10 Weak Mutation 60: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> CDB
   * 11 Weak Mutation 64: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> LOCK_SUBSYSTEM
   * 12 Weak Mutation 65: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - InsertUnaryOp Negation of val
   * 13 Weak Mutation 66: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceComparisonOperator != -> ==
   * 14 com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V: I3 Branch 3 IFNE L128 - true
   * 15 Weak Mutation 55: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> HASH_METHOD
   * 16 Weak Mutation 54: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> OPTIONAL_READ_UNCOMMITTED
   * 17 Weak Mutation 53: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> MEMORY_SUBSYSTEM
   * 18 Weak Mutation 52: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> INSERTION_ORDERED_DUPLICATES
   * 19 Weak Mutation 58: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> NESTED_TRANSACTIONS
   * 20 Weak Mutation 57: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> SEPARATE_DATABASE_FILES
   * 21 Weak Mutation 56: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> BTREE_RECNUM_METHOD
   * 22 Weak Mutation 63: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> QUEUE_METHOD
   * 23 Weak Mutation 62: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> RECNO_METHOD
   * 24 Weak Mutation 60: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> CDB
   * 25 Weak Mutation 64: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> LOCK_SUBSYSTEM
   * 26 Weak Mutation 65: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - InsertUnaryOp Negation of val
   * 27 Weak Mutation 66: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceComparisonOperator != -> ==
   */
  @Test
  public void test18()  throws Throwable  {
      DbCompat.setInitializeLocking((EnvironmentConfig) null, true);
  }

  //Test case number: 19
  /*
   * 7 covered goals:
   * 1 Weak Mutation 59: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> SECONDARIES
   * 2 Weak Mutation 61: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> JOIN
   * 3 com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V: I3 Branch 3 IFNE L128 - false
   * 4 Weak Mutation 65: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - InsertUnaryOp Negation of val
   * 5 Weak Mutation 66: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceComparisonOperator != -> ==
   * 6 Weak Mutation 59: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> SECONDARIES
   * 7 Weak Mutation 61: com.sleepycat.compat.DbCompat.setInitializeLocking(Lcom/sleepycat/je/EnvironmentConfig;Z)V:128 - ReplaceVariable val -> JOIN
   */
  @Test
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try {
        DbCompat.setInitializeLocking((EnvironmentConfig) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  //Test case number: 20
  /*
   * 27 covered goals:
   * 1 Weak Mutation 68: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> MEMORY_SUBSYSTEM
   * 2 Weak Mutation 69: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> OPTIONAL_READ_UNCOMMITTED
   * 3 Weak Mutation 70: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> HASH_METHOD
   * 4 Weak Mutation 71: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> BTREE_RECNUM_METHOD
   * 5 Weak Mutation 67: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> INSERTION_ORDERED_DUPLICATES
   * 6 Weak Mutation 77: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> RECNO_METHOD
   * 7 Weak Mutation 78: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> QUEUE_METHOD
   * 8 Weak Mutation 79: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> LOCK_SUBSYSTEM
   * 9 Weak Mutation 72: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> SEPARATE_DATABASE_FILES
   * 10 Weak Mutation 73: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> NESTED_TRANSACTIONS
   * 11 Weak Mutation 75: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> CDB
   * 12 Weak Mutation 81: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceComparisonOperator == -> !=
   * 13 Weak Mutation 80: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - InsertUnaryOp Negation of val
   * 14 com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V: I3 Branch 4 IFEQ L133 - false
   * 15 Weak Mutation 68: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> MEMORY_SUBSYSTEM
   * 16 Weak Mutation 69: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> OPTIONAL_READ_UNCOMMITTED
   * 17 Weak Mutation 70: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> HASH_METHOD
   * 18 Weak Mutation 71: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> BTREE_RECNUM_METHOD
   * 19 Weak Mutation 67: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> INSERTION_ORDERED_DUPLICATES
   * 20 Weak Mutation 77: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> RECNO_METHOD
   * 21 Weak Mutation 78: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> QUEUE_METHOD
   * 22 Weak Mutation 79: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> LOCK_SUBSYSTEM
   * 23 Weak Mutation 72: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> SEPARATE_DATABASE_FILES
   * 24 Weak Mutation 73: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> NESTED_TRANSACTIONS
   * 25 Weak Mutation 75: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> CDB
   * 26 Weak Mutation 81: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceComparisonOperator == -> !=
   * 27 Weak Mutation 80: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - InsertUnaryOp Negation of val
   */
  @Test
  public void test20()  throws Throwable  {
      Properties properties0 = new Properties();
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig(properties0);
      // Undeclared exception!
      try {
        DbCompat.setInitializeCDB(environmentConfig0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  //Test case number: 21
  /*
   * 7 covered goals:
   * 1 Weak Mutation 76: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> JOIN
   * 2 Weak Mutation 74: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> SECONDARIES
   * 3 com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V: I3 Branch 4 IFEQ L133 - true
   * 4 Weak Mutation 81: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 80: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - InsertUnaryOp Negation of val
   * 6 Weak Mutation 76: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> JOIN
   * 7 Weak Mutation 74: com.sleepycat.compat.DbCompat.setInitializeCDB(Lcom/sleepycat/je/EnvironmentConfig;Z)V:133 - ReplaceVariable val -> SECONDARIES
   */
  @Test
  public void test21()  throws Throwable  {
      Properties properties0 = new Properties();
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig(properties0);
      DbCompat.setInitializeCDB(environmentConfig0, false);
      assertEquals(false, environmentConfig0.getTxnWriteNoSync());
  }

  //Test case number: 22
  /*
   * 31 covered goals:
   * 1 Weak Mutation 85: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> HASH_METHOD
   * 2 Weak Mutation 84: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> OPTIONAL_READ_UNCOMMITTED
   * 3 Weak Mutation 87: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> SEPARATE_DATABASE_FILES
   * 4 Weak Mutation 86: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> BTREE_RECNUM_METHOD
   * 5 Weak Mutation 83: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> MEMORY_SUBSYSTEM
   * 6 Weak Mutation 82: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> INSERTION_ORDERED_DUPLICATES
   * 7 Weak Mutation 93: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> QUEUE_METHOD
   * 8 Weak Mutation 92: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> RECNO_METHOD
   * 9 Weak Mutation 95: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - InsertUnaryOp Negation of val
   * 10 Weak Mutation 94: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> LOCK_SUBSYSTEM
   * 11 Weak Mutation 88: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> NESTED_TRANSACTIONS
   * 12 Weak Mutation 90: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> CDB
   * 13 Weak Mutation 98: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - DeleteStatement: setSerializableIsolation(Z)V
   * 14 Weak Mutation 96: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - InsertUnaryOp IINC 1 val
   * 15 Weak Mutation 97: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - InsertUnaryOp IINC -1 val
   * 16 com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V: root-Branch
   * 17 Weak Mutation 85: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> HASH_METHOD
   * 18 Weak Mutation 84: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> OPTIONAL_READ_UNCOMMITTED
   * 19 Weak Mutation 87: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> SEPARATE_DATABASE_FILES
   * 20 Weak Mutation 86: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> BTREE_RECNUM_METHOD
   * 21 Weak Mutation 83: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> MEMORY_SUBSYSTEM
   * 22 Weak Mutation 82: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> INSERTION_ORDERED_DUPLICATES
   * 23 Weak Mutation 93: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> QUEUE_METHOD
   * 24 Weak Mutation 92: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> RECNO_METHOD
   * 25 Weak Mutation 95: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - InsertUnaryOp Negation of val
   * 26 Weak Mutation 94: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> LOCK_SUBSYSTEM
   * 27 Weak Mutation 88: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> NESTED_TRANSACTIONS
   * 28 Weak Mutation 90: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> CDB
   * 29 Weak Mutation 98: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - DeleteStatement: setSerializableIsolation(Z)V
   * 30 Weak Mutation 96: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - InsertUnaryOp IINC 1 val
   * 31 Weak Mutation 97: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - InsertUnaryOp IINC -1 val
   */
  @Test
  public void test22()  throws Throwable  {
      TransactionConfig transactionConfig0 = TransactionConfig.DEFAULT;
      DbCompat.setSerializableIsolation(transactionConfig0, true);
      assertEquals(true, transactionConfig0.getSerializableIsolation());
  }

  //Test case number: 23
  /*
   * 8 covered goals:
   * 1 Weak Mutation 89: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> SECONDARIES
   * 2 Weak Mutation 91: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> JOIN
   * 3 Weak Mutation 95: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - InsertUnaryOp Negation of val
   * 4 Weak Mutation 98: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - DeleteStatement: setSerializableIsolation(Z)V
   * 5 Weak Mutation 96: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - InsertUnaryOp IINC 1 val
   * 6 Weak Mutation 97: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - InsertUnaryOp IINC -1 val
   * 7 Weak Mutation 89: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> SECONDARIES
   * 8 Weak Mutation 91: com.sleepycat.compat.DbCompat.setSerializableIsolation(Lcom/sleepycat/je/TransactionConfig;Z)V:141 - ReplaceVariable val -> JOIN
   */
  @Test
  public void test23()  throws Throwable  {
      TransactionConfig transactionConfig0 = TransactionConfig.DEFAULT;
      DbCompat.setSerializableIsolation(transactionConfig0, false);
      assertEquals(false, transactionConfig0.getSerializableIsolation());
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 Weak Mutation 99: com.sleepycat.compat.DbCompat.setBtreeComparator(Lcom/sleepycat/je/DatabaseConfig;Ljava/util/Comparator;)V:145 - DeleteStatement: getClass()Ljava/lang/Class;
   * 2 com.sleepycat.compat.DbCompat.setBtreeComparator(Lcom/sleepycat/je/DatabaseConfig;Ljava/util/Comparator;)V: root-Branch
   * 3 Weak Mutation 99: com.sleepycat.compat.DbCompat.setBtreeComparator(Lcom/sleepycat/je/DatabaseConfig;Ljava/util/Comparator;)V:145 - DeleteStatement: getClass()Ljava/lang/Class;
   */
  @Test
  public void test24()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      // Undeclared exception!
      try {
        DbCompat.setBtreeComparator(databaseConfig0, (Comparator) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 25
  /*
   * 31 covered goals:
   * 1 Weak Mutation 102: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> MEMORY_SUBSYSTEM
   * 2 Weak Mutation 103: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> OPTIONAL_READ_UNCOMMITTED
   * 3 Weak Mutation 101: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> INSERTION_ORDERED_DUPLICATES
   * 4 Weak Mutation 111: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> RECNO_METHOD
   * 5 Weak Mutation 109: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> CDB
   * 6 Weak Mutation 106: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> SEPARATE_DATABASE_FILES
   * 7 Weak Mutation 107: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> NESTED_TRANSACTIONS
   * 8 Weak Mutation 104: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> HASH_METHOD
   * 9 Weak Mutation 105: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> BTREE_RECNUM_METHOD
   * 10 Weak Mutation 117: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - DeleteStatement: setSortedDuplicates(Z)V
   * 11 Weak Mutation 116: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - InsertUnaryOp IINC -1 val
   * 12 Weak Mutation 115: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - InsertUnaryOp IINC 1 val
   * 13 Weak Mutation 114: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - InsertUnaryOp Negation of val
   * 14 Weak Mutation 113: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> LOCK_SUBSYSTEM
   * 15 Weak Mutation 112: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> QUEUE_METHOD
   * 16 com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V: root-Branch
   * 17 Weak Mutation 102: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> MEMORY_SUBSYSTEM
   * 18 Weak Mutation 103: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> OPTIONAL_READ_UNCOMMITTED
   * 19 Weak Mutation 101: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> INSERTION_ORDERED_DUPLICATES
   * 20 Weak Mutation 111: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> RECNO_METHOD
   * 21 Weak Mutation 109: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> CDB
   * 22 Weak Mutation 106: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> SEPARATE_DATABASE_FILES
   * 23 Weak Mutation 107: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> NESTED_TRANSACTIONS
   * 24 Weak Mutation 104: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> HASH_METHOD
   * 25 Weak Mutation 105: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> BTREE_RECNUM_METHOD
   * 26 Weak Mutation 117: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - DeleteStatement: setSortedDuplicates(Z)V
   * 27 Weak Mutation 116: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - InsertUnaryOp IINC -1 val
   * 28 Weak Mutation 115: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - InsertUnaryOp IINC 1 val
   * 29 Weak Mutation 114: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - InsertUnaryOp Negation of val
   * 30 Weak Mutation 113: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> LOCK_SUBSYSTEM
   * 31 Weak Mutation 112: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> QUEUE_METHOD
   */
  @Test
  public void test25()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      DbCompat.setSortedDuplicates(databaseConfig0, true);
      assertEquals(true, databaseConfig0.getSortedDuplicates());
  }

  //Test case number: 26
  /*
   * 8 covered goals:
   * 1 Weak Mutation 110: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> JOIN
   * 2 Weak Mutation 108: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> SECONDARIES
   * 3 Weak Mutation 117: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - DeleteStatement: setSortedDuplicates(Z)V
   * 4 Weak Mutation 116: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - InsertUnaryOp IINC -1 val
   * 5 Weak Mutation 115: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - InsertUnaryOp IINC 1 val
   * 6 Weak Mutation 114: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - InsertUnaryOp Negation of val
   * 7 Weak Mutation 110: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> JOIN
   * 8 Weak Mutation 108: com.sleepycat.compat.DbCompat.setSortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:167 - ReplaceVariable val -> SECONDARIES
   */
  @Test
  public void test26()  throws Throwable  {
      DatabaseConfig databaseConfig0 = new DatabaseConfig();
      DbCompat.setSortedDuplicates(databaseConfig0, false);
      assertEquals(false, databaseConfig0.getSortedDuplicates());
  }

  //Test case number: 27
  /*
   * 27 covered goals:
   * 1 Weak Mutation 119: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> MEMORY_SUBSYSTEM
   * 2 Weak Mutation 118: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> INSERTION_ORDERED_DUPLICATES
   * 3 Weak Mutation 126: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> CDB
   * 4 Weak Mutation 124: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> NESTED_TRANSACTIONS
   * 5 Weak Mutation 123: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> SEPARATE_DATABASE_FILES
   * 6 Weak Mutation 122: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> BTREE_RECNUM_METHOD
   * 7 Weak Mutation 121: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> HASH_METHOD
   * 8 Weak Mutation 120: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> OPTIONAL_READ_UNCOMMITTED
   * 9 Weak Mutation 129: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> QUEUE_METHOD
   * 10 Weak Mutation 128: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> RECNO_METHOD
   * 11 Weak Mutation 131: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - InsertUnaryOp Negation of val
   * 12 Weak Mutation 130: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> LOCK_SUBSYSTEM
   * 13 Weak Mutation 132: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceComparisonOperator == -> !=
   * 14 com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V: I3 Branch 5 IFEQ L170 - false
   * 15 Weak Mutation 119: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> MEMORY_SUBSYSTEM
   * 16 Weak Mutation 118: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> INSERTION_ORDERED_DUPLICATES
   * 17 Weak Mutation 126: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> CDB
   * 18 Weak Mutation 124: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> NESTED_TRANSACTIONS
   * 19 Weak Mutation 123: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> SEPARATE_DATABASE_FILES
   * 20 Weak Mutation 122: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> BTREE_RECNUM_METHOD
   * 21 Weak Mutation 121: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> HASH_METHOD
   * 22 Weak Mutation 120: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> OPTIONAL_READ_UNCOMMITTED
   * 23 Weak Mutation 129: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> QUEUE_METHOD
   * 24 Weak Mutation 128: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> RECNO_METHOD
   * 25 Weak Mutation 131: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - InsertUnaryOp Negation of val
   * 26 Weak Mutation 130: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> LOCK_SUBSYSTEM
   * 27 Weak Mutation 132: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceComparisonOperator == -> !=
   */
  @Test
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try {
        DbCompat.setUnsortedDuplicates((DatabaseConfig) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  //Test case number: 28
  /*
   * 7 covered goals:
   * 1 Weak Mutation 127: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> JOIN
   * 2 Weak Mutation 125: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> SECONDARIES
   * 3 com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V: I3 Branch 5 IFEQ L170 - true
   * 4 Weak Mutation 131: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - InsertUnaryOp Negation of val
   * 5 Weak Mutation 132: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceComparisonOperator == -> !=
   * 6 Weak Mutation 127: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> JOIN
   * 7 Weak Mutation 125: com.sleepycat.compat.DbCompat.setUnsortedDuplicates(Lcom/sleepycat/je/DatabaseConfig;Z)V:170 - ReplaceVariable val -> SECONDARIES
   */
  @Test
  public void test28()  throws Throwable  {
      DbCompat.setUnsortedDuplicates((DatabaseConfig) null, false);
  }

  //Test case number: 29
  /*
   * 9 covered goals:
   * 1 Weak Mutation 137: com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V:175 - ReplaceComparisonOperator == -> <=
   * 2 Weak Mutation 133: com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V:175 - InsertUnaryOp Negation of val
   * 3 Weak Mutation 135: com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V:175 - InsertUnaryOp IINC -1 val
   * 4 Weak Mutation 134: com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V:175 - InsertUnaryOp IINC 1 val
   * 5 com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V: I3 Branch 6 IFEQ L175 - false
   * 6 Weak Mutation 137: com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V:175 - ReplaceComparisonOperator == -> <=
   * 7 Weak Mutation 133: com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V:175 - InsertUnaryOp Negation of val
   * 8 Weak Mutation 135: com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V:175 - InsertUnaryOp IINC -1 val
   * 9 Weak Mutation 134: com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V:175 - InsertUnaryOp IINC 1 val
   */
  @Test
  public void test29()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      // Undeclared exception!
      try {
        DbCompat.setRecordLength(databaseConfig0, (-28));
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 Weak Mutation 136: com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V:175 - ReplaceComparisonOperator == -> >=
   * 2 Weak Mutation 136: com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V:175 - ReplaceComparisonOperator == -> >=
   */
  @Test
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try {
        DbCompat.setRecordLength((DatabaseConfig) null, 681);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  //Test case number: 31
  /*
   * 6 covered goals:
   * 1 Weak Mutation 138: com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V:175 - ReplaceComparisonOperator == -> -2
   * 2 com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V: I3 Branch 6 IFEQ L175 - true
   * 3 Weak Mutation 133: com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V:175 - InsertUnaryOp Negation of val
   * 4 Weak Mutation 135: com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V:175 - InsertUnaryOp IINC -1 val
   * 5 Weak Mutation 134: com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V:175 - InsertUnaryOp IINC 1 val
   * 6 Weak Mutation 138: com.sleepycat.compat.DbCompat.setRecordLength(Lcom/sleepycat/je/DatabaseConfig;I)V:175 - ReplaceComparisonOperator == -> -2
   */
  @Test
  public void test31()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      DbCompat.setRecordLength((DatabaseConfig) secondaryConfig0, 0);
      assertEquals(false, secondaryConfig0.getReadOnly());
  }

  //Test case number: 32
  /*
   * 41 covered goals:
   * 1 Weak Mutation 139: com.sleepycat.compat.DbCompat.openDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/DatabaseConfig;)Lcom/sleepycat/je/Database;:185 - ReplaceVariable file -> name
   * 2 Weak Mutation 141: com.sleepycat.compat.DbCompat.openDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/DatabaseConfig;)Lcom/sleepycat/je/Database;:185 - DeleteStatement: makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
   * 3 Weak Mutation 140: com.sleepycat.compat.DbCompat.openDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/DatabaseConfig;)Lcom/sleepycat/je/Database;:185 - ReplaceVariable name -> file
   * 4 Weak Mutation 142: com.sleepycat.compat.DbCompat.openDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/DatabaseConfig;)Lcom/sleepycat/je/Database;:185 - DeleteStatement: openDatabase(Lcom/sleepycat/je/Transaction;Ljava/lang/String;Lcom/sleepycat/je/DatabaseConfig;)Lcom/sleepycat/je/Database;
   * 5 Weak Mutation 147: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:193 - ReplaceVariable file -> name
   * 6 Weak Mutation 148: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:193 - ReplaceComparisonOperator != null -> = null
   * 7 Weak Mutation 150: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:197 - ReplaceVariable name -> file
   * 8 Weak Mutation 151: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:197 - ReplaceComparisonOperator = null -> != null
   * 9 Weak Mutation 152: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceVariable file -> name
   * 10 Weak Mutation 153: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - DeleteStatement: valueOf(Ljava/lang/Object;)Ljava/lang/String;
   * 11 Weak Mutation 154: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceConstant - 46 -> 0
   * 12 Weak Mutation 155: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceConstant - 46 -> 1
   * 13 Weak Mutation 156: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceConstant - 46 -> -1
   * 14 Weak Mutation 157: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceConstant - 46 -> 45
   * 15 Weak Mutation 158: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceConstant - 46 -> 47
   * 16 Weak Mutation 159: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - DeleteStatement: append(C)Ljava/lang/StringBuilder;
   * 17 Weak Mutation 162: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - DeleteStatement: toString()Ljava/lang/String;
   * 18 Weak Mutation 161: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 19 Weak Mutation 160: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceVariable name -> file
   * 20 com.sleepycat.compat.DbCompat.openDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/DatabaseConfig;)Lcom/sleepycat/je/Database;: root-Branch
   * 21 com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I3 Branch 7 IFNONNULL L193 - true
   * 22 com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I11 Branch 8 IFNULL L197 - false
   * 23 Weak Mutation 139: com.sleepycat.compat.DbCompat.openDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/DatabaseConfig;)Lcom/sleepycat/je/Database;:185 - ReplaceVariable file -> name
   * 24 Weak Mutation 141: com.sleepycat.compat.DbCompat.openDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/DatabaseConfig;)Lcom/sleepycat/je/Database;:185 - DeleteStatement: makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
   * 25 Weak Mutation 140: com.sleepycat.compat.DbCompat.openDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/DatabaseConfig;)Lcom/sleepycat/je/Database;:185 - ReplaceVariable name -> file
   * 26 Weak Mutation 142: com.sleepycat.compat.DbCompat.openDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/DatabaseConfig;)Lcom/sleepycat/je/Database;:185 - DeleteStatement: openDatabase(Lcom/sleepycat/je/Transaction;Ljava/lang/String;Lcom/sleepycat/je/DatabaseConfig;)Lcom/sleepycat/je/Database;
   * 27 Weak Mutation 152: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceVariable file -> name
   * 28 Weak Mutation 153: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - DeleteStatement: valueOf(Ljava/lang/Object;)Ljava/lang/String;
   * 29 Weak Mutation 154: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceConstant - 46 -> 0
   * 30 Weak Mutation 155: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceConstant - 46 -> 1
   * 31 Weak Mutation 156: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceConstant - 46 -> -1
   * 32 Weak Mutation 157: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceConstant - 46 -> 45
   * 33 Weak Mutation 158: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceConstant - 46 -> 47
   * 34 Weak Mutation 159: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - DeleteStatement: append(C)Ljava/lang/StringBuilder;
   * 35 Weak Mutation 147: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:193 - ReplaceVariable file -> name
   * 36 Weak Mutation 148: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:193 - ReplaceComparisonOperator != null -> = null
   * 37 Weak Mutation 150: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:197 - ReplaceVariable name -> file
   * 38 Weak Mutation 151: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:197 - ReplaceComparisonOperator = null -> != null
   * 39 Weak Mutation 162: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - DeleteStatement: toString()Ljava/lang/String;
   * 40 Weak Mutation 161: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 41 Weak Mutation 160: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceVariable name -> file
   */
  @Test
  public void test32()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      // Undeclared exception!
      try {
        DbCompat.openDatabase((Environment) null, (Transaction) null, "Can't call SecondaryDatabase.get:", "a/,u^V", (DatabaseConfig) secondaryConfig0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 33
  /*
   * 23 covered goals:
   * 1 Weak Mutation 143: com.sleepycat.compat.DbCompat.openSecondaryDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/Database;Lcom/sleepycat/je/SecondaryConfig;)Lcom/sleepycat/je/SecondaryDatabase;:189 - ReplaceVariable file -> name
   * 2 Weak Mutation 144: com.sleepycat.compat.DbCompat.openSecondaryDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/Database;Lcom/sleepycat/je/SecondaryConfig;)Lcom/sleepycat/je/SecondaryDatabase;:189 - ReplaceVariable name -> file
   * 3 Weak Mutation 145: com.sleepycat.compat.DbCompat.openSecondaryDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/Database;Lcom/sleepycat/je/SecondaryConfig;)Lcom/sleepycat/je/SecondaryDatabase;:189 - DeleteStatement: makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
   * 4 Weak Mutation 146: com.sleepycat.compat.DbCompat.openSecondaryDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/Database;Lcom/sleepycat/je/SecondaryConfig;)Lcom/sleepycat/je/SecondaryDatabase;:189 - DeleteStatement: openSecondaryDatabase(Lcom/sleepycat/je/Transaction;Ljava/lang/String;Lcom/sleepycat/je/Database;Lcom/sleepycat/je/SecondaryConfig;)Lcom/sleepycat/je/SecondaryDatabase;
   * 5 com.sleepycat.compat.DbCompat.openSecondaryDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/Database;Lcom/sleepycat/je/SecondaryConfig;)Lcom/sleepycat/je/SecondaryDatabase;: root-Branch
   * 6 Weak Mutation 152: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceVariable file -> name
   * 7 Weak Mutation 153: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - DeleteStatement: valueOf(Ljava/lang/Object;)Ljava/lang/String;
   * 8 Weak Mutation 154: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceConstant - 46 -> 0
   * 9 Weak Mutation 155: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceConstant - 46 -> 1
   * 10 Weak Mutation 156: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceConstant - 46 -> -1
   * 11 Weak Mutation 157: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceConstant - 46 -> 45
   * 12 Weak Mutation 158: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceConstant - 46 -> 47
   * 13 Weak Mutation 159: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - DeleteStatement: append(C)Ljava/lang/StringBuilder;
   * 14 Weak Mutation 147: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:193 - ReplaceVariable file -> name
   * 15 Weak Mutation 150: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:197 - ReplaceVariable name -> file
   * 16 Weak Mutation 151: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:197 - ReplaceComparisonOperator = null -> != null
   * 17 Weak Mutation 162: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - DeleteStatement: toString()Ljava/lang/String;
   * 18 Weak Mutation 161: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 19 Weak Mutation 160: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:198 - ReplaceVariable name -> file
   * 20 Weak Mutation 143: com.sleepycat.compat.DbCompat.openSecondaryDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/Database;Lcom/sleepycat/je/SecondaryConfig;)Lcom/sleepycat/je/SecondaryDatabase;:189 - ReplaceVariable file -> name
   * 21 Weak Mutation 144: com.sleepycat.compat.DbCompat.openSecondaryDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/Database;Lcom/sleepycat/je/SecondaryConfig;)Lcom/sleepycat/je/SecondaryDatabase;:189 - ReplaceVariable name -> file
   * 22 Weak Mutation 145: com.sleepycat.compat.DbCompat.openSecondaryDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/Database;Lcom/sleepycat/je/SecondaryConfig;)Lcom/sleepycat/je/SecondaryDatabase;:189 - DeleteStatement: makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
   * 23 Weak Mutation 146: com.sleepycat.compat.DbCompat.openSecondaryDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/Database;Lcom/sleepycat/je/SecondaryConfig;)Lcom/sleepycat/je/SecondaryDatabase;:189 - DeleteStatement: openSecondaryDatabase(Lcom/sleepycat/je/Transaction;Ljava/lang/String;Lcom/sleepycat/je/Database;Lcom/sleepycat/je/SecondaryConfig;)Lcom/sleepycat/je/SecondaryDatabase;
   */
  @Test
  public void test33()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      // Undeclared exception!
      try {
        DbCompat.openSecondaryDatabase((Environment) null, (Transaction) null, "Can't call SecondaryDatabase.get:", "a/,u^V", (Database) null, secondaryConfig0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 34
  /*
   * 4 covered goals:
   * 1 com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I3 Branch 7 IFNONNULL L193 - false
   * 2 Weak Mutation 141: com.sleepycat.compat.DbCompat.openDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/DatabaseConfig;)Lcom/sleepycat/je/Database;:185 - DeleteStatement: makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
   * 3 Weak Mutation 142: com.sleepycat.compat.DbCompat.openDatabase(Lcom/sleepycat/je/Environment;Lcom/sleepycat/je/Transaction;Ljava/lang/String;Ljava/lang/String;Lcom/sleepycat/je/DatabaseConfig;)Lcom/sleepycat/je/Database;:185 - DeleteStatement: openDatabase(Lcom/sleepycat/je/Transaction;Ljava/lang/String;Lcom/sleepycat/je/DatabaseConfig;)Lcom/sleepycat/je/Database;
   * 4 Weak Mutation 148: com.sleepycat.compat.DbCompat.makeDbName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:193 - ReplaceComparisonOperator != null -> = null
   */
  @Test
  public void test34()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      // Undeclared exception!
      try {
        DbCompat.openDatabase((Environment) null, (Transaction) null, (String) null, (String) null, databaseConfig0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
