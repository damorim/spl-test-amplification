/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.util.FastInputStream;
import java.io.IOException;

@RunWith(EvoSuiteRunner.class)
public class TestFastInputStream {


  //Test case number: 0
  /*
   * 40 covered goals:
   * 1 Weak Mutation 135: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - ReplaceComparisonOperator > -> !=
   * 2 Weak Mutation 0: com.sleepycat.util.FastInputStream.<init>([BII)V:35 - ReplaceVariable offset -> length
   * 3 Weak Mutation 1: com.sleepycat.util.FastInputStream.<init>([BII)V:35 - InsertUnaryOp Negation of offset
   * 4 Weak Mutation 2: com.sleepycat.util.FastInputStream.<init>([BII)V:35 - InsertUnaryOp IINC 1 offset
   * 5 Weak Mutation 3: com.sleepycat.util.FastInputStream.<init>([BII)V:35 - InsertUnaryOp IINC -1 offset
   * 6 Weak Mutation 4: com.sleepycat.util.FastInputStream.<init>([BII)V:36 - ReplaceVariable length -> offset
   * 7 Weak Mutation 5: com.sleepycat.util.FastInputStream.<init>([BII)V:36 - InsertUnaryOp Negation of length
   * 8 Weak Mutation 6: com.sleepycat.util.FastInputStream.<init>([BII)V:36 - InsertUnaryOp IINC 1 length
   * 9 Weak Mutation 7: com.sleepycat.util.FastInputStream.<init>([BII)V:36 - InsertUnaryOp IINC -1 length
   * 10 Weak Mutation 77: com.sleepycat.util.FastInputStream.read([BII)I:65 - InsertUnaryOp Negation of offset
   * 11 Weak Mutation 78: com.sleepycat.util.FastInputStream.read([BII)I:65 - InsertUnaryOp IINC 1 offset
   * 12 Weak Mutation 79: com.sleepycat.util.FastInputStream.read([BII)I:65 - InsertUnaryOp IINC -1 offset
   * 13 Weak Mutation 84: com.sleepycat.util.FastInputStream.read([BII)I:65 - DeleteStatement: readFast([BII)I
   * 14 Weak Mutation 81: com.sleepycat.util.FastInputStream.read([BII)I:65 - InsertUnaryOp Negation of length
   * 15 Weak Mutation 83: com.sleepycat.util.FastInputStream.read([BII)I:65 - InsertUnaryOp IINC -1 length
   * 16 Weak Mutation 82: com.sleepycat.util.FastInputStream.read([BII)I:65 - InsertUnaryOp IINC 1 length
   * 17 Weak Mutation 119: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - InsertUnaryOp +1
   * 18 Weak Mutation 118: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - InsertUnaryOp Negation
   * 19 Weak Mutation 127: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - ReplaceArithmeticOperator - -> %
   * 20 Weak Mutation 126: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - ReplaceArithmeticOperator - -> +
   * 21 Weak Mutation 125: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - DeleteField: offI
   * 22 Weak Mutation 124: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - InsertUnaryOp -1
   * 23 Weak Mutation 123: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - InsertUnaryOp +1
   * 24 Weak Mutation 122: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - InsertUnaryOp Negation
   * 25 Weak Mutation 121: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - DeleteField: lenI
   * 26 Weak Mutation 120: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - InsertUnaryOp -1
   * 27 Weak Mutation 139: com.sleepycat.util.FastInputStream.readFast([BII)I:91 - ReplaceConstant - -1 -> 1
   * 28 Weak Mutation 138: com.sleepycat.util.FastInputStream.readFast([BII)I:91 - ReplaceConstant - -1 -> 0
   * 29 Weak Mutation 140: com.sleepycat.util.FastInputStream.readFast([BII)I:91 - ReplaceConstant - -1 -> -2
   * 30 Weak Mutation 129: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - ReplaceArithmeticOperator - -> *
   * 31 Weak Mutation 128: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - ReplaceArithmeticOperator - -> /
   * 32 Weak Mutation 131: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - ReplaceVariable avail -> offset
   * 33 Weak Mutation 130: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - ReplaceVariable avail -> length
   * 34 Weak Mutation 133: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - InsertUnaryOp IINC 1 avail
   * 35 Weak Mutation 132: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - InsertUnaryOp Negation of avail
   * 36 Weak Mutation 135: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - ReplaceComparisonOperator > -> !=
   * 37 Weak Mutation 134: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - InsertUnaryOp IINC -1 avail
   * 38 com.sleepycat.util.FastInputStream.<init>([BII)V: root-Branch
   * 39 com.sleepycat.util.FastInputStream.read([BII)I: root-Branch
   * 40 com.sleepycat.util.FastInputStream.readFast([BII)I: I11 Branch 3 IFGT L90 - false
   */
  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0, 255, (-607));
      int int0 = fastInputStream0.read(byteArray0, (int) (byte)0, 0);
      assertEquals(-862, fastInputStream0.available());
      assertEquals((-1), int0);
  }

  //Test case number: 1
  /*
   * 25 covered goals:
   * 1 Weak Mutation 15: com.sleepycat.util.FastInputStream.available()I:39 - DeleteField: offI
   * 2 Weak Mutation 16: com.sleepycat.util.FastInputStream.available()I:39 - ReplaceArithmeticOperator - -> +
   * 3 Weak Mutation 19: com.sleepycat.util.FastInputStream.available()I:39 - ReplaceArithmeticOperator - -> *
   * 4 Weak Mutation 8: com.sleepycat.util.FastInputStream.available()I:39 - InsertUnaryOp Negation
   * 5 Weak Mutation 9: com.sleepycat.util.FastInputStream.available()I:39 - InsertUnaryOp +1
   * 6 Weak Mutation 10: com.sleepycat.util.FastInputStream.available()I:39 - InsertUnaryOp -1
   * 7 Weak Mutation 11: com.sleepycat.util.FastInputStream.available()I:39 - DeleteField: lenI
   * 8 Weak Mutation 12: com.sleepycat.util.FastInputStream.available()I:39 - InsertUnaryOp Negation
   * 9 Weak Mutation 13: com.sleepycat.util.FastInputStream.available()I:39 - InsertUnaryOp +1
   * 10 Weak Mutation 14: com.sleepycat.util.FastInputStream.available()I:39 - InsertUnaryOp -1
   * 11 Weak Mutation 17: com.sleepycat.util.FastInputStream.available()I:39 - ReplaceArithmeticOperator - -> %
   * 12 Weak Mutation 18: com.sleepycat.util.FastInputStream.available()I:39 - ReplaceArithmeticOperator - -> /
   * 13 Weak Mutation 8: com.sleepycat.util.FastInputStream.available()I:39 - InsertUnaryOp Negation
   * 14 Weak Mutation 9: com.sleepycat.util.FastInputStream.available()I:39 - InsertUnaryOp +1
   * 15 Weak Mutation 10: com.sleepycat.util.FastInputStream.available()I:39 - InsertUnaryOp -1
   * 16 Weak Mutation 11: com.sleepycat.util.FastInputStream.available()I:39 - DeleteField: lenI
   * 17 Weak Mutation 12: com.sleepycat.util.FastInputStream.available()I:39 - InsertUnaryOp Negation
   * 18 Weak Mutation 13: com.sleepycat.util.FastInputStream.available()I:39 - InsertUnaryOp +1
   * 19 Weak Mutation 14: com.sleepycat.util.FastInputStream.available()I:39 - InsertUnaryOp -1
   * 20 Weak Mutation 15: com.sleepycat.util.FastInputStream.available()I:39 - DeleteField: offI
   * 21 Weak Mutation 17: com.sleepycat.util.FastInputStream.available()I:39 - ReplaceArithmeticOperator - -> %
   * 22 Weak Mutation 16: com.sleepycat.util.FastInputStream.available()I:39 - ReplaceArithmeticOperator - -> +
   * 23 Weak Mutation 19: com.sleepycat.util.FastInputStream.available()I:39 - ReplaceArithmeticOperator - -> *
   * 24 Weak Mutation 18: com.sleepycat.util.FastInputStream.available()I:39 - ReplaceArithmeticOperator - -> /
   * 25 com.sleepycat.util.FastInputStream.available()I: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0, (-1434), (-89));
      int int0 = fastInputStream0.available();
      assertEquals(1343, int0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 Weak Mutation 20: com.sleepycat.util.FastInputStream.markSupported()Z:42 - ReplaceConstant - 1 -> 0
   * 2 com.sleepycat.util.FastInputStream.markSupported()Z: root-Branch
   * 3 Weak Mutation 20: com.sleepycat.util.FastInputStream.markSupported()Z:42 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0, (-1833), 348);
      boolean boolean0 = fastInputStream0.markSupported();
      assertEquals(-1829, fastInputStream0.getBufferOffset());
      assertEquals(true, boolean0);
  }

  //Test case number: 3
  /*
   * 17 covered goals:
   * 1 Weak Mutation 27: com.sleepycat.util.FastInputStream.reset()V:48 - DeleteField: markI
   * 2 Weak Mutation 21: com.sleepycat.util.FastInputStream.mark(I)V:45 - InsertUnaryOp Negation of pos
   * 3 Weak Mutation 23: com.sleepycat.util.FastInputStream.mark(I)V:45 - InsertUnaryOp IINC -1 pos
   * 4 Weak Mutation 22: com.sleepycat.util.FastInputStream.mark(I)V:45 - InsertUnaryOp IINC 1 pos
   * 5 Weak Mutation 25: com.sleepycat.util.FastInputStream.reset()V:48 - InsertUnaryOp +1
   * 6 Weak Mutation 24: com.sleepycat.util.FastInputStream.reset()V:48 - InsertUnaryOp Negation
   * 7 Weak Mutation 26: com.sleepycat.util.FastInputStream.reset()V:48 - InsertUnaryOp -1
   * 8 Weak Mutation 21: com.sleepycat.util.FastInputStream.mark(I)V:45 - InsertUnaryOp Negation of pos
   * 9 Weak Mutation 23: com.sleepycat.util.FastInputStream.mark(I)V:45 - InsertUnaryOp IINC -1 pos
   * 10 Weak Mutation 22: com.sleepycat.util.FastInputStream.mark(I)V:45 - InsertUnaryOp IINC 1 pos
   * 11 Weak Mutation 25: com.sleepycat.util.FastInputStream.reset()V:48 - InsertUnaryOp +1
   * 12 Weak Mutation 24: com.sleepycat.util.FastInputStream.reset()V:48 - InsertUnaryOp Negation
   * 13 Weak Mutation 27: com.sleepycat.util.FastInputStream.reset()V:48 - DeleteField: markI
   * 14 Weak Mutation 26: com.sleepycat.util.FastInputStream.reset()V:48 - InsertUnaryOp -1
   * 15 com.sleepycat.util.FastInputStream.reset()V: root-Branch
   * 16 com.sleepycat.util.FastInputStream.mark(I)V: root-Branch
   * 17 com.sleepycat.util.FastInputStream.<init>([B)V: root-Branch
   */
  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0);
      fastInputStream0.mark((-505));
      fastInputStream0.reset();
      assertEquals(507, fastInputStream0.available());
      assertEquals(-503, fastInputStream0.getBufferOffset());
  }

  //Test case number: 4
  /*
   * 36 covered goals:
   * 1 Weak Mutation 35: com.sleepycat.util.FastInputStream.skip(J)J:52 - DeleteField: offI
   * 2 Weak Mutation 39: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceArithmeticOperator + -> *
   * 3 Weak Mutation 36: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceArithmeticOperator + -> -
   * 4 Weak Mutation 62: com.sleepycat.util.FastInputStream.skip(J)J:55 - DeleteField: offI
   * 5 Weak Mutation 44: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceComparisonOperator <= -> ==
   * 6 Weak Mutation 29: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp Negation of myCount
   * 7 Weak Mutation 28: com.sleepycat.util.FastInputStream.skip(J)J:51 - InsertUnaryOp Negation of count
   * 8 Weak Mutation 31: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp IINC -1 myCount
   * 9 Weak Mutation 30: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp IINC 1 myCount
   * 10 Weak Mutation 34: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp -1
   * 11 Weak Mutation 35: com.sleepycat.util.FastInputStream.skip(J)J:52 - DeleteField: offI
   * 12 Weak Mutation 32: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp Negation
   * 13 Weak Mutation 33: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp +1
   * 14 Weak Mutation 38: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceArithmeticOperator + -> /
   * 15 Weak Mutation 39: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceArithmeticOperator + -> *
   * 16 Weak Mutation 36: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceArithmeticOperator + -> -
   * 17 Weak Mutation 37: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceArithmeticOperator + -> %
   * 18 Weak Mutation 42: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp -1
   * 19 Weak Mutation 40: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp Negation
   * 20 Weak Mutation 41: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp +1
   * 21 Weak Mutation 44: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceComparisonOperator <= -> ==
   * 22 Weak Mutation 59: com.sleepycat.util.FastInputStream.skip(J)J:55 - InsertUnaryOp Negation
   * 23 Weak Mutation 63: com.sleepycat.util.FastInputStream.skip(J)J:55 - InsertUnaryOp Negation of myCount
   * 24 Weak Mutation 62: com.sleepycat.util.FastInputStream.skip(J)J:55 - DeleteField: offI
   * 25 Weak Mutation 61: com.sleepycat.util.FastInputStream.skip(J)J:55 - InsertUnaryOp -1
   * 26 Weak Mutation 60: com.sleepycat.util.FastInputStream.skip(J)J:55 - InsertUnaryOp +1
   * 27 Weak Mutation 68: com.sleepycat.util.FastInputStream.skip(J)J:55 - ReplaceArithmeticOperator + -> /
   * 28 Weak Mutation 69: com.sleepycat.util.FastInputStream.skip(J)J:55 - ReplaceArithmeticOperator + -> *
   * 29 Weak Mutation 70: com.sleepycat.util.FastInputStream.skip(J)J:56 - InsertUnaryOp Negation of myCount
   * 30 Weak Mutation 71: com.sleepycat.util.FastInputStream.skip(J)J:56 - InsertUnaryOp IINC 1 myCount
   * 31 Weak Mutation 64: com.sleepycat.util.FastInputStream.skip(J)J:55 - InsertUnaryOp IINC 1 myCount
   * 32 Weak Mutation 65: com.sleepycat.util.FastInputStream.skip(J)J:55 - InsertUnaryOp IINC -1 myCount
   * 33 Weak Mutation 66: com.sleepycat.util.FastInputStream.skip(J)J:55 - ReplaceArithmeticOperator + -> -
   * 34 Weak Mutation 67: com.sleepycat.util.FastInputStream.skip(J)J:55 - ReplaceArithmeticOperator + -> %
   * 35 Weak Mutation 72: com.sleepycat.util.FastInputStream.skip(J)J:56 - InsertUnaryOp IINC -1 myCount
   * 36 com.sleepycat.util.FastInputStream.skip(J)J: I13 Branch 1 IF_ICMPLE L52 - true
   */
  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0, 0, 0);
      fastInputStream0.skip((-1L));
      long long0 = fastInputStream0.skip((-1L));
      assertEquals((-1L), long0);
      assertEquals(0, fastInputStream0.available());
      assertEquals(0, fastInputStream0.getBufferOffset());
  }

  //Test case number: 5
  /*
   * 35 covered goals:
   * 1 Weak Mutation 43: com.sleepycat.util.FastInputStream.skip(J)J:52 - DeleteField: lenI
   * 2 Weak Mutation 46: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceComparisonOperator <= -> -1
   * 3 Weak Mutation 47: com.sleepycat.util.FastInputStream.skip(J)J:53 - InsertUnaryOp Negation
   * 4 Weak Mutation 51: com.sleepycat.util.FastInputStream.skip(J)J:53 - InsertUnaryOp Negation
   * 5 Weak Mutation 50: com.sleepycat.util.FastInputStream.skip(J)J:53 - DeleteField: lenI
   * 6 Weak Mutation 49: com.sleepycat.util.FastInputStream.skip(J)J:53 - InsertUnaryOp -1
   * 7 Weak Mutation 48: com.sleepycat.util.FastInputStream.skip(J)J:53 - InsertUnaryOp +1
   * 8 Weak Mutation 55: com.sleepycat.util.FastInputStream.skip(J)J:53 - ReplaceArithmeticOperator - -> +
   * 9 Weak Mutation 54: com.sleepycat.util.FastInputStream.skip(J)J:53 - DeleteField: offI
   * 10 Weak Mutation 53: com.sleepycat.util.FastInputStream.skip(J)J:53 - InsertUnaryOp -1
   * 11 Weak Mutation 52: com.sleepycat.util.FastInputStream.skip(J)J:53 - InsertUnaryOp +1
   * 12 Weak Mutation 58: com.sleepycat.util.FastInputStream.skip(J)J:53 - ReplaceArithmeticOperator - -> *
   * 13 Weak Mutation 57: com.sleepycat.util.FastInputStream.skip(J)J:53 - ReplaceArithmeticOperator - -> /
   * 14 Weak Mutation 56: com.sleepycat.util.FastInputStream.skip(J)J:53 - ReplaceArithmeticOperator - -> %
   * 15 com.sleepycat.util.FastInputStream.skip(J)J: I13 Branch 1 IF_ICMPLE L52 - false
   * 16 Weak Mutation 35: com.sleepycat.util.FastInputStream.skip(J)J:52 - DeleteField: offI
   * 17 Weak Mutation 39: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceArithmeticOperator + -> *
   * 18 Weak Mutation 36: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceArithmeticOperator + -> -
   * 19 Weak Mutation 62: com.sleepycat.util.FastInputStream.skip(J)J:55 - DeleteField: offI
   * 20 Weak Mutation 69: com.sleepycat.util.FastInputStream.skip(J)J:55 - ReplaceArithmeticOperator + -> *
   * 21 Weak Mutation 66: com.sleepycat.util.FastInputStream.skip(J)J:55 - ReplaceArithmeticOperator + -> -
   * 22 Weak Mutation 43: com.sleepycat.util.FastInputStream.skip(J)J:52 - DeleteField: lenI
   * 23 Weak Mutation 46: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceComparisonOperator <= -> -1
   * 24 Weak Mutation 47: com.sleepycat.util.FastInputStream.skip(J)J:53 - InsertUnaryOp Negation
   * 25 Weak Mutation 51: com.sleepycat.util.FastInputStream.skip(J)J:53 - InsertUnaryOp Negation
   * 26 Weak Mutation 50: com.sleepycat.util.FastInputStream.skip(J)J:53 - DeleteField: lenI
   * 27 Weak Mutation 49: com.sleepycat.util.FastInputStream.skip(J)J:53 - InsertUnaryOp -1
   * 28 Weak Mutation 48: com.sleepycat.util.FastInputStream.skip(J)J:53 - InsertUnaryOp +1
   * 29 Weak Mutation 55: com.sleepycat.util.FastInputStream.skip(J)J:53 - ReplaceArithmeticOperator - -> +
   * 30 Weak Mutation 54: com.sleepycat.util.FastInputStream.skip(J)J:53 - DeleteField: offI
   * 31 Weak Mutation 53: com.sleepycat.util.FastInputStream.skip(J)J:53 - InsertUnaryOp -1
   * 32 Weak Mutation 52: com.sleepycat.util.FastInputStream.skip(J)J:53 - InsertUnaryOp +1
   * 33 Weak Mutation 58: com.sleepycat.util.FastInputStream.skip(J)J:53 - ReplaceArithmeticOperator - -> *
   * 34 Weak Mutation 57: com.sleepycat.util.FastInputStream.skip(J)J:53 - ReplaceArithmeticOperator - -> /
   * 35 Weak Mutation 56: com.sleepycat.util.FastInputStream.skip(J)J:53 - ReplaceArithmeticOperator - -> %
   */
  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0, (int) (byte)80, (-445));
      long long0 = fastInputStream0.skip((-1L));
      assertEquals((-525L), long0);
      assertEquals(-445, fastInputStream0.getBufferOffset());
  }

  //Test case number: 6
  /*
   * 25 covered goals:
   * 1 Weak Mutation 45: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceComparisonOperator <= -> <
   * 2 Weak Mutation 29: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp Negation of myCount
   * 3 Weak Mutation 28: com.sleepycat.util.FastInputStream.skip(J)J:51 - InsertUnaryOp Negation of count
   * 4 Weak Mutation 31: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp IINC -1 myCount
   * 5 Weak Mutation 30: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp IINC 1 myCount
   * 6 Weak Mutation 34: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp -1
   * 7 Weak Mutation 32: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp Negation
   * 8 Weak Mutation 33: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp +1
   * 9 Weak Mutation 38: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceArithmeticOperator + -> /
   * 10 Weak Mutation 37: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceArithmeticOperator + -> %
   * 11 Weak Mutation 42: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp -1
   * 12 Weak Mutation 40: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp Negation
   * 13 Weak Mutation 41: com.sleepycat.util.FastInputStream.skip(J)J:52 - InsertUnaryOp +1
   * 14 Weak Mutation 59: com.sleepycat.util.FastInputStream.skip(J)J:55 - InsertUnaryOp Negation
   * 15 Weak Mutation 63: com.sleepycat.util.FastInputStream.skip(J)J:55 - InsertUnaryOp Negation of myCount
   * 16 Weak Mutation 61: com.sleepycat.util.FastInputStream.skip(J)J:55 - InsertUnaryOp -1
   * 17 Weak Mutation 60: com.sleepycat.util.FastInputStream.skip(J)J:55 - InsertUnaryOp +1
   * 18 Weak Mutation 68: com.sleepycat.util.FastInputStream.skip(J)J:55 - ReplaceArithmeticOperator + -> /
   * 19 Weak Mutation 70: com.sleepycat.util.FastInputStream.skip(J)J:56 - InsertUnaryOp Negation of myCount
   * 20 Weak Mutation 71: com.sleepycat.util.FastInputStream.skip(J)J:56 - InsertUnaryOp IINC 1 myCount
   * 21 Weak Mutation 64: com.sleepycat.util.FastInputStream.skip(J)J:55 - InsertUnaryOp IINC 1 myCount
   * 22 Weak Mutation 65: com.sleepycat.util.FastInputStream.skip(J)J:55 - InsertUnaryOp IINC -1 myCount
   * 23 Weak Mutation 67: com.sleepycat.util.FastInputStream.skip(J)J:55 - ReplaceArithmeticOperator + -> %
   * 24 Weak Mutation 72: com.sleepycat.util.FastInputStream.skip(J)J:56 - InsertUnaryOp IINC -1 myCount
   * 25 Weak Mutation 45: com.sleepycat.util.FastInputStream.skip(J)J:52 - ReplaceComparisonOperator <= -> <
   */
  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0, (int) (byte)0, (int) (byte)0);
      long long0 = fastInputStream0.skip((long) (byte)0);
      assertEquals(0L, long0);
      assertEquals(0, fastInputStream0.getBufferOffset());
  }

  //Test case number: 7
  /*
   * 30 covered goals:
   * 1 Weak Mutation 100: com.sleepycat.util.FastInputStream.readFast()I:73 - DeleteField: offI
   * 2 Weak Mutation 73: com.sleepycat.util.FastInputStream.read()I:59 - DeleteStatement: readFast()I
   * 3 Weak Mutation 85: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp Negation
   * 4 Weak Mutation 87: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp -1
   * 5 Weak Mutation 86: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp +1
   * 6 Weak Mutation 92: com.sleepycat.util.FastInputStream.readFast()I:73 - DeleteField: lenI
   * 7 Weak Mutation 95: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceComparisonOperator >= -> -1
   * 8 Weak Mutation 89: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp Negation
   * 9 Weak Mutation 88: com.sleepycat.util.FastInputStream.readFast()I:73 - DeleteField: offI
   * 10 Weak Mutation 91: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp -1
   * 11 Weak Mutation 90: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp +1
   * 12 Weak Mutation 102: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceArithmeticOperator + -> -
   * 13 Weak Mutation 103: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceArithmeticOperator + -> %
   * 14 Weak Mutation 100: com.sleepycat.util.FastInputStream.readFast()I:73 - DeleteField: offI
   * 15 Weak Mutation 101: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - 1 -> 0
   * 16 Weak Mutation 98: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp +1
   * 17 Weak Mutation 99: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp -1
   * 18 Weak Mutation 96: com.sleepycat.util.FastInputStream.readFast()I:73 - DeleteField: buf[B
   * 19 Weak Mutation 97: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp Negation
   * 20 Weak Mutation 110: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - 255 -> 256
   * 21 Weak Mutation 111: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceBitwiseOperator & -> |
   * 22 Weak Mutation 108: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - 255 -> -1
   * 23 Weak Mutation 109: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - 255 -> 254
   * 24 Weak Mutation 106: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - 255 -> 0
   * 25 Weak Mutation 107: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - 255 -> 1
   * 26 Weak Mutation 104: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceArithmeticOperator + -> /
   * 27 Weak Mutation 105: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceArithmeticOperator + -> *
   * 28 Weak Mutation 112: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceBitwiseOperator & -> ^
   * 29 com.sleepycat.util.FastInputStream.read()I: root-Branch
   * 30 com.sleepycat.util.FastInputStream.readFast()I: I6 Branch 2 IF_ICMPGE L73 - false
   */
  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0);
      fastInputStream0.read();
      int int0 = fastInputStream0.read();
      assertEquals(0, fastInputStream0.available());
      assertEquals((-1), int0);
  }

  //Test case number: 8
  /*
   * 11 covered goals:
   * 1 Weak Mutation 93: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceComparisonOperator >= -> ==
   * 2 Weak Mutation 88: com.sleepycat.util.FastInputStream.readFast()I:73 - DeleteField: offI
   * 3 Weak Mutation 115: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - -1 -> -2
   * 4 Weak Mutation 114: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - -1 -> 1
   * 5 Weak Mutation 113: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - -1 -> 0
   * 6 com.sleepycat.util.FastInputStream.readFast()I: I6 Branch 2 IF_ICMPGE L73 - true
   * 7 Weak Mutation 73: com.sleepycat.util.FastInputStream.read()I:59 - DeleteStatement: readFast()I
   * 8 Weak Mutation 93: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceComparisonOperator >= -> ==
   * 9 Weak Mutation 115: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - -1 -> -2
   * 10 Weak Mutation 114: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - -1 -> 1
   * 11 Weak Mutation 113: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - -1 -> 0
   */
  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0, (int) (byte)12, (-1030));
      int int0 = fastInputStream0.read();
      assertEquals(-1042, fastInputStream0.available());
      assertEquals((-1), int0);
  }

  //Test case number: 9
  /*
   * 57 covered goals:
   * 1 Weak Mutation 94: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceComparisonOperator >= -> >
   * 2 Weak Mutation 117: com.sleepycat.util.FastInputStream.readFast([B)I:81 - DeleteStatement: readFast([BII)I
   * 3 Weak Mutation 116: com.sleepycat.util.FastInputStream.readFast([B)I:81 - ReplaceConstant - 0 -> 1
   * 4 com.sleepycat.util.FastInputStream.readFast([B)I: root-Branch
   * 5 Weak Mutation 88: com.sleepycat.util.FastInputStream.readFast()I:73 - DeleteField: offI
   * 6 Weak Mutation 115: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - -1 -> -2
   * 7 Weak Mutation 114: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - -1 -> 1
   * 8 Weak Mutation 113: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - -1 -> 0
   * 9 Weak Mutation 152: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - ReplaceComparisonOperator <= -> <
   * 10 Weak Mutation 187: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - ReplaceArithmeticOperator + -> *
   * 11 Weak Mutation 184: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - ReplaceArithmeticOperator + -> -
   * 12 Weak Mutation 189: com.sleepycat.util.FastInputStream.readFast([BII)I:98 - ReplaceVariable length -> offset
   * 13 Weak Mutation 180: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - ReplaceVariable length -> offset
   * 14 Weak Mutation 94: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceComparisonOperator >= -> >
   * 15 Weak Mutation 117: com.sleepycat.util.FastInputStream.readFast([B)I:81 - DeleteStatement: readFast([BII)I
   * 16 Weak Mutation 116: com.sleepycat.util.FastInputStream.readFast([B)I:81 - ReplaceConstant - 0 -> 1
   * 17 Weak Mutation 137: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - ReplaceComparisonOperator > -> -2
   * 18 Weak Mutation 143: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - InsertUnaryOp Negation of length
   * 19 Weak Mutation 142: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - ReplaceVariable length -> offset
   * 20 Weak Mutation 152: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - ReplaceComparisonOperator <= -> <
   * 21 Weak Mutation 159: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - DeleteField: buf[B
   * 22 Weak Mutation 144: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - InsertUnaryOp IINC 1 length
   * 23 Weak Mutation 145: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - InsertUnaryOp IINC -1 length
   * 24 Weak Mutation 147: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - ReplaceVariable avail -> offset
   * 25 Weak Mutation 148: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - InsertUnaryOp Negation of avail
   * 26 Weak Mutation 149: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - InsertUnaryOp IINC 1 avail
   * 27 Weak Mutation 150: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - InsertUnaryOp IINC -1 avail
   * 28 Weak Mutation 171: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp Negation of length
   * 29 Weak Mutation 170: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - ReplaceVariable length -> offset
   * 30 Weak Mutation 168: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp IINC -1 offset
   * 31 Weak Mutation 175: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - InsertUnaryOp Negation
   * 32 Weak Mutation 174: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - DeleteStatement: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
   * 33 Weak Mutation 173: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp IINC -1 length
   * 34 Weak Mutation 172: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp IINC 1 length
   * 35 Weak Mutation 162: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp -1
   * 36 Weak Mutation 161: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp +1
   * 37 Weak Mutation 160: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp Negation
   * 38 Weak Mutation 167: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp IINC 1 offset
   * 39 Weak Mutation 166: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp Negation of offset
   * 40 Weak Mutation 165: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - ReplaceVariable offset -> avail
   * 41 Weak Mutation 164: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - ReplaceVariable offset -> length
   * 42 Weak Mutation 186: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - ReplaceArithmeticOperator + -> /
   * 43 Weak Mutation 187: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - ReplaceArithmeticOperator + -> *
   * 44 Weak Mutation 184: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - ReplaceArithmeticOperator + -> -
   * 45 Weak Mutation 185: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - ReplaceArithmeticOperator + -> %
   * 46 Weak Mutation 190: com.sleepycat.util.FastInputStream.readFast([BII)I:98 - InsertUnaryOp Negation of length
   * 47 Weak Mutation 191: com.sleepycat.util.FastInputStream.readFast([BII)I:98 - InsertUnaryOp IINC 1 length
   * 48 Weak Mutation 189: com.sleepycat.util.FastInputStream.readFast([BII)I:98 - ReplaceVariable length -> offset
   * 49 Weak Mutation 176: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - InsertUnaryOp +1
   * 50 Weak Mutation 177: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - InsertUnaryOp -1
   * 51 Weak Mutation 182: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - InsertUnaryOp IINC 1 length
   * 52 Weak Mutation 183: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - InsertUnaryOp IINC -1 length
   * 53 Weak Mutation 180: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - ReplaceVariable length -> offset
   * 54 Weak Mutation 181: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - InsertUnaryOp Negation of length
   * 55 Weak Mutation 192: com.sleepycat.util.FastInputStream.readFast([BII)I:98 - InsertUnaryOp IINC -1 length
   * 56 com.sleepycat.util.FastInputStream.readFast([BII)I: I11 Branch 3 IFGT L90 - true
   * 57 com.sleepycat.util.FastInputStream.readFast([BII)I: I20 Branch 4 IF_ICMPLE L93 - true
   */
  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0);
      fastInputStream0.readFast(byteArray0);
      int int0 = fastInputStream0.readFast();
      assertEquals(5, fastInputStream0.getBufferOffset());
      assertEquals((-1), int0);
  }

  //Test case number: 10
  /*
   * 28 covered goals:
   * 1 Weak Mutation 126: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - ReplaceArithmeticOperator - -> +
   * 2 Weak Mutation 125: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - DeleteField: offI
   * 3 Weak Mutation 129: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - ReplaceArithmeticOperator - -> *
   * 4 Weak Mutation 163: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - DeleteField: offI
   * 5 Weak Mutation 178: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - DeleteField: offI
   * 6 Weak Mutation 179: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - ReplaceVariable length -> avail
   * 7 Weak Mutation 188: com.sleepycat.util.FastInputStream.readFast([BII)I:98 - ReplaceVariable length -> avail
   * 8 Weak Mutation 151: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - ReplaceComparisonOperator <= -> ==
   * 9 Weak Mutation 169: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - ReplaceVariable length -> avail
   * 10 Weak Mutation 175: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - InsertUnaryOp Negation
   * 11 Weak Mutation 186: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - ReplaceArithmeticOperator + -> /
   * 12 Weak Mutation 185: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - ReplaceArithmeticOperator + -> %
   * 13 Weak Mutation 190: com.sleepycat.util.FastInputStream.readFast([BII)I:98 - InsertUnaryOp Negation of length
   * 14 Weak Mutation 191: com.sleepycat.util.FastInputStream.readFast([BII)I:98 - InsertUnaryOp IINC 1 length
   * 15 Weak Mutation 176: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - InsertUnaryOp +1
   * 16 Weak Mutation 177: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - InsertUnaryOp -1
   * 17 Weak Mutation 182: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - InsertUnaryOp IINC 1 length
   * 18 Weak Mutation 183: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - InsertUnaryOp IINC -1 length
   * 19 Weak Mutation 181: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - InsertUnaryOp Negation of length
   * 20 Weak Mutation 192: com.sleepycat.util.FastInputStream.readFast([BII)I:98 - InsertUnaryOp IINC -1 length
   * 21 Weak Mutation 141: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - ReplaceVariable length -> avail
   * 22 Weak Mutation 146: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - ReplaceVariable avail -> length
   * 23 Weak Mutation 151: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - ReplaceComparisonOperator <= -> ==
   * 24 Weak Mutation 169: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - ReplaceVariable length -> avail
   * 25 Weak Mutation 163: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - DeleteField: offI
   * 26 Weak Mutation 188: com.sleepycat.util.FastInputStream.readFast([BII)I:98 - ReplaceVariable length -> avail
   * 27 Weak Mutation 178: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - DeleteField: offI
   * 28 Weak Mutation 179: com.sleepycat.util.FastInputStream.readFast([BII)I:97 - ReplaceVariable length -> avail
   */
  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0);
      fastInputStream0.readFast();
      int int0 = fastInputStream0.read(byteArray0, (int) (byte)0, 0);
      assertEquals(4, fastInputStream0.available());
      assertEquals(0, int0);
  }

  //Test case number: 11
  /*
   * 11 covered goals:
   * 1 Weak Mutation 136: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - ReplaceComparisonOperator > -> >=
   * 2 Weak Mutation 139: com.sleepycat.util.FastInputStream.readFast([BII)I:91 - ReplaceConstant - -1 -> 1
   * 3 Weak Mutation 138: com.sleepycat.util.FastInputStream.readFast([BII)I:91 - ReplaceConstant - -1 -> 0
   * 4 Weak Mutation 140: com.sleepycat.util.FastInputStream.readFast([BII)I:91 - ReplaceConstant - -1 -> -2
   * 5 com.sleepycat.util.FastInputStream.readFast([BII)I: I11 Branch 3 IFGT L90 - false
   * 6 Weak Mutation 74: com.sleepycat.util.FastInputStream.read([B)I:62 - ReplaceConstant - 0 -> 1
   * 7 Weak Mutation 75: com.sleepycat.util.FastInputStream.read([B)I:62 - DeleteStatement: readFast([BII)I
   * 8 Weak Mutation 74: com.sleepycat.util.FastInputStream.read([B)I:62 - ReplaceConstant - 0 -> 1
   * 9 Weak Mutation 75: com.sleepycat.util.FastInputStream.read([B)I:62 - DeleteStatement: readFast([BII)I
   * 10 Weak Mutation 136: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - ReplaceComparisonOperator > -> >=
   * 11 com.sleepycat.util.FastInputStream.read([B)I: root-Branch
   */
  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0, (int) (byte)0, (int) (byte)0);
      int int0 = fastInputStream0.read(byteArray0);
      assertEquals(0, fastInputStream0.getBufferLength());
      assertEquals(0, fastInputStream0.getBufferOffset());
      assertEquals((-1), int0);
  }

  //Test case number: 12
  /*
   * 67 covered goals:
   * 1 Weak Mutation 153: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - ReplaceComparisonOperator <= -> -1
   * 2 Weak Mutation 154: com.sleepycat.util.FastInputStream.readFast([BII)I:94 - ReplaceVariable avail -> length
   * 3 Weak Mutation 155: com.sleepycat.util.FastInputStream.readFast([BII)I:94 - ReplaceVariable avail -> offset
   * 4 Weak Mutation 156: com.sleepycat.util.FastInputStream.readFast([BII)I:94 - InsertUnaryOp Negation of avail
   * 5 Weak Mutation 157: com.sleepycat.util.FastInputStream.readFast([BII)I:94 - InsertUnaryOp IINC 1 avail
   * 6 Weak Mutation 158: com.sleepycat.util.FastInputStream.readFast([BII)I:94 - InsertUnaryOp IINC -1 avail
   * 7 com.sleepycat.util.FastInputStream.readFast([BII)I: I20 Branch 4 IF_ICMPLE L93 - false
   * 8 Weak Mutation 76: com.sleepycat.util.FastInputStream.read([BII)I:65 - ReplaceVariable offset -> length
   * 9 Weak Mutation 77: com.sleepycat.util.FastInputStream.read([BII)I:65 - InsertUnaryOp Negation of offset
   * 10 Weak Mutation 78: com.sleepycat.util.FastInputStream.read([BII)I:65 - InsertUnaryOp IINC 1 offset
   * 11 Weak Mutation 79: com.sleepycat.util.FastInputStream.read([BII)I:65 - InsertUnaryOp IINC -1 offset
   * 12 Weak Mutation 84: com.sleepycat.util.FastInputStream.read([BII)I:65 - DeleteStatement: readFast([BII)I
   * 13 Weak Mutation 81: com.sleepycat.util.FastInputStream.read([BII)I:65 - InsertUnaryOp Negation of length
   * 14 Weak Mutation 80: com.sleepycat.util.FastInputStream.read([BII)I:65 - ReplaceVariable length -> offset
   * 15 Weak Mutation 83: com.sleepycat.util.FastInputStream.read([BII)I:65 - InsertUnaryOp IINC -1 length
   * 16 Weak Mutation 82: com.sleepycat.util.FastInputStream.read([BII)I:65 - InsertUnaryOp IINC 1 length
   * 17 Weak Mutation 119: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - InsertUnaryOp +1
   * 18 Weak Mutation 118: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - InsertUnaryOp Negation
   * 19 Weak Mutation 127: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - ReplaceArithmeticOperator - -> %
   * 20 Weak Mutation 126: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - ReplaceArithmeticOperator - -> +
   * 21 Weak Mutation 125: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - DeleteField: offI
   * 22 Weak Mutation 124: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - InsertUnaryOp -1
   * 23 Weak Mutation 123: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - InsertUnaryOp +1
   * 24 Weak Mutation 122: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - InsertUnaryOp Negation
   * 25 Weak Mutation 121: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - DeleteField: lenI
   * 26 Weak Mutation 120: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - InsertUnaryOp -1
   * 27 Weak Mutation 137: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - ReplaceComparisonOperator > -> -2
   * 28 Weak Mutation 141: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - ReplaceVariable length -> avail
   * 29 Weak Mutation 143: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - InsertUnaryOp Negation of length
   * 30 Weak Mutation 142: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - ReplaceVariable length -> offset
   * 31 Weak Mutation 129: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - ReplaceArithmeticOperator - -> *
   * 32 Weak Mutation 128: com.sleepycat.util.FastInputStream.readFast([BII)I:89 - ReplaceArithmeticOperator - -> /
   * 33 Weak Mutation 131: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - ReplaceVariable avail -> offset
   * 34 Weak Mutation 130: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - ReplaceVariable avail -> length
   * 35 Weak Mutation 133: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - InsertUnaryOp IINC 1 avail
   * 36 Weak Mutation 132: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - InsertUnaryOp Negation of avail
   * 37 Weak Mutation 134: com.sleepycat.util.FastInputStream.readFast([BII)I:90 - InsertUnaryOp IINC -1 avail
   * 38 Weak Mutation 159: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - DeleteField: buf[B
   * 39 Weak Mutation 144: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - InsertUnaryOp IINC 1 length
   * 40 Weak Mutation 145: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - InsertUnaryOp IINC -1 length
   * 41 Weak Mutation 146: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - ReplaceVariable avail -> length
   * 42 Weak Mutation 147: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - ReplaceVariable avail -> offset
   * 43 Weak Mutation 148: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - InsertUnaryOp Negation of avail
   * 44 Weak Mutation 149: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - InsertUnaryOp IINC 1 avail
   * 45 Weak Mutation 150: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - InsertUnaryOp IINC -1 avail
   * 46 Weak Mutation 171: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp Negation of length
   * 47 Weak Mutation 170: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - ReplaceVariable length -> offset
   * 48 Weak Mutation 168: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp IINC -1 offset
   * 49 Weak Mutation 174: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - DeleteStatement: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
   * 50 Weak Mutation 173: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp IINC -1 length
   * 51 Weak Mutation 172: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp IINC 1 length
   * 52 Weak Mutation 163: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - DeleteField: offI
   * 53 Weak Mutation 162: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp -1
   * 54 Weak Mutation 161: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp +1
   * 55 Weak Mutation 160: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp Negation
   * 56 Weak Mutation 167: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp IINC 1 offset
   * 57 Weak Mutation 166: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - InsertUnaryOp Negation of offset
   * 58 Weak Mutation 165: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - ReplaceVariable offset -> avail
   * 59 Weak Mutation 164: com.sleepycat.util.FastInputStream.readFast([BII)I:96 - ReplaceVariable offset -> length
   * 60 Weak Mutation 76: com.sleepycat.util.FastInputStream.read([BII)I:65 - ReplaceVariable offset -> length
   * 61 Weak Mutation 80: com.sleepycat.util.FastInputStream.read([BII)I:65 - ReplaceVariable length -> offset
   * 62 Weak Mutation 153: com.sleepycat.util.FastInputStream.readFast([BII)I:93 - ReplaceComparisonOperator <= -> -1
   * 63 Weak Mutation 154: com.sleepycat.util.FastInputStream.readFast([BII)I:94 - ReplaceVariable avail -> length
   * 64 Weak Mutation 155: com.sleepycat.util.FastInputStream.readFast([BII)I:94 - ReplaceVariable avail -> offset
   * 65 Weak Mutation 156: com.sleepycat.util.FastInputStream.readFast([BII)I:94 - InsertUnaryOp Negation of avail
   * 66 Weak Mutation 157: com.sleepycat.util.FastInputStream.readFast([BII)I:94 - InsertUnaryOp IINC 1 avail
   * 67 Weak Mutation 158: com.sleepycat.util.FastInputStream.readFast([BII)I:94 - InsertUnaryOp IINC -1 avail
   */
  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0, (-1), (int) (byte)12);
      // Undeclared exception!
      try {
        fastInputStream0.read(byteArray0, (int) (byte)0, 1541);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  //Test case number: 13
  /*
   * 3 covered goals:
   * 1 Weak Mutation 193: com.sleepycat.util.FastInputStream.getBufferBytes()[B:105 - DeleteField: buf[B
   * 2 com.sleepycat.util.FastInputStream.getBufferBytes()[B: root-Branch
   * 3 Weak Mutation 193: com.sleepycat.util.FastInputStream.getBufferBytes()[B:105 - DeleteField: buf[B
   */
  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0, (-1833), 348);
      fastInputStream0.getBufferBytes();
      assertEquals(-1829, fastInputStream0.getBufferOffset());
      assertEquals(2178, fastInputStream0.available());
  }

  //Test case number: 14
  /*
   * 33 covered goals:
   * 1 Weak Mutation 197: com.sleepycat.util.FastInputStream.getBufferOffset()I:112 - DeleteField: offI
   * 2 Weak Mutation 196: com.sleepycat.util.FastInputStream.getBufferOffset()I:112 - InsertUnaryOp -1
   * 3 Weak Mutation 195: com.sleepycat.util.FastInputStream.getBufferOffset()I:112 - InsertUnaryOp +1
   * 4 Weak Mutation 194: com.sleepycat.util.FastInputStream.getBufferOffset()I:112 - InsertUnaryOp Negation
   * 5 com.sleepycat.util.FastInputStream.getBufferOffset()I: root-Branch
   * 6 Weak Mutation 85: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp Negation
   * 7 Weak Mutation 87: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp -1
   * 8 Weak Mutation 86: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp +1
   * 9 Weak Mutation 92: com.sleepycat.util.FastInputStream.readFast()I:73 - DeleteField: lenI
   * 10 Weak Mutation 95: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceComparisonOperator >= -> -1
   * 11 Weak Mutation 89: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp Negation
   * 12 Weak Mutation 91: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp -1
   * 13 Weak Mutation 90: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp +1
   * 14 Weak Mutation 102: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceArithmeticOperator + -> -
   * 15 Weak Mutation 103: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceArithmeticOperator + -> %
   * 16 Weak Mutation 101: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - 1 -> 0
   * 17 Weak Mutation 98: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp +1
   * 18 Weak Mutation 99: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp -1
   * 19 Weak Mutation 96: com.sleepycat.util.FastInputStream.readFast()I:73 - DeleteField: buf[B
   * 20 Weak Mutation 97: com.sleepycat.util.FastInputStream.readFast()I:73 - InsertUnaryOp Negation
   * 21 Weak Mutation 110: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - 255 -> 256
   * 22 Weak Mutation 111: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceBitwiseOperator & -> |
   * 23 Weak Mutation 108: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - 255 -> -1
   * 24 Weak Mutation 109: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - 255 -> 254
   * 25 Weak Mutation 106: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - 255 -> 0
   * 26 Weak Mutation 107: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceConstant - 255 -> 1
   * 27 Weak Mutation 104: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceArithmeticOperator + -> /
   * 28 Weak Mutation 105: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceArithmeticOperator + -> *
   * 29 Weak Mutation 112: com.sleepycat.util.FastInputStream.readFast()I:73 - ReplaceBitwiseOperator & -> ^
   * 30 Weak Mutation 197: com.sleepycat.util.FastInputStream.getBufferOffset()I:112 - DeleteField: offI
   * 31 Weak Mutation 196: com.sleepycat.util.FastInputStream.getBufferOffset()I:112 - InsertUnaryOp -1
   * 32 Weak Mutation 195: com.sleepycat.util.FastInputStream.getBufferOffset()I:112 - InsertUnaryOp +1
   * 33 Weak Mutation 194: com.sleepycat.util.FastInputStream.getBufferOffset()I:112 - InsertUnaryOp Negation
   */
  @Test
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0);
      fastInputStream0.readFast();
      int int0 = fastInputStream0.getBufferOffset();
      assertEquals(4, fastInputStream0.available());
      assertEquals(5, int0);
  }

  //Test case number: 15
  /*
   * 17 covered goals:
   * 1 Weak Mutation 201: com.sleepycat.util.FastInputStream.getBufferLength()I:119 - DeleteField: lenI
   * 2 Weak Mutation 200: com.sleepycat.util.FastInputStream.getBufferLength()I:119 - InsertUnaryOp -1
   * 3 Weak Mutation 199: com.sleepycat.util.FastInputStream.getBufferLength()I:119 - InsertUnaryOp +1
   * 4 Weak Mutation 198: com.sleepycat.util.FastInputStream.getBufferLength()I:119 - InsertUnaryOp Negation
   * 5 com.sleepycat.util.FastInputStream.getBufferLength()I: root-Branch
   * 6 Weak Mutation 0: com.sleepycat.util.FastInputStream.<init>([BII)V:35 - ReplaceVariable offset -> length
   * 7 Weak Mutation 1: com.sleepycat.util.FastInputStream.<init>([BII)V:35 - InsertUnaryOp Negation of offset
   * 8 Weak Mutation 2: com.sleepycat.util.FastInputStream.<init>([BII)V:35 - InsertUnaryOp IINC 1 offset
   * 9 Weak Mutation 3: com.sleepycat.util.FastInputStream.<init>([BII)V:35 - InsertUnaryOp IINC -1 offset
   * 10 Weak Mutation 4: com.sleepycat.util.FastInputStream.<init>([BII)V:36 - ReplaceVariable length -> offset
   * 11 Weak Mutation 5: com.sleepycat.util.FastInputStream.<init>([BII)V:36 - InsertUnaryOp Negation of length
   * 12 Weak Mutation 6: com.sleepycat.util.FastInputStream.<init>([BII)V:36 - InsertUnaryOp IINC 1 length
   * 13 Weak Mutation 7: com.sleepycat.util.FastInputStream.<init>([BII)V:36 - InsertUnaryOp IINC -1 length
   * 14 Weak Mutation 201: com.sleepycat.util.FastInputStream.getBufferLength()I:119 - DeleteField: lenI
   * 15 Weak Mutation 200: com.sleepycat.util.FastInputStream.getBufferLength()I:119 - InsertUnaryOp -1
   * 16 Weak Mutation 199: com.sleepycat.util.FastInputStream.getBufferLength()I:119 - InsertUnaryOp +1
   * 17 Weak Mutation 198: com.sleepycat.util.FastInputStream.getBufferLength()I:119 - InsertUnaryOp Negation
   */
  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FastInputStream fastInputStream0 = new FastInputStream(byteArray0, (-1833), 348);
      int int0 = fastInputStream0.getBufferLength();
      assertEquals(-1829, fastInputStream0.getBufferOffset());
      assertEquals(348, int0);
  }
}
