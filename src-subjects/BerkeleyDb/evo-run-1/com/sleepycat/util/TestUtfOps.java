/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.util.UtfOps;

@RunWith(EvoSuiteRunner.class)
public class TestUtfOps {


  //Test case number: 0
  /*
   * 12 covered goals:
   * 1 Weak Mutation 0: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:27 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 2: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - ReplaceVariable offset -> len
   * 3 Weak Mutation 3: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - InsertUnaryOp Negation of offset
   * 4 Weak Mutation 4: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - InsertUnaryOp IINC 1 offset
   * 5 Weak Mutation 5: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - InsertUnaryOp IINC -1 offset
   * 6 Weak Mutation 6: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - ReplaceVariable offset -> len
   * 7 Weak Mutation 0: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:27 - ReplaceConstant - 0 -> 1
   * 8 Weak Mutation 2: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - ReplaceVariable offset -> len
   * 9 Weak Mutation 3: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - InsertUnaryOp Negation of offset
   * 10 Weak Mutation 4: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - InsertUnaryOp IINC 1 offset
   * 11 Weak Mutation 5: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - InsertUnaryOp IINC -1 offset
   * 12 Weak Mutation 6: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - ReplaceVariable offset -> len
   */
  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      try {
        UtfOps.getZeroTerminatedByteLength(byteArray0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  //Test case number: 1
  /*
   * 23 covered goals:
   * 1 Weak Mutation 8: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - ReplaceComparisonOperator != -> >
   * 2 Weak Mutation 0: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:27 - ReplaceConstant - 0 -> 1
   * 3 Weak Mutation 1: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:29 - ReplaceVariable len -> offset
   * 4 Weak Mutation 3: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - InsertUnaryOp Negation of offset
   * 5 Weak Mutation 4: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - InsertUnaryOp IINC 1 offset
   * 6 Weak Mutation 5: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - InsertUnaryOp IINC -1 offset
   * 7 Weak Mutation 6: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - ReplaceVariable offset -> len
   * 8 Weak Mutation 7: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - ReplaceComparisonOperator != -> <
   * 9 Weak Mutation 9: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - ReplaceComparisonOperator != -> -1
   * 10 Weak Mutation 10: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:31 - ReplaceVariable len -> offset
   * 11 Weak Mutation 11: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:31 - InsertUnaryOp Negation of len
   * 12 Weak Mutation 12: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:31 - InsertUnaryOp IINC 1 len
   * 13 Weak Mutation 13: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:31 - InsertUnaryOp IINC -1 len
   * 14 Weak Mutation 1: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:29 - ReplaceVariable len -> offset
   * 15 Weak Mutation 7: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - ReplaceComparisonOperator != -> <
   * 16 Weak Mutation 8: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - ReplaceComparisonOperator != -> >
   * 17 Weak Mutation 9: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:28 - ReplaceComparisonOperator != -> -1
   * 18 Weak Mutation 10: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:31 - ReplaceVariable len -> offset
   * 19 Weak Mutation 11: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:31 - InsertUnaryOp Negation of len
   * 20 Weak Mutation 12: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:31 - InsertUnaryOp IINC 1 len
   * 21 Weak Mutation 13: com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I:31 - InsertUnaryOp IINC -1 len
   * 22 com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I: I16 Branch 1 IFNE L28 - true
   * 23 com.sleepycat.util.UtfOps.getZeroTerminatedByteLength([BI)I: I16 Branch 1 IFNE L28 - false
   */
  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-1);
      int int0 = UtfOps.getZeroTerminatedByteLength(byteArray0, (int) (byte)0);
      assertEquals(2, int0);
  }

  //Test case number: 2
  /*
   * 236 covered goals:
   * 1 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 8 TABLESWITCH L111 Case 2 - true
   * 2 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 10 TABLESWITCH L111 Case 4 - true
   * 3 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 11 TABLESWITCH L111 Case 5 - true
   * 4 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 12 TABLESWITCH L111 Case 6 - true
   * 5 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 13 TABLESWITCH L111 Case 7 - true
   * 6 Weak Mutation 14: com.sleepycat.util.UtfOps.getByteLength([C)I:43 - ReplaceConstant - 0 -> 1
   * 7 Weak Mutation 15: com.sleepycat.util.UtfOps.getByteLength([C)I:43 - DeleteStatement: getByteLength([CII)I
   * 8 Weak Mutation 63: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceComparisonOperator > -> >=
   * 9 Weak Mutation 68: com.sleepycat.util.UtfOps.getByteLength([CII)I:64 - ReplaceVariable len -> offset
   * 10 Weak Mutation 69: com.sleepycat.util.UtfOps.getByteLength([CII)I:64 - ReplaceVariable len -> i
   * 11 Weak Mutation 64: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceComparisonOperator > -> !=
   * 12 Weak Mutation 66: com.sleepycat.util.UtfOps.getByteLength([CII)I:64 - ReplaceVariable len -> c
   * 13 Weak Mutation 67: com.sleepycat.util.UtfOps.getByteLength([CII)I:64 - ReplaceVariable len -> length
   * 14 Weak Mutation 110: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceComparisonOperator < -> <=
   * 15 Weak Mutation 382: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceComparisonOperator > -> >=
   * 16 Weak Mutation 357: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:220 - ReplaceVariable i -> charOffset
   * 17 Weak Mutation 385: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> charLength
   * 18 Weak Mutation 575: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:273 - ReplaceConstant - 0 -> 1
   * 19 Weak Mutation 574: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:272 - DeleteStatement: getByteLength([C)I
   * 20 Weak Mutation 573: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:271 - DeleteStatement: toCharArray()[C
   * 21 Weak Mutation 569: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:269 - ReplaceComparisonOperator != -> <
   * 22 Weak Mutation 576: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:273 - ReplaceConstant - 0 -> 1
   * 23 Weak Mutation 577: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:273 - DeleteStatement: charsToBytes([CI[BII)V
   * 24 Weak Mutation 14: com.sleepycat.util.UtfOps.getByteLength([C)I:43 - ReplaceConstant - 0 -> 1
   * 25 Weak Mutation 15: com.sleepycat.util.UtfOps.getByteLength([C)I:43 - DeleteStatement: getByteLength([CII)I
   * 26 Weak Mutation 17: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceVariable length -> len
   * 27 Weak Mutation 16: com.sleepycat.util.UtfOps.getByteLength([CII)I:59 - ReplaceConstant - 0 -> 1
   * 28 Weak Mutation 19: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - InsertUnaryOp Negation of length
   * 29 Weak Mutation 18: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceVariable length -> offset
   * 30 Weak Mutation 21: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - InsertUnaryOp IINC -1 length
   * 31 Weak Mutation 20: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - InsertUnaryOp IINC 1 length
   * 32 Weak Mutation 22: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceVariable offset -> length
   * 33 Weak Mutation 25: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - InsertUnaryOp IINC 1 offset
   * 34 Weak Mutation 24: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - InsertUnaryOp Negation of offset
   * 35 Weak Mutation 26: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - InsertUnaryOp IINC -1 offset
   * 36 Weak Mutation 29: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceArithmeticOperator + -> /
   * 37 Weak Mutation 28: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceArithmeticOperator + -> %
   * 38 Weak Mutation 31: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable offset -> length
   * 39 Weak Mutation 34: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp IINC 1 offset
   * 40 Weak Mutation 35: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp IINC -1 offset
   * 41 Weak Mutation 33: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp Negation of offset
   * 42 Weak Mutation 38: com.sleepycat.util.UtfOps.getByteLength([CII)I:62 - ReplaceVariable i -> offset
   * 43 Weak Mutation 39: com.sleepycat.util.UtfOps.getByteLength([CII)I:62 - InsertUnaryOp Negation of i
   * 44 Weak Mutation 36: com.sleepycat.util.UtfOps.getByteLength([CII)I:62 - ReplaceVariable i -> length
   * 45 Weak Mutation 42: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> length
   * 46 Weak Mutation 43: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> len
   * 47 Weak Mutation 40: com.sleepycat.util.UtfOps.getByteLength([CII)I:62 - InsertUnaryOp IINC 1 i
   * 48 Weak Mutation 41: com.sleepycat.util.UtfOps.getByteLength([CII)I:62 - InsertUnaryOp IINC -1 i
   * 49 Weak Mutation 46: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - InsertUnaryOp Negation of c
   * 50 Weak Mutation 47: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - InsertUnaryOp IINC 1 c
   * 51 Weak Mutation 44: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> offset
   * 52 Weak Mutation 45: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> i
   * 53 Weak Mutation 51: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> length
   * 54 Weak Mutation 50: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceComparisonOperator < -> >=
   * 55 Weak Mutation 49: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceConstant - 1 -> 0
   * 56 Weak Mutation 48: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - InsertUnaryOp IINC -1 c
   * 57 Weak Mutation 55: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - InsertUnaryOp Negation of c
   * 58 Weak Mutation 54: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> i
   * 59 Weak Mutation 53: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> offset
   * 60 Weak Mutation 52: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> len
   * 61 Weak Mutation 59: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceConstant - 127 -> 1
   * 62 Weak Mutation 58: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceConstant - 127 -> 0
   * 63 Weak Mutation 57: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - InsertUnaryOp IINC -1 c
   * 64 Weak Mutation 56: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - InsertUnaryOp IINC 1 c
   * 65 Weak Mutation 63: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceComparisonOperator > -> >=
   * 66 Weak Mutation 62: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceConstant - 127 -> 128
   * 67 Weak Mutation 61: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceConstant - 127 -> 126
   * 68 Weak Mutation 60: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceConstant - 127 -> -1
   * 69 Weak Mutation 68: com.sleepycat.util.UtfOps.getByteLength([CII)I:64 - ReplaceVariable len -> offset
   * 70 Weak Mutation 69: com.sleepycat.util.UtfOps.getByteLength([CII)I:64 - ReplaceVariable len -> i
   * 71 Weak Mutation 64: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceComparisonOperator > -> !=
   * 72 Weak Mutation 66: com.sleepycat.util.UtfOps.getByteLength([CII)I:64 - ReplaceVariable len -> c
   * 73 Weak Mutation 67: com.sleepycat.util.UtfOps.getByteLength([CII)I:64 - ReplaceVariable len -> length
   * 74 Weak Mutation 93: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable i -> length
   * 75 Weak Mutation 95: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable i -> offset
   * 76 Weak Mutation 94: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable i -> len
   * 77 Weak Mutation 102: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable length -> len
   * 78 Weak Mutation 103: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable length -> offset
   * 79 Weak Mutation 100: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp IINC 1 i
   * 80 Weak Mutation 101: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp IINC -1 i
   * 81 Weak Mutation 98: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable i -> offset
   * 82 Weak Mutation 99: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp Negation of i
   * 83 Weak Mutation 96: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable i -> length
   * 84 Weak Mutation 110: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceComparisonOperator < -> <=
   * 85 Weak Mutation 109: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceComparisonOperator < -> -2
   * 86 Weak Mutation 106: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp IINC 1 length
   * 87 Weak Mutation 107: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp IINC -1 length
   * 88 Weak Mutation 104: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable length -> i
   * 89 Weak Mutation 105: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp Negation of length
   * 90 Weak Mutation 119: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceVariable length -> offset
   * 91 Weak Mutation 118: com.sleepycat.util.UtfOps.getCharLength([BII)I:108 - ReplaceConstant - 0 -> 1
   * 92 Weak Mutation 117: com.sleepycat.util.UtfOps.getCharLength([B)I:88 - DeleteStatement: getCharLength([BII)I
   * 93 Weak Mutation 116: com.sleepycat.util.UtfOps.getCharLength([B)I:88 - ReplaceConstant - 0 -> 1
   * 94 Weak Mutation 115: com.sleepycat.util.UtfOps.getByteLength([CII)I:71 - InsertUnaryOp IINC -1 len
   * 95 Weak Mutation 114: com.sleepycat.util.UtfOps.getByteLength([CII)I:71 - InsertUnaryOp IINC 1 len
   * 96 Weak Mutation 113: com.sleepycat.util.UtfOps.getByteLength([CII)I:71 - InsertUnaryOp Negation of len
   * 97 Weak Mutation 112: com.sleepycat.util.UtfOps.getByteLength([CII)I:71 - ReplaceVariable len -> offset
   * 98 Weak Mutation 126: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - InsertUnaryOp IINC -1 offset
   * 99 Weak Mutation 125: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - InsertUnaryOp IINC 1 offset
   * 100 Weak Mutation 124: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - InsertUnaryOp Negation of offset
   * 101 Weak Mutation 122: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceVariable offset -> length
   * 102 Weak Mutation 121: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - InsertUnaryOp Negation of length
   * 103 Weak Mutation 120: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceVariable length -> charCount
   * 104 Weak Mutation 137: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 255 -> 1
   * 105 Weak Mutation 136: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 255 -> 0
   * 106 Weak Mutation 139: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 255 -> 254
   * 107 Weak Mutation 138: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 255 -> -1
   * 108 Weak Mutation 141: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceBitwiseOperator & -> |
   * 109 Weak Mutation 140: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 255 -> 256
   * 110 Weak Mutation 143: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 4 -> 0
   * 111 Weak Mutation 142: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceBitwiseOperator & -> ^
   * 112 Weak Mutation 129: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceArithmeticOperator + -> /
   * 113 Weak Mutation 128: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceArithmeticOperator + -> %
   * 114 Weak Mutation 131: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceVariable offset -> length
   * 115 Weak Mutation 133: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - InsertUnaryOp Negation of offset
   * 116 Weak Mutation 135: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - InsertUnaryOp IINC -1 offset
   * 117 Weak Mutation 134: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - InsertUnaryOp IINC 1 offset
   * 118 Weak Mutation 156: com.sleepycat.util.UtfOps.getCharLength([BII)I:132 - ReplaceVariable charCount -> length
   * 119 Weak Mutation 157: com.sleepycat.util.UtfOps.getCharLength([BII)I:132 - ReplaceVariable charCount -> offset
   * 120 Weak Mutation 158: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceVariable offset -> length
   * 121 Weak Mutation 144: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 4 -> 1
   * 122 Weak Mutation 145: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 4 -> -1
   * 123 Weak Mutation 146: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 4 -> 3
   * 124 Weak Mutation 147: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 4 -> 5
   * 125 Weak Mutation 149: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceBitwiseOperator >> -> <<
   * 126 Weak Mutation 150: com.sleepycat.util.UtfOps.getCharLength([BII)I:120 - ReplaceVariable offset -> length
   * 127 Weak Mutation 151: com.sleepycat.util.UtfOps.getCharLength([BII)I:120 - ReplaceVariable offset -> charCount
   * 128 Weak Mutation 170: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceComparisonOperator < -> <=
   * 129 Weak Mutation 169: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceComparisonOperator < -> -2
   * 130 Weak Mutation 175: com.sleepycat.util.UtfOps.getCharLength([BII)I:134 - InsertUnaryOp IINC -1 charCount
   * 131 Weak Mutation 174: com.sleepycat.util.UtfOps.getCharLength([BII)I:134 - InsertUnaryOp IINC 1 charCount
   * 132 Weak Mutation 173: com.sleepycat.util.UtfOps.getCharLength([BII)I:134 - InsertUnaryOp Negation of charCount
   * 133 Weak Mutation 163: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceVariable length -> offset
   * 134 Weak Mutation 162: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - InsertUnaryOp IINC -1 offset
   * 135 Weak Mutation 161: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - InsertUnaryOp IINC 1 offset
   * 136 Weak Mutation 160: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - InsertUnaryOp Negation of offset
   * 137 Weak Mutation 167: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - InsertUnaryOp IINC -1 length
   * 138 Weak Mutation 166: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - InsertUnaryOp IINC 1 length
   * 139 Weak Mutation 165: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - InsertUnaryOp Negation of length
   * 140 Weak Mutation 164: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceVariable length -> charCount
   * 141 Weak Mutation 343: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - InsertUnaryOp Negation of charOffset
   * 142 Weak Mutation 342: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceVariable charOffset -> charLength
   * 143 Weak Mutation 340: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - InsertUnaryOp IINC -1 charLength
   * 144 Weak Mutation 339: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - InsertUnaryOp IINC 1 charLength
   * 145 Weak Mutation 338: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - InsertUnaryOp Negation of charLength
   * 146 Weak Mutation 337: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceVariable charLength -> charOffset
   * 147 Weak Mutation 336: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceVariable charLength -> byteOffset
   * 148 Weak Mutation 351: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:219 - ReplaceVariable charOffset -> charLength
   * 149 Weak Mutation 348: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceArithmeticOperator + -> /
   * 150 Weak Mutation 347: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceArithmeticOperator + -> %
   * 151 Weak Mutation 345: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - InsertUnaryOp IINC -1 charOffset
   * 152 Weak Mutation 344: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - InsertUnaryOp IINC 1 charOffset
   * 153 Weak Mutation 373: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> i
   * 154 Weak Mutation 372: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> charOffset
   * 155 Weak Mutation 375: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - InsertUnaryOp IINC 1 c
   * 156 Weak Mutation 374: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - InsertUnaryOp Negation of c
   * 157 Weak Mutation 369: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceComparisonOperator < -> >=
   * 158 Weak Mutation 368: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceConstant - 1 -> 0
   * 159 Weak Mutation 371: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> charLength
   * 160 Weak Mutation 370: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> byteOffset
   * 161 Weak Mutation 381: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceConstant - 127 -> 128
   * 162 Weak Mutation 380: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceConstant - 127 -> 126
   * 163 Weak Mutation 383: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceComparisonOperator > -> !=
   * 164 Weak Mutation 382: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceComparisonOperator > -> >=
   * 165 Weak Mutation 377: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceConstant - 127 -> 0
   * 166 Weak Mutation 376: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - InsertUnaryOp IINC -1 c
   * 167 Weak Mutation 379: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceConstant - 127 -> -1
   * 168 Weak Mutation 378: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceConstant - 127 -> 1
   * 169 Weak Mutation 356: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:220 - ReplaceVariable i -> charLength
   * 170 Weak Mutation 357: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:220 - ReplaceVariable i -> charOffset
   * 171 Weak Mutation 358: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:220 - InsertUnaryOp Negation of i
   * 172 Weak Mutation 359: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:220 - InsertUnaryOp IINC 1 i
   * 173 Weak Mutation 352: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:219 - InsertUnaryOp Negation of charOffset
   * 174 Weak Mutation 353: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:219 - InsertUnaryOp IINC 1 charOffset
   * 175 Weak Mutation 354: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:219 - InsertUnaryOp IINC -1 charOffset
   * 176 Weak Mutation 364: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> i
   * 177 Weak Mutation 365: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - InsertUnaryOp Negation of c
   * 178 Weak Mutation 366: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - InsertUnaryOp IINC 1 c
   * 179 Weak Mutation 367: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - InsertUnaryOp IINC -1 c
   * 180 Weak Mutation 360: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:220 - InsertUnaryOp IINC -1 i
   * 181 Weak Mutation 361: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> byteOffset
   * 182 Weak Mutation 362: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> charLength
   * 183 Weak Mutation 363: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> charOffset
   * 184 Weak Mutation 402: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - InsertUnaryOp IINC -1 c
   * 185 Weak Mutation 400: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - InsertUnaryOp Negation of c
   * 186 Weak Mutation 401: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - InsertUnaryOp IINC 1 c
   * 187 Weak Mutation 395: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> i
   * 188 Weak Mutation 394: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> charOffset
   * 189 Weak Mutation 393: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> c
   * 190 Weak Mutation 392: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> charLength
   * 191 Weak Mutation 399: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable c -> i
   * 192 Weak Mutation 398: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable c -> charOffset
   * 193 Weak Mutation 397: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable c -> charLength
   * 194 Weak Mutation 396: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable c -> byteOffset
   * 195 Weak Mutation 387: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> charOffset
   * 196 Weak Mutation 386: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> c
   * 197 Weak Mutation 385: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> charLength
   * 198 Weak Mutation 391: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - InsertUnaryOp IINC -1 byteOffset
   * 199 Weak Mutation 390: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - InsertUnaryOp IINC 1 byteOffset
   * 200 Weak Mutation 389: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - InsertUnaryOp Negation of byteOffset
   * 201 Weak Mutation 575: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:273 - ReplaceConstant - 0 -> 1
   * 202 Weak Mutation 574: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:272 - DeleteStatement: getByteLength([C)I
   * 203 Weak Mutation 573: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:271 - DeleteStatement: toCharArray()[C
   * 204 Weak Mutation 569: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:269 - ReplaceComparisonOperator != -> <
   * 205 Weak Mutation 568: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:269 - DeleteStatement: length()I
   * 206 Weak Mutation 576: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:273 - ReplaceConstant - 0 -> 1
   * 207 Weak Mutation 577: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:273 - DeleteStatement: charsToBytes([CI[BII)V
   * 208 com.sleepycat.util.UtfOps.getCharLength([B)I: root-Branch
   * 209 com.sleepycat.util.UtfOps.getByteLength([C)I: root-Branch
   * 210 com.sleepycat.util.UtfOps.getByteLength([CII)I: I26 Branch 2 IF_ICMPLT L63 - false
   * 211 com.sleepycat.util.UtfOps.getByteLength([CII)I: I29 Branch 3 IF_ICMPGT L63 - false
   * 212 com.sleepycat.util.UtfOps.getByteLength([CII)I: I55 Branch 5 IF_ICMPLT L61 - true
   * 213 com.sleepycat.util.UtfOps.getByteLength([CII)I: I55 Branch 5 IF_ICMPLT L61 - false
   * 214 com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V: I22 Branch 45 IF_ICMPLT L221 - false
   * 215 com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V: I25 Branch 46 IF_ICMPGT L221 - false
   * 216 com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V: I120 Branch 48 IF_ICMPLT L219 - true
   * 217 com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V: I120 Branch 48 IF_ICMPLT L219 - false
   * 218 com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B: I4 Branch 50 IFNE L269 - true
   * 219 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 6 TABLESWITCH L111 Case 0 - false
   * 220 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 7 TABLESWITCH L111 Case 1 - false
   * 221 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 8 TABLESWITCH L111 Case 2 - false
   * 222 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 9 TABLESWITCH L111 Case 3 - false
   * 223 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 10 TABLESWITCH L111 Case 4 - false
   * 224 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 11 TABLESWITCH L111 Case 5 - false
   * 225 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 12 TABLESWITCH L111 Case 6 - false
   * 226 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 13 TABLESWITCH L111 Case 7 - false
   * 227 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 14 TABLESWITCH L111 Case 8 - false
   * 228 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 15 TABLESWITCH L111 Case 9 - false
   * 229 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 16 TABLESWITCH L111 Case 10 - false
   * 230 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 17 TABLESWITCH L111 Case 11 - false
   * 231 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 18 TABLESWITCH L111 Case 12 - false
   * 232 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 19 TABLESWITCH L111 Case 13 - false
   * 233 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 20 TABLESWITCH L111 Case 14 - false
   * 234 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 21 TABLESWITCH L111 Default-Case - false
   * 235 com.sleepycat.util.UtfOps.getCharLength([BII)I: I54 Branch 22 IF_ICMPLT L110 - true
   * 236 com.sleepycat.util.UtfOps.getCharLength([BII)I: I54 Branch 22 IF_ICMPLT L110 - false
   */
  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = UtfOps.stringToBytes("i'$TFuJP");
      assertNotNull(byteArray0);
      
      int int0 = UtfOps.getCharLength(byteArray0);
      assertEquals(9, int0);
  }

  //Test case number: 3
  /*
   * 18 covered goals:
   * 1 Weak Mutation 23: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceVariable offset -> len
   * 2 Weak Mutation 27: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceArithmeticOperator + -> -
   * 3 Weak Mutation 30: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceArithmeticOperator + -> *
   * 4 Weak Mutation 32: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable offset -> len
   * 5 Weak Mutation 97: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable i -> len
   * 6 Weak Mutation 108: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceComparisonOperator < -> !=
   * 7 Weak Mutation 111: com.sleepycat.util.UtfOps.getByteLength([CII)I:71 - ReplaceVariable len -> length
   * 8 Weak Mutation 115: com.sleepycat.util.UtfOps.getByteLength([CII)I:71 - InsertUnaryOp IINC -1 len
   * 9 Weak Mutation 114: com.sleepycat.util.UtfOps.getByteLength([CII)I:71 - InsertUnaryOp IINC 1 len
   * 10 Weak Mutation 113: com.sleepycat.util.UtfOps.getByteLength([CII)I:71 - InsertUnaryOp Negation of len
   * 11 Weak Mutation 112: com.sleepycat.util.UtfOps.getByteLength([CII)I:71 - ReplaceVariable len -> offset
   * 12 Weak Mutation 23: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceVariable offset -> len
   * 13 Weak Mutation 27: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceArithmeticOperator + -> -
   * 14 Weak Mutation 30: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceArithmeticOperator + -> *
   * 15 Weak Mutation 32: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable offset -> len
   * 16 Weak Mutation 97: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable i -> len
   * 17 Weak Mutation 111: com.sleepycat.util.UtfOps.getByteLength([CII)I:71 - ReplaceVariable len -> length
   * 18 Weak Mutation 108: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceComparisonOperator < -> !=
   */
  @Test
  public void test3()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = UtfOps.getByteLength(charArray0, (int) 'J', (-1));
      assertEquals(0, int0);
  }

  //Test case number: 4
  /*
   * 99 covered goals:
   * 1 Weak Mutation 65: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceComparisonOperator > -> -2
   * 2 Weak Mutation 72: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceVariable c -> offset
   * 3 com.sleepycat.util.UtfOps.getByteLength([CII)I: I29 Branch 3 IF_ICMPGT L63 - true
   * 4 Weak Mutation 17: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceVariable length -> len
   * 5 Weak Mutation 16: com.sleepycat.util.UtfOps.getByteLength([CII)I:59 - ReplaceConstant - 0 -> 1
   * 6 Weak Mutation 19: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - InsertUnaryOp Negation of length
   * 7 Weak Mutation 18: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceVariable length -> offset
   * 8 Weak Mutation 21: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - InsertUnaryOp IINC -1 length
   * 9 Weak Mutation 20: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - InsertUnaryOp IINC 1 length
   * 10 Weak Mutation 22: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceVariable offset -> length
   * 11 Weak Mutation 25: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - InsertUnaryOp IINC 1 offset
   * 12 Weak Mutation 24: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - InsertUnaryOp Negation of offset
   * 13 Weak Mutation 26: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - InsertUnaryOp IINC -1 offset
   * 14 Weak Mutation 29: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceArithmeticOperator + -> /
   * 15 Weak Mutation 28: com.sleepycat.util.UtfOps.getByteLength([CII)I:60 - ReplaceArithmeticOperator + -> %
   * 16 Weak Mutation 31: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable offset -> length
   * 17 Weak Mutation 34: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp IINC 1 offset
   * 18 Weak Mutation 35: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp IINC -1 offset
   * 19 Weak Mutation 33: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp Negation of offset
   * 20 Weak Mutation 38: com.sleepycat.util.UtfOps.getByteLength([CII)I:62 - ReplaceVariable i -> offset
   * 21 Weak Mutation 39: com.sleepycat.util.UtfOps.getByteLength([CII)I:62 - InsertUnaryOp Negation of i
   * 22 Weak Mutation 36: com.sleepycat.util.UtfOps.getByteLength([CII)I:62 - ReplaceVariable i -> length
   * 23 Weak Mutation 37: com.sleepycat.util.UtfOps.getByteLength([CII)I:62 - ReplaceVariable i -> len
   * 24 Weak Mutation 42: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> length
   * 25 Weak Mutation 43: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> len
   * 26 Weak Mutation 40: com.sleepycat.util.UtfOps.getByteLength([CII)I:62 - InsertUnaryOp IINC 1 i
   * 27 Weak Mutation 41: com.sleepycat.util.UtfOps.getByteLength([CII)I:62 - InsertUnaryOp IINC -1 i
   * 28 Weak Mutation 46: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - InsertUnaryOp Negation of c
   * 29 Weak Mutation 47: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - InsertUnaryOp IINC 1 c
   * 30 Weak Mutation 44: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> offset
   * 31 Weak Mutation 45: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> i
   * 32 Weak Mutation 51: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> length
   * 33 Weak Mutation 50: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceComparisonOperator < -> >=
   * 34 Weak Mutation 49: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceConstant - 1 -> 0
   * 35 Weak Mutation 48: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - InsertUnaryOp IINC -1 c
   * 36 Weak Mutation 55: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - InsertUnaryOp Negation of c
   * 37 Weak Mutation 54: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> i
   * 38 Weak Mutation 53: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> offset
   * 39 Weak Mutation 52: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceVariable c -> len
   * 40 Weak Mutation 59: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceConstant - 127 -> 1
   * 41 Weak Mutation 58: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceConstant - 127 -> 0
   * 42 Weak Mutation 57: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - InsertUnaryOp IINC -1 c
   * 43 Weak Mutation 56: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - InsertUnaryOp IINC 1 c
   * 44 Weak Mutation 62: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceConstant - 127 -> 128
   * 45 Weak Mutation 61: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceConstant - 127 -> 126
   * 46 Weak Mutation 60: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceConstant - 127 -> -1
   * 47 Weak Mutation 70: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceVariable c -> length
   * 48 Weak Mutation 71: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceVariable c -> len
   * 49 Weak Mutation 76: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - InsertUnaryOp IINC -1 c
   * 50 Weak Mutation 77: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceConstant - 2047 -> 0
   * 51 Weak Mutation 78: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceConstant - 2047 -> 1
   * 52 Weak Mutation 79: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceConstant - 2047 -> -1
   * 53 Weak Mutation 73: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceVariable c -> i
   * 54 Weak Mutation 74: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - InsertUnaryOp Negation of c
   * 55 Weak Mutation 75: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - InsertUnaryOp IINC 1 c
   * 56 Weak Mutation 81: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceConstant - 2047 -> 2048
   * 57 Weak Mutation 80: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceConstant - 2047 -> 2046
   * 58 Weak Mutation 82: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceComparisonOperator <= -> ==
   * 59 Weak Mutation 93: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable i -> length
   * 60 Weak Mutation 92: com.sleepycat.util.UtfOps.getByteLength([CII)I:68 - ReplaceVariable len -> i
   * 61 Weak Mutation 95: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable i -> offset
   * 62 Weak Mutation 94: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable i -> len
   * 63 Weak Mutation 89: com.sleepycat.util.UtfOps.getByteLength([CII)I:68 - ReplaceVariable len -> c
   * 64 Weak Mutation 91: com.sleepycat.util.UtfOps.getByteLength([CII)I:68 - ReplaceVariable len -> offset
   * 65 Weak Mutation 90: com.sleepycat.util.UtfOps.getByteLength([CII)I:68 - ReplaceVariable len -> length
   * 66 Weak Mutation 102: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable length -> len
   * 67 Weak Mutation 103: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable length -> offset
   * 68 Weak Mutation 100: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp IINC 1 i
   * 69 Weak Mutation 101: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp IINC -1 i
   * 70 Weak Mutation 98: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable i -> offset
   * 71 Weak Mutation 99: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp Negation of i
   * 72 Weak Mutation 96: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable i -> length
   * 73 Weak Mutation 97: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable i -> len
   * 74 Weak Mutation 109: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceComparisonOperator < -> -2
   * 75 Weak Mutation 106: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp IINC 1 length
   * 76 Weak Mutation 107: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp IINC -1 length
   * 77 Weak Mutation 104: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - ReplaceVariable length -> i
   * 78 Weak Mutation 105: com.sleepycat.util.UtfOps.getByteLength([CII)I:61 - InsertUnaryOp Negation of length
   * 79 Weak Mutation 37: com.sleepycat.util.UtfOps.getByteLength([CII)I:62 - ReplaceVariable i -> len
   * 80 Weak Mutation 70: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceVariable c -> length
   * 81 Weak Mutation 71: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceVariable c -> len
   * 82 Weak Mutation 65: com.sleepycat.util.UtfOps.getByteLength([CII)I:63 - ReplaceComparisonOperator > -> -2
   * 83 Weak Mutation 76: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - InsertUnaryOp IINC -1 c
   * 84 Weak Mutation 77: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceConstant - 2047 -> 0
   * 85 Weak Mutation 78: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceConstant - 2047 -> 1
   * 86 Weak Mutation 79: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceConstant - 2047 -> -1
   * 87 Weak Mutation 72: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceVariable c -> offset
   * 88 Weak Mutation 73: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceVariable c -> i
   * 89 Weak Mutation 74: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - InsertUnaryOp Negation of c
   * 90 Weak Mutation 75: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - InsertUnaryOp IINC 1 c
   * 91 Weak Mutation 81: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceConstant - 2047 -> 2048
   * 92 Weak Mutation 80: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceConstant - 2047 -> 2046
   * 93 Weak Mutation 82: com.sleepycat.util.UtfOps.getByteLength([CII)I:65 - ReplaceComparisonOperator <= -> ==
   * 94 Weak Mutation 92: com.sleepycat.util.UtfOps.getByteLength([CII)I:68 - ReplaceVariable len -> i
   * 95 Weak Mutation 89: com.sleepycat.util.UtfOps.getByteLength([CII)I:68 - ReplaceVariable len -> c
   * 96 Weak Mutation 91: com.sleepycat.util.UtfOps.getByteLength([CII)I:68 - ReplaceVariable len -> offset
   * 97 Weak Mutation 90: com.sleepycat.util.UtfOps.getByteLength([CII)I:68 - ReplaceVariable len -> length
   * 98 com.sleepycat.util.UtfOps.getByteLength([CII)I: I26 Branch 2 IF_ICMPLT L63 - true
   * 99 com.sleepycat.util.UtfOps.getByteLength([CII)I: I39 Branch 4 IF_ICMPLE L65 - true
   */
  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[4] = '\u0094';
      // Undeclared exception!
      try {
        UtfOps.getByteLength(charArray0, 0, (int) 'G');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  //Test case number: 5
  /*
   * 108 covered goals:
   * 1 Weak Mutation 127: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceArithmeticOperator + -> -
   * 2 Weak Mutation 123: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceVariable offset -> charCount
   * 3 Weak Mutation 130: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceArithmeticOperator + -> *
   * 4 Weak Mutation 159: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceVariable offset -> charCount
   * 5 Weak Mutation 168: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceComparisonOperator < -> !=
   * 6 Weak Mutation 171: com.sleepycat.util.UtfOps.getCharLength([BII)I:134 - ReplaceVariable charCount -> length
   * 7 Weak Mutation 172: com.sleepycat.util.UtfOps.getCharLength([BII)I:134 - ReplaceVariable charCount -> offset
   * 8 Weak Mutation 187: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp Negation of byteOffset
   * 9 Weak Mutation 184: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceComparisonOperator == -> !=
   * 10 Weak Mutation 185: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable byteOffset -> charOffset
   * 11 Weak Mutation 188: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC 1 byteOffset
   * 12 Weak Mutation 189: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC -1 byteOffset
   * 13 Weak Mutation 178: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp Negation of len
   * 14 Weak Mutation 179: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC 1 len
   * 15 Weak Mutation 177: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable len -> charOffset
   * 16 Weak Mutation 182: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC 1 isByteLen
   * 17 Weak Mutation 183: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC -1 isByteLen
   * 18 Weak Mutation 180: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC -1 len
   * 19 Weak Mutation 181: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp Negation of isByteLen
   * 20 Weak Mutation 197: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceArithmeticOperator + -> /
   * 21 Weak Mutation 196: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceArithmeticOperator + -> %
   * 22 Weak Mutation 198: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceArithmeticOperator + -> *
   * 23 Weak Mutation 195: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceArithmeticOperator + -> -
   * 24 Weak Mutation 533: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - InsertUnaryOp IINC 1 length
   * 25 Weak Mutation 532: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - InsertUnaryOp Negation of length
   * 26 Weak Mutation 534: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - InsertUnaryOp IINC -1 length
   * 27 Weak Mutation 536: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - ReplaceComparisonOperator != -> >
   * 28 Weak Mutation 546: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp IINC -1 length
   * 29 Weak Mutation 547: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - DeleteStatement: getCharLength([BII)I
   * 30 Weak Mutation 544: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp Negation of length
   * 31 Weak Mutation 545: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp IINC 1 length
   * 32 Weak Mutation 541: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp IINC 1 offset
   * 33 Weak Mutation 540: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp Negation of offset
   * 34 Weak Mutation 542: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp IINC -1 offset
   * 35 Weak Mutation 550: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:256 - InsertUnaryOp Negation of charLen
   * 36 Weak Mutation 551: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:256 - InsertUnaryOp IINC 1 charLen
   * 37 Weak Mutation 548: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:256 - ReplaceVariable charLen -> length
   * 38 Weak Mutation 549: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:256 - ReplaceVariable charLen -> offset
   * 39 Weak Mutation 552: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:256 - InsertUnaryOp IINC -1 charLen
   * 40 Weak Mutation 558: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceConstant - 0 -> 1
   * 41 Weak Mutation 559: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceVariable length -> charLen
   * 42 Weak Mutation 556: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - InsertUnaryOp IINC 1 offset
   * 43 Weak Mutation 557: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - InsertUnaryOp IINC -1 offset
   * 44 Weak Mutation 555: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - InsertUnaryOp Negation of offset
   * 45 Weak Mutation 553: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceVariable offset -> charLen
   * 46 Weak Mutation 563: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - DeleteStatement: bytesToChars([BI[CIIZ)I
   * 47 Weak Mutation 562: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceConstant - 1 -> 0
   * 48 Weak Mutation 561: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - InsertUnaryOp Negation of length
   * 49 Weak Mutation 567: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:258 - InsertUnaryOp Negation of charLen
   * 50 Weak Mutation 566: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:258 - ReplaceVariable charLen -> offset
   * 51 Weak Mutation 565: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:258 - ReplaceVariable charLen -> length
   * 52 Weak Mutation 564: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:258 - ReplaceConstant - 0 -> 1
   * 53 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I4 Branch 23 IFEQ L164 - false
   * 54 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I154 Branch 43 IFEQ L165 - false
   * 55 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I161 Branch 44 IF_ICMPLT L165 - false
   * 56 com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;: I3 Branch 49 IFNE L253 - true
   * 57 Weak Mutation 127: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceArithmeticOperator + -> -
   * 58 Weak Mutation 123: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceVariable offset -> charCount
   * 59 Weak Mutation 130: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceArithmeticOperator + -> *
   * 60 Weak Mutation 159: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceVariable offset -> charCount
   * 61 Weak Mutation 171: com.sleepycat.util.UtfOps.getCharLength([BII)I:134 - ReplaceVariable charCount -> length
   * 62 Weak Mutation 168: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceComparisonOperator < -> !=
   * 63 Weak Mutation 172: com.sleepycat.util.UtfOps.getCharLength([BII)I:134 - ReplaceVariable charCount -> offset
   * 64 Weak Mutation 187: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp Negation of byteOffset
   * 65 Weak Mutation 184: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceComparisonOperator == -> !=
   * 66 Weak Mutation 185: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable byteOffset -> charOffset
   * 67 Weak Mutation 188: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC 1 byteOffset
   * 68 Weak Mutation 189: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC -1 byteOffset
   * 69 Weak Mutation 178: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp Negation of len
   * 70 Weak Mutation 179: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC 1 len
   * 71 Weak Mutation 177: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable len -> charOffset
   * 72 Weak Mutation 182: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC 1 isByteLen
   * 73 Weak Mutation 183: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC -1 isByteLen
   * 74 Weak Mutation 180: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC -1 len
   * 75 Weak Mutation 181: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp Negation of isByteLen
   * 76 Weak Mutation 197: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceArithmeticOperator + -> /
   * 77 Weak Mutation 196: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceArithmeticOperator + -> %
   * 78 Weak Mutation 198: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceArithmeticOperator + -> *
   * 79 Weak Mutation 195: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceArithmeticOperator + -> -
   * 80 Weak Mutation 550: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:256 - InsertUnaryOp Negation of charLen
   * 81 Weak Mutation 551: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:256 - InsertUnaryOp IINC 1 charLen
   * 82 Weak Mutation 548: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:256 - ReplaceVariable charLen -> length
   * 83 Weak Mutation 549: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:256 - ReplaceVariable charLen -> offset
   * 84 Weak Mutation 546: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp IINC -1 length
   * 85 Weak Mutation 547: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - DeleteStatement: getCharLength([BII)I
   * 86 Weak Mutation 544: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp Negation of length
   * 87 Weak Mutation 545: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp IINC 1 length
   * 88 Weak Mutation 558: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceConstant - 0 -> 1
   * 89 Weak Mutation 559: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceVariable length -> charLen
   * 90 Weak Mutation 556: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - InsertUnaryOp IINC 1 offset
   * 91 Weak Mutation 557: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - InsertUnaryOp IINC -1 offset
   * 92 Weak Mutation 555: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - InsertUnaryOp Negation of offset
   * 93 Weak Mutation 552: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:256 - InsertUnaryOp IINC -1 charLen
   * 94 Weak Mutation 553: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceVariable offset -> charLen
   * 95 Weak Mutation 567: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:258 - InsertUnaryOp Negation of charLen
   * 96 Weak Mutation 566: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:258 - ReplaceVariable charLen -> offset
   * 97 Weak Mutation 565: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:258 - ReplaceVariable charLen -> length
   * 98 Weak Mutation 564: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:258 - ReplaceConstant - 0 -> 1
   * 99 Weak Mutation 563: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - DeleteStatement: bytesToChars([BI[CIIZ)I
   * 100 Weak Mutation 562: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceConstant - 1 -> 0
   * 101 Weak Mutation 561: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - InsertUnaryOp Negation of length
   * 102 Weak Mutation 533: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - InsertUnaryOp IINC 1 length
   * 103 Weak Mutation 532: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - InsertUnaryOp Negation of length
   * 104 Weak Mutation 534: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - InsertUnaryOp IINC -1 length
   * 105 Weak Mutation 541: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp IINC 1 offset
   * 106 Weak Mutation 540: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp Negation of offset
   * 107 Weak Mutation 542: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp IINC -1 offset
   * 108 Weak Mutation 536: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - ReplaceComparisonOperator != -> >
   */
  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = UtfOps.bytesToString(byteArray0, (int) (byte) (-81), (int) (byte) (-81));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  //Test case number: 6
  /*
   * 8 covered goals:
   * 1 Weak Mutation 149: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceBitwiseOperator >> -> <<
   * 2 Weak Mutation 154: com.sleepycat.util.UtfOps.getCharLength([BII)I:127 - ReplaceVariable offset -> length
   * 3 Weak Mutation 155: com.sleepycat.util.UtfOps.getCharLength([BII)I:127 - ReplaceVariable offset -> charCount
   * 4 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 6 TABLESWITCH L111 Case 0 - false
   * 5 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 20 TABLESWITCH L111 Case 14 - true
   * 6 Weak Mutation 168: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceComparisonOperator < -> !=
   * 7 Weak Mutation 154: com.sleepycat.util.UtfOps.getCharLength([BII)I:127 - ReplaceVariable offset -> length
   * 8 Weak Mutation 155: com.sleepycat.util.UtfOps.getCharLength([BII)I:127 - ReplaceVariable offset -> charCount
   */
  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-21);
      int int0 = UtfOps.getCharLength(byteArray0);
      assertEquals(1, int0);
  }

  //Test case number: 7
  /*
   * 191 covered goals:
   * 1 Weak Mutation 152: com.sleepycat.util.UtfOps.getCharLength([BII)I:124 - ReplaceVariable offset -> length
   * 2 Weak Mutation 153: com.sleepycat.util.UtfOps.getCharLength([BII)I:124 - ReplaceVariable offset -> charCount
   * 3 Weak Mutation 186: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable byteOffset -> len
   * 4 Weak Mutation 176: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable len -> byteOffset
   * 5 Weak Mutation 205: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceVariable byteOffset -> len
   * 6 Weak Mutation 204: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceVariable byteOffset -> charOffset
   * 7 Weak Mutation 207: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceConstant - 255 -> 1
   * 8 Weak Mutation 206: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceConstant - 255 -> 0
   * 9 Weak Mutation 201: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - InsertUnaryOp Negation of byteOffset
   * 10 Weak Mutation 200: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceVariable byteOffset -> len
   * 11 Weak Mutation 203: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - InsertUnaryOp IINC -1 byteOffset
   * 12 Weak Mutation 202: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - InsertUnaryOp IINC 1 byteOffset
   * 13 Weak Mutation 199: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceVariable byteOffset -> charOffset
   * 14 Weak Mutation 212: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceBitwiseOperator & -> ^
   * 15 Weak Mutation 208: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceConstant - 255 -> -1
   * 16 Weak Mutation 209: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceConstant - 255 -> 254
   * 17 Weak Mutation 210: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceConstant - 255 -> 256
   * 18 Weak Mutation 211: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceBitwiseOperator & -> |
   * 19 Weak Mutation 220: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 255 -> 1
   * 20 Weak Mutation 221: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 255 -> -1
   * 21 Weak Mutation 222: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 255 -> 254
   * 22 Weak Mutation 223: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 255 -> 256
   * 23 Weak Mutation 216: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - InsertUnaryOp Negation of char1
   * 24 Weak Mutation 217: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - InsertUnaryOp IINC 1 char1
   * 25 Weak Mutation 218: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - InsertUnaryOp IINC -1 char1
   * 26 Weak Mutation 219: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 255 -> 0
   * 27 Weak Mutation 213: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceVariable char1 -> byteOffset
   * 28 Weak Mutation 214: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceVariable char1 -> charOffset
   * 29 Weak Mutation 215: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceVariable char1 -> len
   * 30 Weak Mutation 232: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceBitwiseOperator >> -> <<
   * 31 Weak Mutation 230: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 4 -> 5
   * 32 Weak Mutation 229: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 4 -> 3
   * 33 Weak Mutation 228: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 4 -> -1
   * 34 Weak Mutation 227: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 4 -> 1
   * 35 Weak Mutation 226: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 4 -> 0
   * 36 Weak Mutation 225: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceBitwiseOperator & -> ^
   * 37 Weak Mutation 224: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceBitwiseOperator & -> |
   * 38 Weak Mutation 239: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> byteOffset
   * 39 Weak Mutation 238: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp IINC -1 charOffset
   * 40 Weak Mutation 237: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp IINC 1 charOffset
   * 41 Weak Mutation 236: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp Negation of charOffset
   * 42 Weak Mutation 235: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> len
   * 43 Weak Mutation 233: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> byteOffset
   * 44 Weak Mutation 246: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp IINC 1 char1
   * 45 Weak Mutation 247: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp IINC -1 char1
   * 46 Weak Mutation 244: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable char1 -> len
   * 47 Weak Mutation 245: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp Negation of char1
   * 48 Weak Mutation 242: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable char1 -> byteOffset
   * 49 Weak Mutation 243: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable char1 -> charOffset
   * 50 Weak Mutation 240: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> char1
   * 51 Weak Mutation 241: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> len
   * 52 Weak Mutation 254: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> charOffset
   * 53 Weak Mutation 255: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> char1
   * 54 Weak Mutation 252: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - InsertUnaryOp IINC 1 byteOffset
   * 55 Weak Mutation 253: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - InsertUnaryOp IINC -1 byteOffset
   * 56 Weak Mutation 250: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> len
   * 57 Weak Mutation 251: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - InsertUnaryOp Negation of byteOffset
   * 58 Weak Mutation 248: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> charOffset
   * 59 Weak Mutation 249: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> char1
   * 60 Weak Mutation 256: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> len
   * 61 Weak Mutation 275: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 128 -> 129
   * 62 Weak Mutation 274: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 128 -> 127
   * 63 Weak Mutation 273: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 128 -> -1
   * 64 Weak Mutation 272: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 128 -> 1
   * 65 Weak Mutation 278: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceComparisonOperator == -> <=
   * 66 Weak Mutation 258: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceVariable char2 -> charOffset
   * 67 Weak Mutation 259: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceVariable char2 -> char1
   * 68 Weak Mutation 257: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceVariable char2 -> byteOffset
   * 69 Weak Mutation 262: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - InsertUnaryOp IINC 1 char2
   * 70 Weak Mutation 263: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - InsertUnaryOp IINC -1 char2
   * 71 Weak Mutation 260: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceVariable char2 -> len
   * 72 Weak Mutation 261: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - InsertUnaryOp Negation of char2
   * 73 Weak Mutation 266: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 192 -> -1
   * 74 Weak Mutation 267: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 192 -> 191
   * 75 Weak Mutation 264: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 192 -> 0
   * 76 Weak Mutation 265: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 192 -> 1
   * 77 Weak Mutation 270: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceBitwiseOperator & -> ^
   * 78 Weak Mutation 271: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 128 -> 0
   * 79 Weak Mutation 268: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 192 -> 193
   * 80 Weak Mutation 269: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceBitwiseOperator & -> |
   * 81 Weak Mutation 554: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceVariable offset -> length
   * 82 Weak Mutation 560: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceVariable length -> offset
   * 83 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 19 TABLESWITCH L111 Case 13 - true
   * 84 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I161 Branch 44 IF_ICMPLT L165 - true
   * 85 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 24 TABLESWITCH L167 Case 0 - true
   * 86 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 24 TABLESWITCH L167 Case 0 - false
   * 87 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 25 TABLESWITCH L167 Case 1 - false
   * 88 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 26 TABLESWITCH L167 Case 2 - false
   * 89 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 27 TABLESWITCH L167 Case 3 - false
   * 90 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 28 TABLESWITCH L167 Case 4 - false
   * 91 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 29 TABLESWITCH L167 Case 5 - false
   * 92 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 30 TABLESWITCH L167 Case 6 - false
   * 93 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 31 TABLESWITCH L167 Case 7 - false
   * 94 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 32 TABLESWITCH L167 Case 8 - false
   * 95 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 33 TABLESWITCH L167 Case 9 - false
   * 96 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 34 TABLESWITCH L167 Case 10 - false
   * 97 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 35 TABLESWITCH L167 Case 11 - false
   * 98 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 36 TABLESWITCH L167 Case 12 - false
   * 99 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 37 TABLESWITCH L167 Case 13 - true
   * 100 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 37 TABLESWITCH L167 Case 13 - false
   * 101 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 38 TABLESWITCH L167 Case 14 - false
   * 102 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 39 TABLESWITCH L167 Default-Case - false
   * 103 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I56 Branch 40 IF_ICMPEQ L181 - false
   * 104 Weak Mutation 132: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceVariable offset -> charCount
   * 105 Weak Mutation 152: com.sleepycat.util.UtfOps.getCharLength([BII)I:124 - ReplaceVariable offset -> length
   * 106 Weak Mutation 153: com.sleepycat.util.UtfOps.getCharLength([BII)I:124 - ReplaceVariable offset -> charCount
   * 107 Weak Mutation 186: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable byteOffset -> len
   * 108 Weak Mutation 176: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable len -> byteOffset
   * 109 Weak Mutation 205: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceVariable byteOffset -> len
   * 110 Weak Mutation 204: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceVariable byteOffset -> charOffset
   * 111 Weak Mutation 207: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceConstant - 255 -> 1
   * 112 Weak Mutation 206: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceConstant - 255 -> 0
   * 113 Weak Mutation 201: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - InsertUnaryOp Negation of byteOffset
   * 114 Weak Mutation 200: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceVariable byteOffset -> len
   * 115 Weak Mutation 203: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - InsertUnaryOp IINC -1 byteOffset
   * 116 Weak Mutation 202: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - InsertUnaryOp IINC 1 byteOffset
   * 117 Weak Mutation 199: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceVariable byteOffset -> charOffset
   * 118 Weak Mutation 220: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 255 -> 1
   * 119 Weak Mutation 221: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 255 -> -1
   * 120 Weak Mutation 222: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 255 -> 254
   * 121 Weak Mutation 223: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 255 -> 256
   * 122 Weak Mutation 216: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - InsertUnaryOp Negation of char1
   * 123 Weak Mutation 217: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - InsertUnaryOp IINC 1 char1
   * 124 Weak Mutation 218: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - InsertUnaryOp IINC -1 char1
   * 125 Weak Mutation 219: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 255 -> 0
   * 126 Weak Mutation 212: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceBitwiseOperator & -> ^
   * 127 Weak Mutation 213: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceVariable char1 -> byteOffset
   * 128 Weak Mutation 214: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceVariable char1 -> charOffset
   * 129 Weak Mutation 215: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceVariable char1 -> len
   * 130 Weak Mutation 208: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceConstant - 255 -> -1
   * 131 Weak Mutation 209: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceConstant - 255 -> 254
   * 132 Weak Mutation 210: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceConstant - 255 -> 256
   * 133 Weak Mutation 211: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceBitwiseOperator & -> |
   * 134 Weak Mutation 239: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> byteOffset
   * 135 Weak Mutation 238: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp IINC -1 charOffset
   * 136 Weak Mutation 237: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp IINC 1 charOffset
   * 137 Weak Mutation 236: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp Negation of charOffset
   * 138 Weak Mutation 235: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> len
   * 139 Weak Mutation 233: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> byteOffset
   * 140 Weak Mutation 232: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceBitwiseOperator >> -> <<
   * 141 Weak Mutation 230: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 4 -> 5
   * 142 Weak Mutation 229: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 4 -> 3
   * 143 Weak Mutation 228: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 4 -> -1
   * 144 Weak Mutation 227: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 4 -> 1
   * 145 Weak Mutation 226: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 4 -> 0
   * 146 Weak Mutation 225: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceBitwiseOperator & -> ^
   * 147 Weak Mutation 224: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceBitwiseOperator & -> |
   * 148 Weak Mutation 254: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> charOffset
   * 149 Weak Mutation 255: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> char1
   * 150 Weak Mutation 252: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - InsertUnaryOp IINC 1 byteOffset
   * 151 Weak Mutation 253: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - InsertUnaryOp IINC -1 byteOffset
   * 152 Weak Mutation 250: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> len
   * 153 Weak Mutation 251: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - InsertUnaryOp Negation of byteOffset
   * 154 Weak Mutation 248: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> charOffset
   * 155 Weak Mutation 249: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> char1
   * 156 Weak Mutation 246: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp IINC 1 char1
   * 157 Weak Mutation 247: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp IINC -1 char1
   * 158 Weak Mutation 244: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable char1 -> len
   * 159 Weak Mutation 245: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp Negation of char1
   * 160 Weak Mutation 242: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable char1 -> byteOffset
   * 161 Weak Mutation 243: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable char1 -> charOffset
   * 162 Weak Mutation 240: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> char1
   * 163 Weak Mutation 241: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> len
   * 164 Weak Mutation 275: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 128 -> 129
   * 165 Weak Mutation 274: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 128 -> 127
   * 166 Weak Mutation 273: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 128 -> -1
   * 167 Weak Mutation 272: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 128 -> 1
   * 168 Weak Mutation 278: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceComparisonOperator == -> <=
   * 169 Weak Mutation 258: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceVariable char2 -> charOffset
   * 170 Weak Mutation 259: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceVariable char2 -> char1
   * 171 Weak Mutation 256: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> len
   * 172 Weak Mutation 257: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceVariable char2 -> byteOffset
   * 173 Weak Mutation 262: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - InsertUnaryOp IINC 1 char2
   * 174 Weak Mutation 263: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - InsertUnaryOp IINC -1 char2
   * 175 Weak Mutation 260: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceVariable char2 -> len
   * 176 Weak Mutation 261: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - InsertUnaryOp Negation of char2
   * 177 Weak Mutation 266: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 192 -> -1
   * 178 Weak Mutation 267: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 192 -> 191
   * 179 Weak Mutation 264: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 192 -> 0
   * 180 Weak Mutation 265: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 192 -> 1
   * 181 Weak Mutation 270: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceBitwiseOperator & -> ^
   * 182 Weak Mutation 271: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 128 -> 0
   * 183 Weak Mutation 268: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 192 -> 193
   * 184 Weak Mutation 269: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceBitwiseOperator & -> |
   * 185 Weak Mutation 554: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceVariable offset -> length
   * 186 Weak Mutation 560: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceVariable length -> offset
   * 187 Weak Mutation 535: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - ReplaceComparisonOperator != -> <
   * 188 Weak Mutation 531: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - ReplaceVariable length -> offset
   * 189 Weak Mutation 543: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - ReplaceVariable length -> offset
   * 190 Weak Mutation 539: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - ReplaceVariable offset -> length
   * 191 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 6 TABLESWITCH L111 Case 0 - true
   */
  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte) (-45);
      try {
        UtfOps.bytesToString(byteArray0, (int) (byte)1, 6);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  //Test case number: 8
  /*
   * 104 covered goals:
   * 1 Weak Mutation 277: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceComparisonOperator == -> -2
   * 2 Weak Mutation 279: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> byteOffset
   * 3 Weak Mutation 283: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp Negation of charOffset
   * 4 Weak Mutation 282: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> char2
   * 5 Weak Mutation 281: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> len
   * 6 Weak Mutation 280: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> char1
   * 7 Weak Mutation 287: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> char1
   * 8 Weak Mutation 286: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> byteOffset
   * 9 Weak Mutation 285: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp IINC -1 charOffset
   * 10 Weak Mutation 284: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp IINC 1 charOffset
   * 11 Weak Mutation 305: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 6 -> 1
   * 12 Weak Mutation 304: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 6 -> 0
   * 13 Weak Mutation 307: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 6 -> 5
   * 14 Weak Mutation 306: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 6 -> -1
   * 15 Weak Mutation 309: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceBitwiseOperator << -> >>>
   * 16 Weak Mutation 308: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 6 -> 7
   * 17 Weak Mutation 311: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char2 -> byteOffset
   * 18 Weak Mutation 310: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceBitwiseOperator << -> >>
   * 19 Weak Mutation 313: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char2 -> char1
   * 20 Weak Mutation 312: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char2 -> charOffset
   * 21 Weak Mutation 315: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp Negation of char2
   * 22 Weak Mutation 314: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char2 -> len
   * 23 Weak Mutation 317: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp IINC -1 char2
   * 24 Weak Mutation 316: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp IINC 1 char2
   * 25 Weak Mutation 319: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 63 -> 1
   * 26 Weak Mutation 318: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 63 -> 0
   * 27 Weak Mutation 288: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> len
   * 28 Weak Mutation 289: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> char2
   * 29 Weak Mutation 290: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char1 -> byteOffset
   * 30 Weak Mutation 291: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char1 -> charOffset
   * 31 Weak Mutation 292: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char1 -> len
   * 32 Weak Mutation 293: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char1 -> char2
   * 33 Weak Mutation 294: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp Negation of char1
   * 34 Weak Mutation 295: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp IINC 1 char1
   * 35 Weak Mutation 296: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp IINC -1 char1
   * 36 Weak Mutation 297: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 31 -> 0
   * 37 Weak Mutation 298: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 31 -> 1
   * 38 Weak Mutation 299: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 31 -> -1
   * 39 Weak Mutation 300: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 31 -> 30
   * 40 Weak Mutation 301: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 31 -> 32
   * 41 Weak Mutation 302: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceBitwiseOperator & -> |
   * 42 Weak Mutation 303: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceBitwiseOperator & -> ^
   * 43 Weak Mutation 324: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceBitwiseOperator & -> ^
   * 44 Weak Mutation 325: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceBitwiseOperator | -> &
   * 45 Weak Mutation 322: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 63 -> 64
   * 46 Weak Mutation 323: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceBitwiseOperator & -> |
   * 47 Weak Mutation 320: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 63 -> -1
   * 48 Weak Mutation 321: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 63 -> 62
   * 49 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I56 Branch 40 IF_ICMPEQ L181 - true
   * 50 Weak Mutation 127: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceArithmeticOperator + -> -
   * 51 Weak Mutation 123: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceVariable offset -> charCount
   * 52 Weak Mutation 130: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceArithmeticOperator + -> *
   * 53 Weak Mutation 548: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:256 - ReplaceVariable charLen -> length
   * 54 Weak Mutation 559: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceVariable length -> charLen
   * 55 Weak Mutation 565: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:258 - ReplaceVariable charLen -> length
   * 56 Weak Mutation 234: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> char1
   * 57 Weak Mutation 279: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> byteOffset
   * 58 Weak Mutation 277: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceComparisonOperator == -> -2
   * 59 Weak Mutation 283: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp Negation of charOffset
   * 60 Weak Mutation 282: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> char2
   * 61 Weak Mutation 281: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> len
   * 62 Weak Mutation 280: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> char1
   * 63 Weak Mutation 287: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> char1
   * 64 Weak Mutation 286: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> byteOffset
   * 65 Weak Mutation 285: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp IINC -1 charOffset
   * 66 Weak Mutation 284: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp IINC 1 charOffset
   * 67 Weak Mutation 305: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 6 -> 1
   * 68 Weak Mutation 304: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 6 -> 0
   * 69 Weak Mutation 307: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 6 -> 5
   * 70 Weak Mutation 306: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 6 -> -1
   * 71 Weak Mutation 309: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceBitwiseOperator << -> >>>
   * 72 Weak Mutation 308: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 6 -> 7
   * 73 Weak Mutation 311: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char2 -> byteOffset
   * 74 Weak Mutation 310: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceBitwiseOperator << -> >>
   * 75 Weak Mutation 313: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char2 -> char1
   * 76 Weak Mutation 312: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char2 -> charOffset
   * 77 Weak Mutation 315: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp Negation of char2
   * 78 Weak Mutation 314: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char2 -> len
   * 79 Weak Mutation 317: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp IINC -1 char2
   * 80 Weak Mutation 316: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp IINC 1 char2
   * 81 Weak Mutation 319: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 63 -> 1
   * 82 Weak Mutation 318: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 63 -> 0
   * 83 Weak Mutation 288: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> len
   * 84 Weak Mutation 289: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable charOffset -> char2
   * 85 Weak Mutation 290: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char1 -> byteOffset
   * 86 Weak Mutation 291: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char1 -> charOffset
   * 87 Weak Mutation 292: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char1 -> len
   * 88 Weak Mutation 293: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceVariable char1 -> char2
   * 89 Weak Mutation 294: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp Negation of char1
   * 90 Weak Mutation 295: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp IINC 1 char1
   * 91 Weak Mutation 296: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - InsertUnaryOp IINC -1 char1
   * 92 Weak Mutation 297: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 31 -> 0
   * 93 Weak Mutation 298: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 31 -> 1
   * 94 Weak Mutation 299: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 31 -> -1
   * 95 Weak Mutation 300: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 31 -> 30
   * 96 Weak Mutation 301: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 31 -> 32
   * 97 Weak Mutation 302: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceBitwiseOperator & -> |
   * 98 Weak Mutation 303: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceBitwiseOperator & -> ^
   * 99 Weak Mutation 324: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceBitwiseOperator & -> ^
   * 100 Weak Mutation 325: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceBitwiseOperator | -> &
   * 101 Weak Mutation 322: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 63 -> 64
   * 102 Weak Mutation 323: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceBitwiseOperator & -> |
   * 103 Weak Mutation 320: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 63 -> -1
   * 104 Weak Mutation 321: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:184 - ReplaceConstant - 63 -> 62
   */
  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[3] = (byte) (-126);
      byteArray0[2] = (byte) (-45);
      String string0 = UtfOps.bytesToString(byteArray0, (int) (byte)1, 6);
      assertNotNull(string0);
      assertEquals("\u0000\u04C2\u0000\u0000\u0000", string0);
  }

  //Test case number: 9
  /*
   * 37 covered goals:
   * 1 Weak Mutation 276: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceComparisonOperator == -> >=
   * 2 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 36 TABLESWITCH L167 Case 12 - true
   * 3 Weak Mutation 254: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> charOffset
   * 4 Weak Mutation 255: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> char1
   * 5 Weak Mutation 252: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - InsertUnaryOp IINC 1 byteOffset
   * 6 Weak Mutation 253: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - InsertUnaryOp IINC -1 byteOffset
   * 7 Weak Mutation 250: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> len
   * 8 Weak Mutation 251: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - InsertUnaryOp Negation of byteOffset
   * 9 Weak Mutation 248: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> charOffset
   * 10 Weak Mutation 249: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> char1
   * 11 Weak Mutation 275: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 128 -> 129
   * 12 Weak Mutation 274: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 128 -> 127
   * 13 Weak Mutation 273: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 128 -> -1
   * 14 Weak Mutation 272: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 128 -> 1
   * 15 Weak Mutation 258: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceVariable char2 -> charOffset
   * 16 Weak Mutation 259: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceVariable char2 -> char1
   * 17 Weak Mutation 256: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:180 - ReplaceVariable byteOffset -> len
   * 18 Weak Mutation 257: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceVariable char2 -> byteOffset
   * 19 Weak Mutation 262: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - InsertUnaryOp IINC 1 char2
   * 20 Weak Mutation 263: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - InsertUnaryOp IINC -1 char2
   * 21 Weak Mutation 260: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceVariable char2 -> len
   * 22 Weak Mutation 261: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - InsertUnaryOp Negation of char2
   * 23 Weak Mutation 266: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 192 -> -1
   * 24 Weak Mutation 267: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 192 -> 191
   * 25 Weak Mutation 264: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 192 -> 0
   * 26 Weak Mutation 265: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 192 -> 1
   * 27 Weak Mutation 270: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceBitwiseOperator & -> ^
   * 28 Weak Mutation 271: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 128 -> 0
   * 29 Weak Mutation 268: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceConstant - 192 -> 193
   * 30 Weak Mutation 269: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceBitwiseOperator & -> |
   * 31 Weak Mutation 191: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable charOffset -> len
   * 32 Weak Mutation 193: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC 1 charOffset
   * 33 Weak Mutation 192: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp Negation of charOffset
   * 34 Weak Mutation 194: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC -1 charOffset
   * 35 Weak Mutation 276: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:181 - ReplaceComparisonOperator == -> >=
   * 36 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I4 Branch 23 IFEQ L164 - true
   * 37 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I154 Branch 43 IFEQ L165 - true
   */
  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-64);
      byteArray0[0] = (byte) (-64);
      char[] charArray0 = new char[22];
      try {
        UtfOps.bytesToChars(byteArray0, 0, charArray0, (int) '\u0000', (int) 'k', false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  //Test case number: 10
  /*
   * 20 covered goals:
   * 1 Weak Mutation 327: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - ReplaceVariable byteOffset -> charOffset
   * 2 Weak Mutation 334: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - ReplaceVariable byteOffset -> char1
   * 3 Weak Mutation 335: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - ReplaceVariable byteOffset -> len
   * 4 Weak Mutation 332: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - InsertUnaryOp IINC -1 byteOffset
   * 5 Weak Mutation 333: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - ReplaceVariable byteOffset -> charOffset
   * 6 Weak Mutation 330: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - InsertUnaryOp Negation of byteOffset
   * 7 Weak Mutation 331: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - InsertUnaryOp IINC 1 byteOffset
   * 8 Weak Mutation 328: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - ReplaceVariable byteOffset -> char1
   * 9 Weak Mutation 329: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - ReplaceVariable byteOffset -> len
   * 10 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 38 TABLESWITCH L167 Case 14 - true
   * 11 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I102 Branch 41 IF_ICMPNE L189 - true
   * 12 Weak Mutation 327: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - ReplaceVariable byteOffset -> charOffset
   * 13 Weak Mutation 334: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - ReplaceVariable byteOffset -> char1
   * 14 Weak Mutation 335: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - ReplaceVariable byteOffset -> len
   * 15 Weak Mutation 332: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - InsertUnaryOp IINC -1 byteOffset
   * 16 Weak Mutation 333: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - ReplaceVariable byteOffset -> charOffset
   * 17 Weak Mutation 330: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - InsertUnaryOp Negation of byteOffset
   * 18 Weak Mutation 331: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - InsertUnaryOp IINC 1 byteOffset
   * 19 Weak Mutation 328: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - ReplaceVariable byteOffset -> char1
   * 20 Weak Mutation 329: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:187 - ReplaceVariable byteOffset -> len
   */
  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-30);
      char[] charArray0 = new char[3];
      try {
        UtfOps.bytesToChars(byteArray0, (int) (byte)0, charArray0, (int) (byte)0, (int) (byte)23, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  //Test case number: 11
  /*
   * 36 covered goals:
   * 1 Weak Mutation 349: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceArithmeticOperator + -> *
   * 2 Weak Mutation 346: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceArithmeticOperator + -> -
   * 3 Weak Mutation 406: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceVariable c -> i
   * 4 Weak Mutation 405: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceVariable c -> charOffset
   * 5 Weak Mutation 336: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceVariable charLength -> byteOffset
   * 6 Weak Mutation 410: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceConstant - 2047 -> 0
   * 7 Weak Mutation 411: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceConstant - 2047 -> 1
   * 8 Weak Mutation 408: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - InsertUnaryOp IINC 1 c
   * 9 Weak Mutation 409: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - InsertUnaryOp IINC -1 c
   * 10 Weak Mutation 414: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceConstant - 2047 -> 2048
   * 11 Weak Mutation 415: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceComparisonOperator <= -> ==
   * 12 Weak Mutation 412: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceConstant - 2047 -> -1
   * 13 Weak Mutation 413: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceConstant - 2047 -> 2046
   * 14 Weak Mutation 403: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceVariable c -> byteOffset
   * 15 Weak Mutation 407: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - InsertUnaryOp Negation of c
   * 16 Weak Mutation 404: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceVariable c -> charLength
   * 17 Weak Mutation 341: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceVariable charOffset -> byteOffset
   * 18 Weak Mutation 350: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:219 - ReplaceVariable charOffset -> byteOffset
   * 19 Weak Mutation 349: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceArithmeticOperator + -> *
   * 20 Weak Mutation 346: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceArithmeticOperator + -> -
   * 21 Weak Mutation 355: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:220 - ReplaceVariable i -> byteOffset
   * 22 Weak Mutation 410: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceConstant - 2047 -> 0
   * 23 Weak Mutation 411: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceConstant - 2047 -> 1
   * 24 Weak Mutation 408: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - InsertUnaryOp IINC 1 c
   * 25 Weak Mutation 409: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - InsertUnaryOp IINC -1 c
   * 26 Weak Mutation 414: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceConstant - 2047 -> 2048
   * 27 Weak Mutation 415: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceComparisonOperator <= -> ==
   * 28 Weak Mutation 412: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceConstant - 2047 -> -1
   * 29 Weak Mutation 413: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceConstant - 2047 -> 2046
   * 30 Weak Mutation 403: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceVariable c -> byteOffset
   * 31 Weak Mutation 406: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceVariable c -> i
   * 32 Weak Mutation 407: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - InsertUnaryOp Negation of c
   * 33 Weak Mutation 404: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceVariable c -> charLength
   * 34 Weak Mutation 405: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:223 - ReplaceVariable c -> charOffset
   * 35 com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V: I22 Branch 45 IF_ICMPLT L221 - true
   * 36 com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V: I40 Branch 47 IF_ICMPLE L223 - true
   */
  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try {
        UtfOps.charsToBytes(charArray0, (int) (byte)2, byteArray0, (int) (byte) (-128), 1609);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -128
         */
      }
  }

  //Test case number: 12
  /*
   * 61 covered goals:
   * 1 Weak Mutation 388: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> i
   * 2 Weak Mutation 343: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - InsertUnaryOp Negation of charOffset
   * 3 Weak Mutation 342: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceVariable charOffset -> charLength
   * 4 Weak Mutation 341: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceVariable charOffset -> byteOffset
   * 5 Weak Mutation 340: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - InsertUnaryOp IINC -1 charLength
   * 6 Weak Mutation 339: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - InsertUnaryOp IINC 1 charLength
   * 7 Weak Mutation 338: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - InsertUnaryOp Negation of charLength
   * 8 Weak Mutation 337: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceVariable charLength -> charOffset
   * 9 Weak Mutation 351: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:219 - ReplaceVariable charOffset -> charLength
   * 10 Weak Mutation 350: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:219 - ReplaceVariable charOffset -> byteOffset
   * 11 Weak Mutation 348: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceArithmeticOperator + -> /
   * 12 Weak Mutation 347: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - ReplaceArithmeticOperator + -> %
   * 13 Weak Mutation 345: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - InsertUnaryOp IINC -1 charOffset
   * 14 Weak Mutation 344: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:218 - InsertUnaryOp IINC 1 charOffset
   * 15 Weak Mutation 373: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> i
   * 16 Weak Mutation 372: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> charOffset
   * 17 Weak Mutation 375: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - InsertUnaryOp IINC 1 c
   * 18 Weak Mutation 374: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - InsertUnaryOp Negation of c
   * 19 Weak Mutation 369: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceComparisonOperator < -> >=
   * 20 Weak Mutation 368: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceConstant - 1 -> 0
   * 21 Weak Mutation 371: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> charLength
   * 22 Weak Mutation 370: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> byteOffset
   * 23 Weak Mutation 381: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceConstant - 127 -> 128
   * 24 Weak Mutation 380: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceConstant - 127 -> 126
   * 25 Weak Mutation 383: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceComparisonOperator > -> !=
   * 26 Weak Mutation 377: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceConstant - 127 -> 0
   * 27 Weak Mutation 376: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - InsertUnaryOp IINC -1 c
   * 28 Weak Mutation 379: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceConstant - 127 -> -1
   * 29 Weak Mutation 378: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceConstant - 127 -> 1
   * 30 Weak Mutation 356: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:220 - ReplaceVariable i -> charLength
   * 31 Weak Mutation 358: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:220 - InsertUnaryOp Negation of i
   * 32 Weak Mutation 359: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:220 - InsertUnaryOp IINC 1 i
   * 33 Weak Mutation 352: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:219 - InsertUnaryOp Negation of charOffset
   * 34 Weak Mutation 353: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:219 - InsertUnaryOp IINC 1 charOffset
   * 35 Weak Mutation 354: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:219 - InsertUnaryOp IINC -1 charOffset
   * 36 Weak Mutation 355: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:220 - ReplaceVariable i -> byteOffset
   * 37 Weak Mutation 364: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> i
   * 38 Weak Mutation 365: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - InsertUnaryOp Negation of c
   * 39 Weak Mutation 366: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - InsertUnaryOp IINC 1 c
   * 40 Weak Mutation 367: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - InsertUnaryOp IINC -1 c
   * 41 Weak Mutation 360: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:220 - InsertUnaryOp IINC -1 i
   * 42 Weak Mutation 361: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> byteOffset
   * 43 Weak Mutation 362: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> charLength
   * 44 Weak Mutation 363: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:221 - ReplaceVariable c -> charOffset
   * 45 Weak Mutation 402: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - InsertUnaryOp IINC -1 c
   * 46 Weak Mutation 400: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - InsertUnaryOp Negation of c
   * 47 Weak Mutation 401: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - InsertUnaryOp IINC 1 c
   * 48 Weak Mutation 395: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> i
   * 49 Weak Mutation 394: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> charOffset
   * 50 Weak Mutation 393: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> c
   * 51 Weak Mutation 392: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> charLength
   * 52 Weak Mutation 399: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable c -> i
   * 53 Weak Mutation 398: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable c -> charOffset
   * 54 Weak Mutation 397: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable c -> charLength
   * 55 Weak Mutation 396: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable c -> byteOffset
   * 56 Weak Mutation 387: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> charOffset
   * 57 Weak Mutation 386: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> c
   * 58 Weak Mutation 391: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - InsertUnaryOp IINC -1 byteOffset
   * 59 Weak Mutation 390: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - InsertUnaryOp IINC 1 byteOffset
   * 60 Weak Mutation 389: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - InsertUnaryOp Negation of byteOffset
   * 61 Weak Mutation 388: com.sleepycat.util.UtfOps.charsToBytes([CI[BII)V:222 - ReplaceVariable byteOffset -> i
   */
  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      // Undeclared exception!
      try {
        UtfOps.charsToBytes(charArray0, (int) (byte)0, byteArray0, (int) ']', (int) ']');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 93
         */
      }
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 Weak Mutation 537: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - ReplaceComparisonOperator != -> -1
   * 2 Weak Mutation 538: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:254 - DeleteField: EMPTY_STRINGLjava/lang/String;
   * 3 com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;: I3 Branch 49 IFNE L253 - false
   * 4 Weak Mutation 537: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - ReplaceComparisonOperator != -> -1
   * 5 Weak Mutation 538: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:254 - DeleteField: EMPTY_STRINGLjava/lang/String;
   */
  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = UtfOps.bytesToString(byteArray0, (int) (byte)1, 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  //Test case number: 14
  /*
   * 6 covered goals:
   * 1 Weak Mutation 571: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:269 - ReplaceComparisonOperator != -> -1
   * 2 Weak Mutation 572: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:270 - DeleteField: EMPTY_BYTES[B
   * 3 com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B: I4 Branch 50 IFNE L269 - false
   * 4 Weak Mutation 568: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:269 - DeleteStatement: length()I
   * 5 Weak Mutation 572: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:270 - DeleteField: EMPTY_BYTES[B
   * 6 Weak Mutation 571: com.sleepycat.util.UtfOps.stringToBytes(Ljava/lang/String;)[B:269 - ReplaceComparisonOperator != -> -1
   */
  @Test
  public void test14()  throws Throwable  {
      byte[] byteArray0 = UtfOps.stringToBytes("");
      assertNotNull(byteArray0);
  }

  //Test case number: 15
  /*
   * 7 covered goals:
   * 1 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 18 TABLESWITCH L111 Case 12 - true
   * 2 Weak Mutation 132: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceVariable offset -> charCount
   * 3 Weak Mutation 152: com.sleepycat.util.UtfOps.getCharLength([BII)I:124 - ReplaceVariable offset -> length
   * 4 Weak Mutation 153: com.sleepycat.util.UtfOps.getCharLength([BII)I:124 - ReplaceVariable offset -> charCount
   * 5 Weak Mutation 159: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceVariable offset -> charCount
   * 6 Weak Mutation 171: com.sleepycat.util.UtfOps.getCharLength([BII)I:134 - ReplaceVariable charCount -> length
   * 7 Weak Mutation 172: com.sleepycat.util.UtfOps.getCharLength([BII)I:134 - ReplaceVariable charCount -> offset
   */
  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-61);
      int int0 = UtfOps.getCharLength(byteArray0);
      assertEquals(6, int0);
  }

  //Test case number: 16
  /*
   * 3 covered goals:
   * 1 com.sleepycat.util.UtfOps.getCharLength([BII)I: I22 Branch 21 TABLESWITCH L111 Default-Case - true
   * 2 Weak Mutation 117: com.sleepycat.util.UtfOps.getCharLength([B)I:88 - DeleteStatement: getCharLength([BII)I
   * 3 Weak Mutation 116: com.sleepycat.util.UtfOps.getCharLength([B)I:88 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      try {
        UtfOps.getCharLength(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * 1 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 29 TABLESWITCH L167 Case 5 - true
   * 2 Weak Mutation 185: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable byteOffset -> charOffset
   */
  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      char[] charArray0 = new char[8];
      try {
        UtfOps.bytesToChars(byteArray0, 0, charArray0, 66, (int) 'G', true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 66
         */
      }
  }

  //Test case number: 18
  /*
   * 77 covered goals:
   * 1 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 31 TABLESWITCH L167 Case 7 - true
   * 2 Weak Mutation 119: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceVariable length -> offset
   * 3 Weak Mutation 118: com.sleepycat.util.UtfOps.getCharLength([BII)I:108 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 126: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - InsertUnaryOp IINC -1 offset
   * 5 Weak Mutation 125: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - InsertUnaryOp IINC 1 offset
   * 6 Weak Mutation 124: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - InsertUnaryOp Negation of offset
   * 7 Weak Mutation 122: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceVariable offset -> length
   * 8 Weak Mutation 121: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - InsertUnaryOp Negation of length
   * 9 Weak Mutation 120: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceVariable length -> charCount
   * 10 Weak Mutation 137: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 255 -> 1
   * 11 Weak Mutation 136: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 255 -> 0
   * 12 Weak Mutation 139: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 255 -> 254
   * 13 Weak Mutation 138: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 255 -> -1
   * 14 Weak Mutation 141: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceBitwiseOperator & -> |
   * 15 Weak Mutation 140: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 255 -> 256
   * 16 Weak Mutation 143: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 4 -> 0
   * 17 Weak Mutation 142: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceBitwiseOperator & -> ^
   * 18 Weak Mutation 129: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceArithmeticOperator + -> /
   * 19 Weak Mutation 128: com.sleepycat.util.UtfOps.getCharLength([BII)I:109 - ReplaceArithmeticOperator + -> %
   * 20 Weak Mutation 131: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceVariable offset -> length
   * 21 Weak Mutation 133: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - InsertUnaryOp Negation of offset
   * 22 Weak Mutation 135: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - InsertUnaryOp IINC -1 offset
   * 23 Weak Mutation 134: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - InsertUnaryOp IINC 1 offset
   * 24 Weak Mutation 156: com.sleepycat.util.UtfOps.getCharLength([BII)I:132 - ReplaceVariable charCount -> length
   * 25 Weak Mutation 157: com.sleepycat.util.UtfOps.getCharLength([BII)I:132 - ReplaceVariable charCount -> offset
   * 26 Weak Mutation 158: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceVariable offset -> length
   * 27 Weak Mutation 144: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 4 -> 1
   * 28 Weak Mutation 145: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 4 -> -1
   * 29 Weak Mutation 146: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 4 -> 3
   * 30 Weak Mutation 147: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceConstant - 4 -> 5
   * 31 Weak Mutation 149: com.sleepycat.util.UtfOps.getCharLength([BII)I:111 - ReplaceBitwiseOperator >> -> <<
   * 32 Weak Mutation 150: com.sleepycat.util.UtfOps.getCharLength([BII)I:120 - ReplaceVariable offset -> length
   * 33 Weak Mutation 151: com.sleepycat.util.UtfOps.getCharLength([BII)I:120 - ReplaceVariable offset -> charCount
   * 34 Weak Mutation 170: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceComparisonOperator < -> <=
   * 35 Weak Mutation 169: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceComparisonOperator < -> -2
   * 36 Weak Mutation 175: com.sleepycat.util.UtfOps.getCharLength([BII)I:134 - InsertUnaryOp IINC -1 charCount
   * 37 Weak Mutation 174: com.sleepycat.util.UtfOps.getCharLength([BII)I:134 - InsertUnaryOp IINC 1 charCount
   * 38 Weak Mutation 173: com.sleepycat.util.UtfOps.getCharLength([BII)I:134 - InsertUnaryOp Negation of charCount
   * 39 Weak Mutation 163: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceVariable length -> offset
   * 40 Weak Mutation 162: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - InsertUnaryOp IINC -1 offset
   * 41 Weak Mutation 161: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - InsertUnaryOp IINC 1 offset
   * 42 Weak Mutation 160: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - InsertUnaryOp Negation of offset
   * 43 Weak Mutation 167: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - InsertUnaryOp IINC -1 length
   * 44 Weak Mutation 166: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - InsertUnaryOp IINC 1 length
   * 45 Weak Mutation 165: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - InsertUnaryOp Negation of length
   * 46 Weak Mutation 164: com.sleepycat.util.UtfOps.getCharLength([BII)I:110 - ReplaceVariable length -> charCount
   * 47 Weak Mutation 550: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:256 - InsertUnaryOp Negation of charLen
   * 48 Weak Mutation 551: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:256 - InsertUnaryOp IINC 1 charLen
   * 49 Weak Mutation 549: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:256 - ReplaceVariable charLen -> offset
   * 50 Weak Mutation 546: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp IINC -1 length
   * 51 Weak Mutation 547: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - DeleteStatement: getCharLength([BII)I
   * 52 Weak Mutation 544: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp Negation of length
   * 53 Weak Mutation 545: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp IINC 1 length
   * 54 Weak Mutation 558: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceConstant - 0 -> 1
   * 55 Weak Mutation 556: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - InsertUnaryOp IINC 1 offset
   * 56 Weak Mutation 557: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - InsertUnaryOp IINC -1 offset
   * 57 Weak Mutation 554: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceVariable offset -> length
   * 58 Weak Mutation 555: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - InsertUnaryOp Negation of offset
   * 59 Weak Mutation 552: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:256 - InsertUnaryOp IINC -1 charLen
   * 60 Weak Mutation 553: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceVariable offset -> charLen
   * 61 Weak Mutation 567: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:258 - InsertUnaryOp Negation of charLen
   * 62 Weak Mutation 566: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:258 - ReplaceVariable charLen -> offset
   * 63 Weak Mutation 564: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:258 - ReplaceConstant - 0 -> 1
   * 64 Weak Mutation 563: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - DeleteStatement: bytesToChars([BI[CIIZ)I
   * 65 Weak Mutation 562: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceConstant - 1 -> 0
   * 66 Weak Mutation 561: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - InsertUnaryOp Negation of length
   * 67 Weak Mutation 560: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:257 - ReplaceVariable length -> offset
   * 68 Weak Mutation 533: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - InsertUnaryOp IINC 1 length
   * 69 Weak Mutation 532: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - InsertUnaryOp Negation of length
   * 70 Weak Mutation 535: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - ReplaceComparisonOperator != -> <
   * 71 Weak Mutation 534: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - InsertUnaryOp IINC -1 length
   * 72 Weak Mutation 531: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:253 - ReplaceVariable length -> offset
   * 73 Weak Mutation 541: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp IINC 1 offset
   * 74 Weak Mutation 540: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp Negation of offset
   * 75 Weak Mutation 543: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - ReplaceVariable length -> offset
   * 76 Weak Mutation 542: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - InsertUnaryOp IINC -1 offset
   * 77 Weak Mutation 539: com.sleepycat.util.UtfOps.bytesToString([BII)Ljava/lang/String;:255 - ReplaceVariable offset -> length
   */
  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      String string0 = UtfOps.bytesToString(byteArray0, (int) (byte)0, 2);
      assertEquals("x\u0000", string0);
      assertNotNull(string0);
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 32 TABLESWITCH L167 Case 8 - true
   * 2 Weak Mutation 190: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable charOffset -> byteOffset
   * 3 Weak Mutation 199: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceVariable byteOffset -> charOffset
   * 4 Weak Mutation 190: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable charOffset -> byteOffset
   */
  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      char[] charArray0 = new char[8];
      try {
        UtfOps.bytesToChars(byteArray0, (int) (byte)0, charArray0, 550, 1948, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * 1 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 35 TABLESWITCH L167 Case 11 - true
   * 2 Weak Mutation 191: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable charOffset -> len
   * 3 Weak Mutation 193: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC 1 charOffset
   * 4 Weak Mutation 192: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp Negation of charOffset
   * 5 Weak Mutation 194: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC -1 charOffset
   */
  @Test
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-71);
      char[] charArray0 = new char[3];
      try {
        UtfOps.bytesToChars(byteArray0, (int) (byte)0, charArray0, (int) (byte)0, (int) (byte)23, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  //Test case number: 21
  /*
   * 65 covered goals:
   * 1 com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I: I31 Branch 39 TABLESWITCH L167 Default-Case - true
   * 2 Weak Mutation 186: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable byteOffset -> len
   * 3 Weak Mutation 187: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp Negation of byteOffset
   * 4 Weak Mutation 184: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 188: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC 1 byteOffset
   * 6 Weak Mutation 189: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC -1 byteOffset
   * 7 Weak Mutation 178: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp Negation of len
   * 8 Weak Mutation 179: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC 1 len
   * 9 Weak Mutation 176: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable len -> byteOffset
   * 10 Weak Mutation 177: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceVariable len -> charOffset
   * 11 Weak Mutation 182: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC 1 isByteLen
   * 12 Weak Mutation 183: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC -1 isByteLen
   * 13 Weak Mutation 180: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp IINC -1 len
   * 14 Weak Mutation 181: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - InsertUnaryOp Negation of isByteLen
   * 15 Weak Mutation 205: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceVariable byteOffset -> len
   * 16 Weak Mutation 204: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceVariable byteOffset -> charOffset
   * 17 Weak Mutation 207: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceConstant - 255 -> 1
   * 18 Weak Mutation 206: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceConstant - 255 -> 0
   * 19 Weak Mutation 201: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - InsertUnaryOp Negation of byteOffset
   * 20 Weak Mutation 200: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceVariable byteOffset -> len
   * 21 Weak Mutation 203: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - InsertUnaryOp IINC -1 byteOffset
   * 22 Weak Mutation 202: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - InsertUnaryOp IINC 1 byteOffset
   * 23 Weak Mutation 197: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceArithmeticOperator + -> /
   * 24 Weak Mutation 196: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceArithmeticOperator + -> %
   * 25 Weak Mutation 198: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceArithmeticOperator + -> *
   * 26 Weak Mutation 195: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:164 - ReplaceArithmeticOperator + -> -
   * 27 Weak Mutation 220: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 255 -> 1
   * 28 Weak Mutation 221: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 255 -> -1
   * 29 Weak Mutation 222: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 255 -> 254
   * 30 Weak Mutation 223: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 255 -> 256
   * 31 Weak Mutation 216: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - InsertUnaryOp Negation of char1
   * 32 Weak Mutation 217: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - InsertUnaryOp IINC 1 char1
   * 33 Weak Mutation 218: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - InsertUnaryOp IINC -1 char1
   * 34 Weak Mutation 219: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 255 -> 0
   * 35 Weak Mutation 212: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceBitwiseOperator & -> ^
   * 36 Weak Mutation 213: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceVariable char1 -> byteOffset
   * 37 Weak Mutation 214: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceVariable char1 -> charOffset
   * 38 Weak Mutation 215: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceVariable char1 -> len
   * 39 Weak Mutation 208: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceConstant - 255 -> -1
   * 40 Weak Mutation 209: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceConstant - 255 -> 254
   * 41 Weak Mutation 210: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceConstant - 255 -> 256
   * 42 Weak Mutation 211: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:166 - ReplaceBitwiseOperator & -> |
   * 43 Weak Mutation 239: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> byteOffset
   * 44 Weak Mutation 238: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp IINC -1 charOffset
   * 45 Weak Mutation 237: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp IINC 1 charOffset
   * 46 Weak Mutation 236: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp Negation of charOffset
   * 47 Weak Mutation 235: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> len
   * 48 Weak Mutation 234: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> char1
   * 49 Weak Mutation 233: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> byteOffset
   * 50 Weak Mutation 232: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceBitwiseOperator >> -> <<
   * 51 Weak Mutation 230: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 4 -> 5
   * 52 Weak Mutation 229: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 4 -> 3
   * 53 Weak Mutation 228: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 4 -> -1
   * 54 Weak Mutation 227: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 4 -> 1
   * 55 Weak Mutation 226: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceConstant - 4 -> 0
   * 56 Weak Mutation 225: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceBitwiseOperator & -> ^
   * 57 Weak Mutation 224: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:167 - ReplaceBitwiseOperator & -> |
   * 58 Weak Mutation 246: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp IINC 1 char1
   * 59 Weak Mutation 247: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp IINC -1 char1
   * 60 Weak Mutation 244: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable char1 -> len
   * 61 Weak Mutation 245: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - InsertUnaryOp Negation of char1
   * 62 Weak Mutation 242: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable char1 -> byteOffset
   * 63 Weak Mutation 243: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable char1 -> charOffset
   * 64 Weak Mutation 240: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> char1
   * 65 Weak Mutation 241: com.sleepycat.util.UtfOps.bytesToChars([BI[CIIZ)I:176 - ReplaceVariable charOffset -> len
   */
  @Test
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte) (-1);
      char[] charArray0 = new char[6];
      try {
        UtfOps.bytesToChars(byteArray0, (int) (byte)1, charArray0, (int) (byte)1, 127, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }
}
