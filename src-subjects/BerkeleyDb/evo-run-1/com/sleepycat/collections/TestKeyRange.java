/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.collections;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.collections.KeyRange;
import com.sleepycat.collections.KeyRangeException;
import com.sleepycat.je.DatabaseEntry;
import java.util.Comparator;

@RunWith(EvoSuiteRunner.class)
public class TestKeyRange {


  //Test case number: 0
  /*
   * 55 covered goals:
   * 1 Weak Mutation 31: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:75 - ReplaceVariable endKey -> beginKey
   * 2 Weak Mutation 43: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:80 - ReplaceVariable endKey -> beginKey
   * 3 Weak Mutation 41: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:79 - ReplaceVariable beginKey -> endKey
   * 4 Weak Mutation 13: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:66 - ReplaceVariable beginKey -> endKey
   * 5 Weak Mutation 14: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:66 - ReplaceComparisonOperator != null -> = null
   * 6 Weak Mutation 16: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:68 - InsertUnaryOp Negation
   * 7 Weak Mutation 27: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:72 - ReplaceComparisonOperator != null -> = null
   * 8 Weak Mutation 26: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:72 - ReplaceVariable endKey -> beginKey
   * 9 Weak Mutation 31: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:75 - ReplaceVariable endKey -> beginKey
   * 10 Weak Mutation 34: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:75 - InsertUnaryOp IINC 1 endInclusive
   * 11 Weak Mutation 35: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:75 - InsertUnaryOp IINC -1 endInclusive
   * 12 Weak Mutation 32: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:75 - ReplaceVariable endInclusive -> beginInclusive
   * 13 Weak Mutation 33: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:75 - InsertUnaryOp Negation of endInclusive
   * 14 Weak Mutation 36: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:75 - DeleteStatement: check(Lcom/sleepycat/je/DatabaseEntry;Z)Z
   * 15 Weak Mutation 37: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:75 - ReplaceComparisonOperator != -> ==
   * 16 Weak Mutation 42: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:80 - ReplaceVariable range -> this
   * 17 Weak Mutation 43: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:80 - ReplaceVariable endKey -> beginKey
   * 18 Weak Mutation 40: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:79 - ReplaceVariable range -> this
   * 19 Weak Mutation 41: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:79 - ReplaceVariable beginKey -> endKey
   * 20 Weak Mutation 46: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:81 - InsertUnaryOp Negation of beginInclusive
   * 21 Weak Mutation 47: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:81 - InsertUnaryOp IINC 1 beginInclusive
   * 22 Weak Mutation 44: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:81 - ReplaceVariable range -> this
   * 23 Weak Mutation 45: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:81 - ReplaceVariable beginInclusive -> endInclusive
   * 24 Weak Mutation 51: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:82 - InsertUnaryOp Negation of endInclusive
   * 25 Weak Mutation 50: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:82 - ReplaceVariable endInclusive -> beginInclusive
   * 26 Weak Mutation 49: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:82 - ReplaceVariable range -> this
   * 27 Weak Mutation 48: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:81 - InsertUnaryOp IINC -1 beginInclusive
   * 28 Weak Mutation 53: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:82 - InsertUnaryOp IINC -1 endInclusive
   * 29 Weak Mutation 52: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:82 - InsertUnaryOp IINC 1 endInclusive
   * 30 Weak Mutation 111: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:130 - InsertUnaryOp Negation
   * 31 Weak Mutation 113: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:130 - ReplaceComparisonOperator == -> !=
   * 32 Weak Mutation 127: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - InsertUnaryOp IINC 1 inclusive
   * 33 Weak Mutation 126: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - InsertUnaryOp Negation of inclusive
   * 34 Weak Mutation 125: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - ReplaceComparisonOperator == -> !=
   * 35 Weak Mutation 124: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - DeleteStatement: checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z
   * 36 Weak Mutation 123: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - InsertUnaryOp IINC -1 inclusive
   * 37 Weak Mutation 122: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - InsertUnaryOp IINC 1 inclusive
   * 38 Weak Mutation 121: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - InsertUnaryOp Negation of inclusive
   * 39 Weak Mutation 129: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - DeleteStatement: checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z
   * 40 Weak Mutation 128: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - InsertUnaryOp IINC -1 inclusive
   * 41 Weak Mutation 131: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - ReplaceConstant - 1 -> 0
   * 42 Weak Mutation 130: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - ReplaceComparisonOperator == -> !=
   * 43 Weak Mutation 135: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:156 - ReplaceConstant - 1 -> 0
   * 44 Weak Mutation 134: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:155 - ReplaceComparisonOperator != null -> = null
   * 45 Weak Mutation 156: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:170 - ReplaceComparisonOperator != null -> = null
   * 46 Weak Mutation 157: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:171 - ReplaceConstant - 1 -> 0
   * 47 com.sleepycat.collections.KeyRange.<init>(Ljava/util/Comparator;)V: root-Branch
   * 48 com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I4 Branch 14 IFEQ L130 - true
   * 49 com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I24 Branch 16 IFEQ L133 - false
   * 50 com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I29 Branch 17 IFEQ L133 - false
   * 51 com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I4 Branch 18 IFNONNULL L155 - false
   * 52 com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I4 Branch 23 IFNONNULL L170 - false
   * 53 com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;: I3 Branch 2 IFNONNULL L66 - false
   * 54 com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;: I33 Branch 4 IFNONNULL L72 - true
   * 55 com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;: I52 Branch 5 IFNE L75 - true
   */
  @Test
  public void test0()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry(keyRange0.ZERO_LENGTH_BYTE_ARRAY);
      KeyRange keyRange1 = keyRange0.subRange(keyRange0.endKey, false, databaseEntry0, true);
      assertNotNull(keyRange1);
      assertEquals("[KeyRange null false<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=2> true", keyRange1.toString());
  }

  //Test case number: 1
  /*
   * 136 covered goals:
   * 1 Weak Mutation 38: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:76 - ReplaceConstant - endKey out of range -> 
   * 2 Weak Mutation 116: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:131 - ReplaceComparisonOperator != -> <
   * 3 Weak Mutation 120: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:131 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 187: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:188 - ReplaceVariable key1 -> key2
   * 5 Weak Mutation 185: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:188 - ReplaceVariable key1 -> key2
   * 6 Weak Mutation 189: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:188 - ReplaceVariable key1 -> key2
   * 7 Weak Mutation 191: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:189 - ReplaceVariable key2 -> key1
   * 8 Weak Mutation 193: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:189 - ReplaceVariable key2 -> key1
   * 9 Weak Mutation 195: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:189 - ReplaceVariable key2 -> key1
   * 10 Weak Mutation 314: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size1 -> size2
   * 11 Weak Mutation 338: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceComparisonOperator < -> <=
   * 12 Weak Mutation 331: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size2 -> size1
   * 13 Weak Mutation 341: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceVariable size1 -> size2
   * 14 Weak Mutation 351: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceComparisonOperator >= -> ==
   * 15 Weak Mutation 347: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceVariable size2 -> size1
   * 16 Weak Mutation 371: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceComparisonOperator <= -> -1
   * 17 Weak Mutation 359: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceVariable size1 -> size2
   * 18 Weak Mutation 365: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceVariable size2 -> size1
   * 19 Weak Mutation 372: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:214 - ReplaceConstant - 1 -> 0
   * 20 com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;: I52 Branch 5 IFNE L75 - false
   * 21 com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I12 Branch 15 IFNE L131 - true
   * 22 com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I: I53 Branch 32 IF_ICMPLT L201 - false
   * 23 com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I: I67 Branch 34 IF_ICMPLE L213 - false
   * 24 Weak Mutation 18: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:69 - ReplaceVariable beginKey -> endKey
   * 25 Weak Mutation 31: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:75 - ReplaceVariable endKey -> beginKey
   * 26 Weak Mutation 0: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:46 - DeleteStatement: check(Lcom/sleepycat/je/DatabaseEntry;)Z
   * 27 Weak Mutation 1: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:46 - ReplaceComparisonOperator != -> ==
   * 28 Weak Mutation 4: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:50 - ReplaceVariable range -> this
   * 29 Weak Mutation 5: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:51 - ReplaceVariable range -> this
   * 30 Weak Mutation 6: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:52 - ReplaceVariable range -> this
   * 31 Weak Mutation 7: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:52 - ReplaceConstant - 1 -> 0
   * 32 Weak Mutation 8: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:53 - ReplaceVariable range -> this
   * 33 Weak Mutation 9: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:53 - ReplaceConstant - 1 -> 0
   * 34 Weak Mutation 10: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:54 - ReplaceVariable range -> this
   * 35 Weak Mutation 11: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:54 - ReplaceConstant - 1 -> 0
   * 36 Weak Mutation 12: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:55 - ReplaceVariable range -> this
   * 37 Weak Mutation 19: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:69 - ReplaceVariable beginInclusive -> endInclusive
   * 38 Weak Mutation 18: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:69 - ReplaceVariable beginKey -> endKey
   * 39 Weak Mutation 21: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:69 - InsertUnaryOp IINC 1 beginInclusive
   * 40 Weak Mutation 20: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:69 - InsertUnaryOp Negation of beginInclusive
   * 41 Weak Mutation 23: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:69 - DeleteStatement: check(Lcom/sleepycat/je/DatabaseEntry;Z)Z
   * 42 Weak Mutation 22: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:69 - InsertUnaryOp IINC -1 beginInclusive
   * 43 Weak Mutation 24: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:69 - ReplaceComparisonOperator != -> ==
   * 44 Weak Mutation 38: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:76 - ReplaceConstant - endKey out of range -> 
   * 45 Weak Mutation 93: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:118 - InsertUnaryOp Negation
   * 46 Weak Mutation 95: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:118 - ReplaceComparisonOperator == -> !=
   * 47 Weak Mutation 103: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - ReplaceConstant - 1 -> 0
   * 48 Weak Mutation 108: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - ReplaceComparisonOperator == -> !=
   * 49 Weak Mutation 109: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - ReplaceConstant - 1 -> 0
   * 50 Weak Mutation 106: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - ReplaceConstant - 1 -> 0
   * 51 Weak Mutation 107: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - DeleteStatement: checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z
   * 52 Weak Mutation 104: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - DeleteStatement: checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z
   * 53 Weak Mutation 105: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - ReplaceComparisonOperator == -> !=
   * 54 Weak Mutation 119: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:131 - ReplaceConstant - 1 -> 0
   * 55 Weak Mutation 118: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:131 - ReplaceComparisonOperator != -> -1
   * 56 Weak Mutation 116: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:131 - ReplaceComparisonOperator != -> <
   * 57 Weak Mutation 115: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:131 - DeleteStatement: compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I
   * 58 Weak Mutation 114: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:131 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 59 Weak Mutation 112: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:130 - DeleteField: singleKeyZ
   * 60 Weak Mutation 120: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:131 - ReplaceConstant - 0 -> 1
   * 61 Weak Mutation 186: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:188 - DeleteStatement: getData()[B
   * 62 Weak Mutation 187: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:188 - ReplaceVariable key1 -> key2
   * 63 Weak Mutation 185: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:188 - ReplaceVariable key1 -> key2
   * 64 Weak Mutation 190: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:188 - DeleteStatement: getSize()I
   * 65 Weak Mutation 191: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:189 - ReplaceVariable key2 -> key1
   * 66 Weak Mutation 188: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:188 - DeleteStatement: getOffset()I
   * 67 Weak Mutation 189: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:188 - ReplaceVariable key1 -> key2
   * 68 Weak Mutation 178: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:184 - ReplaceComparisonOperator = null -> != null
   * 69 Weak Mutation 197: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:187 - DeleteStatement: compareBytes([BII[BII)I
   * 70 Weak Mutation 196: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:189 - DeleteStatement: getSize()I
   * 71 Weak Mutation 198: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceConstant - 0 -> 1
   * 72 Weak Mutation 193: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:189 - ReplaceVariable key2 -> key1
   * 73 Weak Mutation 192: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:189 - DeleteStatement: getData()[B
   * 74 Weak Mutation 195: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:189 - ReplaceVariable key2 -> key1
   * 75 Weak Mutation 194: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:189 - DeleteStatement: getOffset()I
   * 76 Weak Mutation 309: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp Negation of i
   * 77 Weak Mutation 308: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> size1
   * 78 Weak Mutation 311: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC -1 i
   * 79 Weak Mutation 310: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC 1 i
   * 80 Weak Mutation 313: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size1 -> offset1
   * 81 Weak Mutation 312: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size1 -> offset2
   * 82 Weak Mutation 315: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size1 -> i
   * 83 Weak Mutation 314: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size1 -> size2
   * 84 Weak Mutation 317: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC 1 size1
   * 85 Weak Mutation 316: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp Negation of size1
   * 86 Weak Mutation 318: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC -1 size1
   * 87 Weak Mutation 343: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - InsertUnaryOp IINC 1 size1
   * 88 Weak Mutation 342: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - InsertUnaryOp Negation of size1
   * 89 Weak Mutation 341: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceVariable size1 -> size2
   * 90 Weak Mutation 340: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceVariable size1 -> offset1
   * 91 Weak Mutation 339: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceVariable size1 -> offset2
   * 92 Weak Mutation 338: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceComparisonOperator < -> <=
   * 93 Weak Mutation 351: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceComparisonOperator >= -> ==
   * 94 Weak Mutation 350: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - InsertUnaryOp IINC -1 size2
   * 95 Weak Mutation 349: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - InsertUnaryOp IINC 1 size2
   * 96 Weak Mutation 348: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - InsertUnaryOp Negation of size2
   * 97 Weak Mutation 347: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceVariable size2 -> size1
   * 98 Weak Mutation 344: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - InsertUnaryOp IINC -1 size1
   * 99 Weak Mutation 326: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp Negation of i
   * 100 Weak Mutation 327: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC 1 i
   * 101 Weak Mutation 325: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> size1
   * 102 Weak Mutation 320: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceComparisonOperator >= -> >
   * 103 Weak Mutation 321: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceComparisonOperator >= -> -1
   * 104 Weak Mutation 334: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC 1 size2
   * 105 Weak Mutation 335: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC -1 size2
   * 106 Weak Mutation 333: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp Negation of size2
   * 107 Weak Mutation 331: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size2 -> size1
   * 108 Weak Mutation 328: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC -1 i
   * 109 Weak Mutation 373: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:216 - ReplaceConstant - 0 -> 1
   * 110 Weak Mutation 372: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:214 - ReplaceConstant - 1 -> 0
   * 111 Weak Mutation 368: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - InsertUnaryOp IINC -1 size2
   * 112 Weak Mutation 371: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceComparisonOperator <= -> -1
   * 113 Weak Mutation 370: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceComparisonOperator <= -> <
   * 114 Weak Mutation 357: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceVariable size1 -> offset2
   * 115 Weak Mutation 358: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceVariable size1 -> offset1
   * 116 Weak Mutation 359: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceVariable size1 -> size2
   * 117 Weak Mutation 352: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceComparisonOperator >= -> >
   * 118 Weak Mutation 365: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceVariable size2 -> size1
   * 119 Weak Mutation 366: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - InsertUnaryOp Negation of size2
   * 120 Weak Mutation 367: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - InsertUnaryOp IINC 1 size2
   * 121 Weak Mutation 360: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - InsertUnaryOp Negation of size1
   * 122 Weak Mutation 361: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - InsertUnaryOp IINC 1 size1
   * 123 Weak Mutation 362: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - InsertUnaryOp IINC -1 size1
   * 124 com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;: I5 Branch 1 IFNE L46 - true
   * 125 com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I: I4 Branch 28 IFNULL L184 - true
   * 126 com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I4 Branch 14 IFEQ L130 - false
   * 127 com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I12 Branch 15 IFNE L131 - false
   * 128 com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I: I50 Branch 31 IF_ICMPGE L201 - true
   * 129 com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I: I50 Branch 31 IF_ICMPGE L201 - false
   * 130 com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I: I58 Branch 33 IF_ICMPGE L211 - true
   * 131 com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I: I67 Branch 34 IF_ICMPLE L213 - true
   * 132 com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z: I4 Branch 10 IFEQ L118 - true
   * 133 com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z: I24 Branch 12 IFEQ L121 - false
   * 134 com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z: I29 Branch 13 IFEQ L121 - false
   * 135 com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;: I3 Branch 2 IFNONNULL L66 - true
   * 136 com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;: I22 Branch 3 IFNE L69 - true
   */
  @Test
  public void test1()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0);
      assertNotNull(keyRange1);
      
      DatabaseEntry databaseEntry1 = new DatabaseEntry(keyRange1.ZERO_LENGTH_BYTE_ARRAY);
      try {
        keyRange1.subRange(databaseEntry0, false, databaseEntry1, true);
        fail("Expecting exception: KeyRangeException");
      } catch(KeyRangeException e) {
        /*
         * endKey out of range
         */
      }
  }

  //Test case number: 2
  /*
   * 7 covered goals:
   * 1 Weak Mutation 57: com.sleepycat.collections.KeyRange.getSingleKey()Lcom/sleepycat/je/DatabaseEntry;:92 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 2 Weak Mutation 55: com.sleepycat.collections.KeyRange.getSingleKey()Lcom/sleepycat/je/DatabaseEntry;:92 - DeleteField: singleKeyZ
   * 3 Weak Mutation 55: com.sleepycat.collections.KeyRange.getSingleKey()Lcom/sleepycat/je/DatabaseEntry;:92 - DeleteField: singleKeyZ
   * 4 Weak Mutation 54: com.sleepycat.collections.KeyRange.getSingleKey()Lcom/sleepycat/je/DatabaseEntry;:92 - InsertUnaryOp Negation
   * 5 Weak Mutation 57: com.sleepycat.collections.KeyRange.getSingleKey()Lcom/sleepycat/je/DatabaseEntry;:92 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 6 Weak Mutation 56: com.sleepycat.collections.KeyRange.getSingleKey()Lcom/sleepycat/je/DatabaseEntry;:92 - ReplaceComparisonOperator == -> !=
   * 7 com.sleepycat.collections.KeyRange.getSingleKey()Lcom/sleepycat/je/DatabaseEntry;: I4 Branch 6 IFEQ L92 - false
   */
  @Test
  public void test2()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0);
      assertNotNull(keyRange1);
      
      KeyRange keyRange2 = keyRange0.subRange(keyRange1.beginKey);
      DatabaseEntry databaseEntry1 = keyRange2.getSingleKey();
      assertNotNull(databaseEntry1);
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true single", keyRange1.toString());
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true single", keyRange2.toString());
  }

  //Test case number: 3
  /*
   * 8 covered goals:
   * 1 Weak Mutation 59: com.sleepycat.collections.KeyRange.hasBound()Z:100 - ReplaceComparisonOperator != null -> = null
   * 2 Weak Mutation 62: com.sleepycat.collections.KeyRange.hasBound()Z:100 - ReplaceConstant - 0 -> 1
   * 3 Weak Mutation 61: com.sleepycat.collections.KeyRange.hasBound()Z:100 - ReplaceComparisonOperator != null -> = null
   * 4 com.sleepycat.collections.KeyRange.hasBound()Z: I4 Branch 7 IFNONNULL L100 - false
   * 5 com.sleepycat.collections.KeyRange.hasBound()Z: I7 Branch 8 IFNONNULL L100 - false
   * 6 Weak Mutation 59: com.sleepycat.collections.KeyRange.hasBound()Z:100 - ReplaceComparisonOperator != null -> = null
   * 7 Weak Mutation 62: com.sleepycat.collections.KeyRange.hasBound()Z:100 - ReplaceConstant - 0 -> 1
   * 8 Weak Mutation 61: com.sleepycat.collections.KeyRange.hasBound()Z:100 - ReplaceComparisonOperator != null -> = null
   */
  @Test
  public void test3()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      boolean boolean0 = keyRange0.hasBound();
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 15 covered goals:
   * 1 Weak Mutation 58: com.sleepycat.collections.KeyRange.hasBound()Z:100 - DeleteField: endKeyLcom/sleepycat/je/DatabaseEntry;
   * 2 Weak Mutation 63: com.sleepycat.collections.KeyRange.hasBound()Z:100 - ReplaceConstant - 1 -> 0
   * 3 Weak Mutation 374: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/je/DatabaseEntry;:223 - DeleteStatement: getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B
   * 4 Weak Mutation 382: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:240 - DeleteStatement: getData()[B
   * 5 Weak Mutation 383: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:241 - ReplaceVariable bytes -> ZERO_LENGTH_BYTE_ARRAY
   * 6 Weak Mutation 384: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:241 - ReplaceComparisonOperator != null -> = null
   * 7 com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/je/DatabaseEntry;: root-Branch
   * 8 com.sleepycat.collections.KeyRange.hasBound()Z: I4 Branch 7 IFNONNULL L100 - true
   * 9 com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B: I8 Branch 35 IFNONNULL L241 - false
   * 10 Weak Mutation 58: com.sleepycat.collections.KeyRange.hasBound()Z:100 - DeleteField: endKeyLcom/sleepycat/je/DatabaseEntry;
   * 11 Weak Mutation 63: com.sleepycat.collections.KeyRange.hasBound()Z:100 - ReplaceConstant - 1 -> 0
   * 12 Weak Mutation 374: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/je/DatabaseEntry;:223 - DeleteStatement: getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B
   * 13 Weak Mutation 383: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:241 - ReplaceVariable bytes -> ZERO_LENGTH_BYTE_ARRAY
   * 14 Weak Mutation 382: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:240 - DeleteStatement: getData()[B
   * 15 Weak Mutation 384: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:241 - ReplaceComparisonOperator != null -> = null
   */
  @Test
  public void test4()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      DatabaseEntry databaseEntry1 = KeyRange.copy(databaseEntry0);
      keyRange0.endKey = databaseEntry1;
      boolean boolean0 = keyRange0.hasBound();
      assertEquals(true, keyRange0.hasBound());
      assertEquals(true, boolean0);
  }

  //Test case number: 5
  /*
   * 6 covered goals:
   * 1 Weak Mutation 60: com.sleepycat.collections.KeyRange.hasBound()Z:100 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 2 com.sleepycat.collections.KeyRange.hasBound()Z: I7 Branch 8 IFNONNULL L100 - true
   * 3 Weak Mutation 59: com.sleepycat.collections.KeyRange.hasBound()Z:100 - ReplaceComparisonOperator != null -> = null
   * 4 Weak Mutation 63: com.sleepycat.collections.KeyRange.hasBound()Z:100 - ReplaceConstant - 1 -> 0
   * 5 Weak Mutation 61: com.sleepycat.collections.KeyRange.hasBound()Z:100 - ReplaceComparisonOperator != null -> = null
   * 6 Weak Mutation 60: com.sleepycat.collections.KeyRange.hasBound()Z:100 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   */
  @Test
  public void test5()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0);
      keyRange0.beginKey = keyRange1.endKey;
      boolean boolean0 = keyRange0.hasBound();
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> falsenull false", keyRange0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 59 covered goals:
   * 1 Weak Mutation 65: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 2 Weak Mutation 74: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - DeleteField: beginInclusiveZ
   * 3 Weak Mutation 76: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - DeleteField: endKeyLcom/sleepycat/je/DatabaseEntry;
   * 4 Weak Mutation 85: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - DeleteField: endInclusiveZ
   * 5 Weak Mutation 88: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:110 - DeleteField: singleKeyZ
   * 6 Weak Mutation 90: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:110 - ReplaceConstant -  single -> 
   * 7 com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;: I28 Branch 9 IFEQ L110 - false
   * 8 Weak Mutation 68: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - ReplaceConstant - 32 -> 1
   * 9 Weak Mutation 69: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - ReplaceConstant - 32 -> -1
   * 10 Weak Mutation 70: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - ReplaceConstant - 32 -> 31
   * 11 Weak Mutation 71: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - ReplaceConstant - 32 -> 33
   * 12 Weak Mutation 64: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - ReplaceConstant - [KeyRange  -> 
   * 13 Weak Mutation 66: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 14 Weak Mutation 67: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - ReplaceConstant - 32 -> 0
   * 15 Weak Mutation 77: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 16 Weak Mutation 78: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - ReplaceConstant - 32 -> 0
   * 17 Weak Mutation 79: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - ReplaceConstant - 32 -> 1
   * 18 Weak Mutation 72: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - DeleteStatement: append(C)Ljava/lang/StringBuilder;
   * 19 Weak Mutation 73: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - InsertUnaryOp Negation
   * 20 Weak Mutation 75: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - DeleteStatement: append(Z)Ljava/lang/StringBuilder;
   * 21 Weak Mutation 84: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - InsertUnaryOp Negation
   * 22 Weak Mutation 87: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:110 - InsertUnaryOp Negation
   * 23 Weak Mutation 86: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - DeleteStatement: append(Z)Ljava/lang/StringBuilder;
   * 24 Weak Mutation 81: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - ReplaceConstant - 32 -> 31
   * 25 Weak Mutation 80: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - ReplaceConstant - 32 -> -1
   * 26 Weak Mutation 83: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - DeleteStatement: append(C)Ljava/lang/StringBuilder;
   * 27 Weak Mutation 82: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - ReplaceConstant - 32 -> 33
   * 28 Weak Mutation 92: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - DeleteStatement: toString()Ljava/lang/String;
   * 29 Weak Mutation 89: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:110 - ReplaceComparisonOperator == -> !=
   * 30 Weak Mutation 91: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:110 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 31 Weak Mutation 68: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - ReplaceConstant - 32 -> 1
   * 32 Weak Mutation 69: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - ReplaceConstant - 32 -> -1
   * 33 Weak Mutation 70: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - ReplaceConstant - 32 -> 31
   * 34 Weak Mutation 71: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - ReplaceConstant - 32 -> 33
   * 35 Weak Mutation 64: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - ReplaceConstant - [KeyRange  -> 
   * 36 Weak Mutation 65: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 37 Weak Mutation 66: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 38 Weak Mutation 67: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - ReplaceConstant - 32 -> 0
   * 39 Weak Mutation 76: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - DeleteField: endKeyLcom/sleepycat/je/DatabaseEntry;
   * 40 Weak Mutation 77: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 41 Weak Mutation 78: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - ReplaceConstant - 32 -> 0
   * 42 Weak Mutation 79: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - ReplaceConstant - 32 -> 1
   * 43 Weak Mutation 72: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - DeleteStatement: append(C)Ljava/lang/StringBuilder;
   * 44 Weak Mutation 73: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - InsertUnaryOp Negation
   * 45 Weak Mutation 74: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - DeleteField: beginInclusiveZ
   * 46 Weak Mutation 75: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - DeleteStatement: append(Z)Ljava/lang/StringBuilder;
   * 47 Weak Mutation 85: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - DeleteField: endInclusiveZ
   * 48 Weak Mutation 84: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - InsertUnaryOp Negation
   * 49 Weak Mutation 87: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:110 - InsertUnaryOp Negation
   * 50 Weak Mutation 86: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - DeleteStatement: append(Z)Ljava/lang/StringBuilder;
   * 51 Weak Mutation 81: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - ReplaceConstant - 32 -> 31
   * 52 Weak Mutation 80: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - ReplaceConstant - 32 -> -1
   * 53 Weak Mutation 83: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - DeleteStatement: append(C)Ljava/lang/StringBuilder;
   * 54 Weak Mutation 82: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:109 - ReplaceConstant - 32 -> 33
   * 55 Weak Mutation 92: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:108 - DeleteStatement: toString()Ljava/lang/String;
   * 56 Weak Mutation 89: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:110 - ReplaceComparisonOperator == -> !=
   * 57 Weak Mutation 88: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:110 - DeleteField: singleKeyZ
   * 58 Weak Mutation 91: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:110 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 59 Weak Mutation 90: com.sleepycat.collections.KeyRange.toString()Ljava/lang/String;:110 - ReplaceConstant -  single -> 
   */
  @Test
  public void test6()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0);
      assertNotNull(keyRange1);
      
      String string0 = keyRange1.toString();
      assertNotNull(string0);
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true single", string0);
  }

  //Test case number: 7
  /*
   * 83 covered goals:
   * 1 Weak Mutation 102: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:119 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 100: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:119 - ReplaceComparisonOperator != -> -1
   * 3 Weak Mutation 101: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:119 - ReplaceConstant - 1 -> 0
   * 4 Weak Mutation 99: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:119 - ReplaceComparisonOperator != -> >
   * 5 Weak Mutation 96: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:119 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 6 Weak Mutation 353: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceComparisonOperator >= -> -1
   * 7 Weak Mutation 356: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:212 - ReplaceConstant - -1 -> -2
   * 8 Weak Mutation 354: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:212 - ReplaceConstant - -1 -> 0
   * 9 Weak Mutation 355: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:212 - ReplaceConstant - -1 -> 1
   * 10 Weak Mutation 375: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:230 - ReplaceVariable to -> from
   * 11 Weak Mutation 377: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:230 - DeleteStatement: getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B
   * 12 Weak Mutation 376: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:230 - ReplaceVariable from -> to
   * 13 Weak Mutation 378: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:230 - DeleteStatement: setData([B)V
   * 14 Weak Mutation 381: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:231 - DeleteStatement: setOffset(I)V
   * 15 Weak Mutation 380: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:231 - ReplaceConstant - 0 -> 1
   * 16 Weak Mutation 379: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:231 - ReplaceVariable to -> from
   * 17 Weak Mutation 385: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:242 - DeleteStatement: getSize()I
   * 18 Weak Mutation 387: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - InsertUnaryOp IINC 1 size
   * 19 Weak Mutation 386: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - InsertUnaryOp Negation of size
   * 20 Weak Mutation 389: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - ReplaceComparisonOperator != -> <
   * 21 Weak Mutation 388: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - InsertUnaryOp IINC -1 size
   * 22 Weak Mutation 395: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:247 - InsertUnaryOp IINC -1 size
   * 23 Weak Mutation 394: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:247 - InsertUnaryOp IINC 1 size
   * 24 Weak Mutation 393: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:247 - InsertUnaryOp Negation of size
   * 25 Weak Mutation 402: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - InsertUnaryOp Negation of size
   * 26 Weak Mutation 403: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - DeleteStatement: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
   * 27 Weak Mutation 400: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - ReplaceVariable data -> ZERO_LENGTH_BYTE_ARRAY
   * 28 Weak Mutation 401: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - ReplaceConstant - 0 -> 1
   * 29 Weak Mutation 399: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - ReplaceVariable data -> bytes
   * 30 Weak Mutation 398: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - DeleteStatement: getOffset()I
   * 31 Weak Mutation 397: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - ReplaceVariable bytes -> data
   * 32 Weak Mutation 404: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:250 - ReplaceVariable data -> bytes
   * 33 Weak Mutation 405: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:250 - ReplaceVariable data -> ZERO_LENGTH_BYTE_ARRAY
   * 34 com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V: root-Branch
   * 35 com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z: I12 Branch 11 IFNE L119 - true
   * 36 com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z: I12 Branch 11 IFNE L119 - false
   * 37 com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I: I58 Branch 33 IF_ICMPGE L211 - false
   * 38 com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B: I8 Branch 35 IFNONNULL L241 - true
   * 39 com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B: I19 Branch 36 IFNE L244 - true
   * 40 Weak Mutation 2: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:47 - ReplaceConstant - singleKey out of range -> 
   * 41 Weak Mutation 94: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:118 - DeleteField: singleKeyZ
   * 42 Weak Mutation 97: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:119 - DeleteStatement: compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I
   * 43 Weak Mutation 2: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:47 - ReplaceConstant - singleKey out of range -> 
   * 44 Weak Mutation 94: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:118 - DeleteField: singleKeyZ
   * 45 Weak Mutation 102: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:119 - ReplaceConstant - 0 -> 1
   * 46 Weak Mutation 100: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:119 - ReplaceComparisonOperator != -> -1
   * 47 Weak Mutation 101: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:119 - ReplaceConstant - 1 -> 0
   * 48 Weak Mutation 99: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:119 - ReplaceComparisonOperator != -> >
   * 49 Weak Mutation 96: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:119 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 50 Weak Mutation 97: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:119 - DeleteStatement: compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I
   * 51 Weak Mutation 307: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> size2
   * 52 Weak Mutation 346: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceVariable size2 -> offset1
   * 53 Weak Mutation 345: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceVariable size2 -> offset2
   * 54 Weak Mutation 375: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:230 - ReplaceVariable to -> from
   * 55 Weak Mutation 381: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:231 - DeleteStatement: setOffset(I)V
   * 56 Weak Mutation 380: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:231 - ReplaceConstant - 0 -> 1
   * 57 Weak Mutation 377: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:230 - DeleteStatement: getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B
   * 58 Weak Mutation 376: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:230 - ReplaceVariable from -> to
   * 59 Weak Mutation 379: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:231 - ReplaceVariable to -> from
   * 60 Weak Mutation 378: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:230 - DeleteStatement: setData([B)V
   * 61 Weak Mutation 356: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:212 - ReplaceConstant - -1 -> -2
   * 62 Weak Mutation 353: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceComparisonOperator >= -> -1
   * 63 Weak Mutation 354: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:212 - ReplaceConstant - -1 -> 0
   * 64 Weak Mutation 355: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:212 - ReplaceConstant - -1 -> 1
   * 65 Weak Mutation 402: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - InsertUnaryOp Negation of size
   * 66 Weak Mutation 403: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - DeleteStatement: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
   * 67 Weak Mutation 400: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - ReplaceVariable data -> ZERO_LENGTH_BYTE_ARRAY
   * 68 Weak Mutation 401: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - ReplaceConstant - 0 -> 1
   * 69 Weak Mutation 404: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:250 - ReplaceVariable data -> bytes
   * 70 Weak Mutation 405: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:250 - ReplaceVariable data -> ZERO_LENGTH_BYTE_ARRAY
   * 71 Weak Mutation 395: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:247 - InsertUnaryOp IINC -1 size
   * 72 Weak Mutation 394: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:247 - InsertUnaryOp IINC 1 size
   * 73 Weak Mutation 393: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:247 - InsertUnaryOp Negation of size
   * 74 Weak Mutation 399: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - ReplaceVariable data -> bytes
   * 75 Weak Mutation 398: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - DeleteStatement: getOffset()I
   * 76 Weak Mutation 397: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - ReplaceVariable bytes -> data
   * 77 Weak Mutation 387: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - InsertUnaryOp IINC 1 size
   * 78 Weak Mutation 386: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - InsertUnaryOp Negation of size
   * 79 Weak Mutation 385: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:242 - DeleteStatement: getSize()I
   * 80 Weak Mutation 389: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - ReplaceComparisonOperator != -> <
   * 81 Weak Mutation 388: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - InsertUnaryOp IINC -1 size
   * 82 com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;: I5 Branch 1 IFNE L46 - false
   * 83 com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z: I4 Branch 10 IFEQ L118 - false
   */
  @Test
  public void test7()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0);
      DatabaseEntry databaseEntry1 = new DatabaseEntry();
      KeyRange keyRange2 = keyRange1.subRange(databaseEntry1);
      DatabaseEntry databaseEntry2 = new DatabaseEntry(keyRange1.ZERO_LENGTH_BYTE_ARRAY);
      KeyRange.copy(databaseEntry2, keyRange1.beginKey);
      try {
        keyRange1.subRange(keyRange2.beginKey);
        fail("Expecting exception: KeyRangeException");
      } catch(KeyRangeException e) {
        /*
         * singleKey out of range
         */
      }
  }

  //Test case number: 8
  /*
   * 6 covered goals:
   * 1 Weak Mutation 117: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:131 - ReplaceComparisonOperator != -> >
   * 2 Weak Mutation 319: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceComparisonOperator >= -> ==
   * 3 Weak Mutation 120: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:131 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 117: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:131 - ReplaceComparisonOperator != -> >
   * 5 Weak Mutation 306: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> offset1
   * 6 Weak Mutation 319: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceComparisonOperator >= -> ==
   */
  @Test
  public void test8()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0);
      assertNotNull(keyRange1);
      
      DatabaseEntry databaseEntry1 = new DatabaseEntry(keyRange1.ZERO_LENGTH_BYTE_ARRAY, (-1187), (-1187));
      boolean boolean0 = keyRange1.check(databaseEntry1, true);
      assertEquals(false, boolean0);
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true single", keyRange1.toString());
  }

  //Test case number: 9
  /*
   * 125 covered goals:
   * 1 Weak Mutation 139: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:157 - InsertUnaryOp Negation of inclusive
   * 2 Weak Mutation 140: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:157 - ReplaceComparisonOperator == -> !=
   * 3 Weak Mutation 141: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 4 Weak Mutation 142: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - DeleteStatement: compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I
   * 5 Weak Mutation 144: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - ReplaceComparisonOperator <= -> <
   * 6 Weak Mutation 147: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - ReplaceConstant - 0 -> 1
   * 7 com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I24 Branch 16 IFEQ L133 - true
   * 8 com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I13 Branch 19 IFNE L157 - false
   * 9 com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I15 Branch 20 IFEQ L157 - false
   * 10 com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I23 Branch 21 IFLE L158 - true
   * 11 Weak Mutation 25: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:70 - ReplaceConstant - beginKey out of range -> 
   * 12 Weak Mutation 25: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:70 - ReplaceConstant - beginKey out of range -> 
   * 13 Weak Mutation 136: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:157 - InsertUnaryOp Negation
   * 14 Weak Mutation 139: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:157 - InsertUnaryOp Negation of inclusive
   * 15 Weak Mutation 138: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:157 - ReplaceComparisonOperator != -> ==
   * 16 Weak Mutation 141: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 17 Weak Mutation 140: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:157 - ReplaceComparisonOperator == -> !=
   * 18 Weak Mutation 142: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - DeleteStatement: compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I
   * 19 Weak Mutation 133: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:155 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 20 Weak Mutation 132: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - ReplaceConstant - 0 -> 1
   * 21 Weak Mutation 144: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - ReplaceComparisonOperator <= -> <
   * 22 Weak Mutation 147: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - ReplaceConstant - 0 -> 1
   * 23 Weak Mutation 207: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable offset1 -> size2
   * 24 Weak Mutation 201: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceConstant - 255 -> -1
   * 25 Weak Mutation 200: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceConstant - 255 -> 1
   * 26 Weak Mutation 203: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceConstant - 255 -> 256
   * 27 Weak Mutation 202: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceConstant - 255 -> 254
   * 28 Weak Mutation 199: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceConstant - 255 -> 0
   * 29 Weak Mutation 220: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceArithmeticOperator + -> -
   * 30 Weak Mutation 221: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceArithmeticOperator + -> %
   * 31 Weak Mutation 222: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceArithmeticOperator + -> /
   * 32 Weak Mutation 223: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceArithmeticOperator + -> *
   * 33 Weak Mutation 216: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable i -> size1
   * 34 Weak Mutation 217: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - InsertUnaryOp Negation of i
   * 35 Weak Mutation 218: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - InsertUnaryOp IINC 1 i
   * 36 Weak Mutation 219: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - InsertUnaryOp IINC -1 i
   * 37 Weak Mutation 212: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - InsertUnaryOp IINC -1 offset1
   * 38 Weak Mutation 213: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable i -> offset2
   * 39 Weak Mutation 214: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable i -> offset1
   * 40 Weak Mutation 215: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable i -> size2
   * 41 Weak Mutation 208: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable offset1 -> size1
   * 42 Weak Mutation 209: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable offset1 -> i
   * 43 Weak Mutation 210: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - InsertUnaryOp Negation of offset1
   * 44 Weak Mutation 211: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - InsertUnaryOp IINC 1 offset1
   * 45 Weak Mutation 239: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - InsertUnaryOp IINC 1 offset2
   * 46 Weak Mutation 238: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - InsertUnaryOp Negation of offset2
   * 47 Weak Mutation 237: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable offset2 -> i
   * 48 Weak Mutation 236: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable offset2 -> size1
   * 49 Weak Mutation 235: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable offset2 -> size2
   * 50 Weak Mutation 234: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable offset2 -> b1
   * 51 Weak Mutation 230: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceConstant - 255 -> 256
   * 52 Weak Mutation 229: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceConstant - 255 -> 254
   * 53 Weak Mutation 228: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceConstant - 255 -> -1
   * 54 Weak Mutation 227: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceConstant - 255 -> 1
   * 55 Weak Mutation 226: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceConstant - 255 -> 0
   * 56 Weak Mutation 225: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceBitwiseOperator & -> ^
   * 57 Weak Mutation 224: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceBitwiseOperator & -> |
   * 58 Weak Mutation 254: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceBitwiseOperator & -> ^
   * 59 Weak Mutation 255: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b1 -> offset2
   * 60 Weak Mutation 252: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceArithmeticOperator + -> *
   * 61 Weak Mutation 253: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceBitwiseOperator & -> |
   * 62 Weak Mutation 250: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceArithmeticOperator + -> %
   * 63 Weak Mutation 251: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceArithmeticOperator + -> /
   * 64 Weak Mutation 248: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - InsertUnaryOp IINC -1 i
   * 65 Weak Mutation 249: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceArithmeticOperator + -> -
   * 66 Weak Mutation 246: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - InsertUnaryOp Negation of i
   * 67 Weak Mutation 247: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - InsertUnaryOp IINC 1 i
   * 68 Weak Mutation 244: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable i -> size2
   * 69 Weak Mutation 245: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable i -> size1
   * 70 Weak Mutation 242: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable i -> offset1
   * 71 Weak Mutation 243: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable i -> b1
   * 72 Weak Mutation 240: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - InsertUnaryOp IINC -1 offset2
   * 73 Weak Mutation 241: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable i -> offset2
   * 74 Weak Mutation 274: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceComparisonOperator >= -> >
   * 75 Weak Mutation 272: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - InsertUnaryOp IINC -1 b2
   * 76 Weak Mutation 279: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b1 -> offset2
   * 77 Weak Mutation 283: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b1 -> size1
   * 78 Weak Mutation 282: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b1 -> size2
   * 79 Weak Mutation 280: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b1 -> offset1
   * 80 Weak Mutation 287: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - InsertUnaryOp IINC -1 b1
   * 81 Weak Mutation 286: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - InsertUnaryOp IINC 1 b1
   * 82 Weak Mutation 285: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - InsertUnaryOp Negation of b1
   * 83 Weak Mutation 284: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b1 -> i
   * 84 Weak Mutation 258: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b1 -> size2
   * 85 Weak Mutation 259: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b1 -> size1
   * 86 Weak Mutation 256: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b1 -> offset1
   * 87 Weak Mutation 262: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - InsertUnaryOp IINC 1 b1
   * 88 Weak Mutation 263: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - InsertUnaryOp IINC -1 b1
   * 89 Weak Mutation 260: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b1 -> i
   * 90 Weak Mutation 261: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - InsertUnaryOp Negation of b1
   * 91 Weak Mutation 267: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b2 -> size2
   * 92 Weak Mutation 264: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b2 -> offset2
   * 93 Weak Mutation 265: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b2 -> offset1
   * 94 Weak Mutation 270: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - InsertUnaryOp Negation of b2
   * 95 Weak Mutation 271: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - InsertUnaryOp IINC 1 b2
   * 96 Weak Mutation 268: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b2 -> size1
   * 97 Weak Mutation 269: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b2 -> i
   * 98 Weak Mutation 305: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> offset2
   * 99 Weak Mutation 304: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> size1
   * 100 Weak Mutation 288: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b2 -> offset2
   * 101 Weak Mutation 289: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b2 -> offset1
   * 102 Weak Mutation 291: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b2 -> size2
   * 103 Weak Mutation 292: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b2 -> size1
   * 104 Weak Mutation 293: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b2 -> i
   * 105 Weak Mutation 294: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - InsertUnaryOp Negation of b2
   * 106 Weak Mutation 295: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - InsertUnaryOp IINC 1 b2
   * 107 Weak Mutation 296: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - InsertUnaryOp IINC -1 b2
   * 108 Weak Mutation 298: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceComparisonOperator <= -> <
   * 109 Weak Mutation 301: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> offset2
   * 110 Weak Mutation 302: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> offset1
   * 111 Weak Mutation 303: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> size2
   * 112 Weak Mutation 337: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceComparisonOperator < -> -2
   * 113 Weak Mutation 324: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> size2
   * 114 Weak Mutation 322: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> offset2
   * 115 Weak Mutation 323: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> offset1
   * 116 Weak Mutation 332: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size2 -> i
   * 117 Weak Mutation 330: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size2 -> offset1
   * 118 Weak Mutation 329: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size2 -> offset2
   * 119 Weak Mutation 364: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceVariable size2 -> offset1
   * 120 Weak Mutation 363: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceVariable size2 -> offset2
   * 121 com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I: I30 Branch 29 IF_ICMPGE L205 - true
   * 122 com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I: I39 Branch 30 IF_ICMPLE L207 - true
   * 123 com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I: I53 Branch 32 IF_ICMPLT L201 - true
   * 124 com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I4 Branch 18 IFNONNULL L155 - true
   * 125 com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;: I22 Branch 3 IFNE L69 - false
   */
  @Test
  public void test9()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry(keyRange0.ZERO_LENGTH_BYTE_ARRAY);
      keyRange0.beginKey = databaseEntry0;
      try {
        keyRange0.subRange(databaseEntry0, true, databaseEntry0, false);
        fail("Expecting exception: KeyRangeException");
      } catch(KeyRangeException e) {
        /*
         * beginKey out of range
         */
      }
  }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 Weak Mutation 143: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - ReplaceComparisonOperator <= -> ==
   * 2 com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z: I24 Branch 12 IFEQ L121 - true
   * 3 Weak Mutation 147: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 110: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 143: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - ReplaceComparisonOperator <= -> ==
   */
  @Test
  public void test10()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0);
      keyRange0.beginKey = keyRange1.endKey;
      DatabaseEntry databaseEntry1 = new DatabaseEntry(keyRange1.ZERO_LENGTH_BYTE_ARRAY, (-1), (-1));
      boolean boolean0 = keyRange0.check(databaseEntry1);
      assertEquals(true, keyRange0.hasBound());
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 28 covered goals:
   * 1 Weak Mutation 172: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - ReplaceComparisonOperator > -> !=
   * 2 com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I15 Branch 25 IFEQ L172 - true
   * 3 Weak Mutation 19: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:69 - ReplaceVariable beginInclusive -> endInclusive
   * 4 Weak Mutation 141: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 5 Weak Mutation 142: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - DeleteStatement: compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I
   * 6 Weak Mutation 145: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - ReplaceComparisonOperator <= -> -1
   * 7 Weak Mutation 146: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - ReplaceConstant - 1 -> 0
   * 8 Weak Mutation 153: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:160 - ReplaceConstant - 1 -> 0
   * 9 Weak Mutation 155: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:170 - DeleteField: endKeyLcom/sleepycat/je/DatabaseEntry;
   * 10 Weak Mutation 158: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:172 - InsertUnaryOp Negation
   * 11 Weak Mutation 145: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - ReplaceComparisonOperator <= -> -1
   * 12 Weak Mutation 146: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:158 - ReplaceConstant - 1 -> 0
   * 13 Weak Mutation 148: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:160 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 14 Weak Mutation 149: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:160 - DeleteStatement: compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I
   * 15 Weak Mutation 150: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:160 - ReplaceComparisonOperator < -> !=
   * 16 Weak Mutation 171: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - DeleteStatement: compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I
   * 17 Weak Mutation 170: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - DeleteField: endKeyLcom/sleepycat/je/DatabaseEntry;
   * 18 Weak Mutation 175: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - ReplaceConstant - 1 -> 0
   * 19 Weak Mutation 172: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - ReplaceComparisonOperator > -> !=
   * 20 Weak Mutation 162: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:172 - ReplaceComparisonOperator == -> !=
   * 21 Weak Mutation 161: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:172 - InsertUnaryOp Negation of inclusive
   * 22 Weak Mutation 160: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:172 - ReplaceComparisonOperator != -> ==
   * 23 com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I15 Branch 20 IFEQ L157 - true
   * 24 com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I23 Branch 21 IFLE L158 - false
   * 25 com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I36 Branch 22 IFLT L160 - false
   * 26 com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I4 Branch 23 IFNONNULL L170 - true
   * 27 com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I13 Branch 24 IFNE L172 - false
   * 28 com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I36 Branch 27 IFGT L175 - false
   */
  @Test
  public void test11()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry(keyRange0.ZERO_LENGTH_BYTE_ARRAY);
      keyRange0.beginKey = databaseEntry0;
      databaseEntry0.setSize((-1202));
      DatabaseEntry databaseEntry1 = new DatabaseEntry(keyRange0.ZERO_LENGTH_BYTE_ARRAY, (-1202), (-528));
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry1, true, databaseEntry1, false);
      boolean boolean0 = keyRange1.checkEnd(keyRange0.beginKey, false);
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=-1202> falsenull false", keyRange0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 6 covered goals:
   * 1 Weak Mutation 152: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:160 - ReplaceComparisonOperator < -> -2
   * 2 Weak Mutation 154: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:160 - ReplaceConstant - 0 -> 1
   * 3 com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I36 Branch 22 IFLT L160 - true
   * 4 Weak Mutation 132: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 152: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:160 - ReplaceComparisonOperator < -> -2
   * 6 Weak Mutation 154: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:160 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test12()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0);
      keyRange0.beginKey = keyRange1.endKey;
      DatabaseEntry databaseEntry1 = new DatabaseEntry(keyRange1.ZERO_LENGTH_BYTE_ARRAY, (-1), (-1));
      boolean boolean0 = keyRange0.check(databaseEntry1, false);
      assertEquals(true, keyRange0.hasBound());
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 13 covered goals:
   * 1 Weak Mutation 159: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:172 - DeleteField: endInclusiveZ
   * 2 Weak Mutation 171: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - DeleteStatement: compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I
   * 3 Weak Mutation 170: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - DeleteField: endKeyLcom/sleepycat/je/DatabaseEntry;
   * 4 Weak Mutation 175: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - ReplaceConstant - 1 -> 0
   * 5 Weak Mutation 173: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - ReplaceComparisonOperator > -> >=
   * 6 com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I13 Branch 24 IFNE L172 - true
   * 7 com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I36 Branch 27 IFGT L175 - false
   * 8 Weak Mutation 151: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:160 - ReplaceComparisonOperator < -> <=
   * 9 Weak Mutation 137: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:157 - DeleteField: beginInclusiveZ
   * 10 Weak Mutation 159: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:172 - DeleteField: endInclusiveZ
   * 11 Weak Mutation 151: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:160 - ReplaceComparisonOperator < -> <=
   * 12 Weak Mutation 173: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - ReplaceComparisonOperator > -> >=
   * 13 com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I13 Branch 19 IFNE L157 - true
   */
  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, 32, (-1));
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0, true, databaseEntry0, true);
      assertNotNull(keyRange1);
      
      KeyRange keyRange2 = keyRange1.subRange(databaseEntry0);
      assertEquals(true, keyRange1.beginInclusive);
      assertEquals(false, keyRange0.hasBound());
      assertNotNull(keyRange2);
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=32 size=-1> true<DatabaseEntry dlen=0 doff=0 doff=0 offset=32 size=-1> true single", keyRange2.toString());
      assertEquals(true, keyRange1.endInclusive);
  }

  //Test case number: 14
  /*
   * 31 covered goals:
   * 1 Weak Mutation 168: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:173 - ReplaceConstant - 1 -> 0
   * 2 Weak Mutation 167: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:173 - ReplaceComparisonOperator >= -> -1
   * 3 com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I23 Branch 26 IFGE L173 - false
   * 4 Weak Mutation 21: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:69 - InsertUnaryOp IINC 1 beginInclusive
   * 5 Weak Mutation 20: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:69 - InsertUnaryOp Negation of beginInclusive
   * 6 Weak Mutation 23: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:69 - DeleteStatement: check(Lcom/sleepycat/je/DatabaseEntry;Z)Z
   * 7 Weak Mutation 22: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:69 - InsertUnaryOp IINC -1 beginInclusive
   * 8 Weak Mutation 24: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:69 - ReplaceComparisonOperator != -> ==
   * 9 Weak Mutation 127: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - InsertUnaryOp IINC 1 inclusive
   * 10 Weak Mutation 126: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - InsertUnaryOp Negation of inclusive
   * 11 Weak Mutation 125: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - ReplaceComparisonOperator == -> !=
   * 12 Weak Mutation 124: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - DeleteStatement: checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z
   * 13 Weak Mutation 123: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - InsertUnaryOp IINC -1 inclusive
   * 14 Weak Mutation 122: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - InsertUnaryOp IINC 1 inclusive
   * 15 Weak Mutation 121: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - InsertUnaryOp Negation of inclusive
   * 16 Weak Mutation 139: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:157 - InsertUnaryOp Negation of inclusive
   * 17 Weak Mutation 140: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:157 - ReplaceComparisonOperator == -> !=
   * 18 Weak Mutation 129: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - DeleteStatement: checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z
   * 19 Weak Mutation 128: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - InsertUnaryOp IINC -1 inclusive
   * 20 Weak Mutation 131: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - ReplaceConstant - 1 -> 0
   * 21 Weak Mutation 130: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:133 - ReplaceComparisonOperator == -> !=
   * 22 Weak Mutation 319: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceComparisonOperator >= -> ==
   * 23 Weak Mutation 356: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:212 - ReplaceConstant - -1 -> -2
   * 24 Weak Mutation 353: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceComparisonOperator >= -> -1
   * 25 Weak Mutation 354: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:212 - ReplaceConstant - -1 -> 0
   * 26 Weak Mutation 355: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:212 - ReplaceConstant - -1 -> 1
   * 27 Weak Mutation 168: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:173 - ReplaceConstant - 1 -> 0
   * 28 Weak Mutation 163: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:173 - DeleteField: endKeyLcom/sleepycat/je/DatabaseEntry;
   * 29 Weak Mutation 167: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:173 - ReplaceComparisonOperator >= -> -1
   * 30 Weak Mutation 164: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:173 - DeleteStatement: compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I
   * 31 com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I15 Branch 25 IFEQ L172 - false
   */
  @Test
  public void test14()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry(keyRange0.ZERO_LENGTH_BYTE_ARRAY);
      keyRange0.beginKey = databaseEntry0;
      databaseEntry0.setSize((-1202));
      DatabaseEntry databaseEntry1 = new DatabaseEntry(keyRange0.ZERO_LENGTH_BYTE_ARRAY, (-1202), (-528));
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry1, false, databaseEntry1, false);
      boolean boolean0 = keyRange1.checkEnd(keyRange0.beginKey, true);
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=-1202> falsenull false", keyRange0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 29 covered goals:
   * 1 Weak Mutation 174: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - ReplaceComparisonOperator > -> -2
   * 2 Weak Mutation 176: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - ReplaceConstant - 0 -> 1
   * 3 com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I36 Branch 27 IFGT L175 - true
   * 4 Weak Mutation 26: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:72 - ReplaceVariable endKey -> beginKey
   * 5 Weak Mutation 29: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:74 - InsertUnaryOp Negation
   * 6 Weak Mutation 28: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:73 - DeleteField: endKeyLcom/sleepycat/je/DatabaseEntry;
   * 7 Weak Mutation 30: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:74 - DeleteField: endInclusiveZ
   * 8 Weak Mutation 110: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - ReplaceConstant - 0 -> 1
   * 9 Weak Mutation 137: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:157 - DeleteField: beginInclusiveZ
   * 10 Weak Mutation 136: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:157 - InsertUnaryOp Negation
   * 11 Weak Mutation 138: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:157 - ReplaceComparisonOperator != -> ==
   * 12 Weak Mutation 133: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:155 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 13 Weak Mutation 153: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:160 - ReplaceConstant - 1 -> 0
   * 14 Weak Mutation 159: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:172 - DeleteField: endInclusiveZ
   * 15 Weak Mutation 148: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:160 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 16 Weak Mutation 149: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:160 - DeleteStatement: compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I
   * 17 Weak Mutation 150: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:160 - ReplaceComparisonOperator < -> !=
   * 18 Weak Mutation 171: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - DeleteStatement: compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I
   * 19 Weak Mutation 170: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - DeleteField: endKeyLcom/sleepycat/je/DatabaseEntry;
   * 20 Weak Mutation 338: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceComparisonOperator < -> <=
   * 21 Weak Mutation 15: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:67 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 22 Weak Mutation 17: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:68 - DeleteField: beginInclusiveZ
   * 23 Weak Mutation 29: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:74 - InsertUnaryOp Negation
   * 24 Weak Mutation 28: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:73 - DeleteField: endKeyLcom/sleepycat/je/DatabaseEntry;
   * 25 Weak Mutation 30: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:74 - DeleteField: endInclusiveZ
   * 26 Weak Mutation 174: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - ReplaceComparisonOperator > -> -2
   * 27 Weak Mutation 176: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:175 - ReplaceConstant - 0 -> 1
   * 28 com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z: I29 Branch 13 IFEQ L121 - true
   * 29 com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;: I33 Branch 4 IFNONNULL L72 - false
   */
  @Test
  public void test15()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0);
      assertNotNull(keyRange1);
      
      KeyRange keyRange2 = keyRange1.subRange(keyRange0.beginKey, false, (DatabaseEntry) null, true);
      assertNotNull(keyRange2);
      
      DatabaseEntry databaseEntry1 = new DatabaseEntry(keyRange0.ZERO_LENGTH_BYTE_ARRAY);
      boolean boolean0 = keyRange2.check(databaseEntry1);
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true", keyRange2.toString());
      assertEquals(true, keyRange2.endInclusive);
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true single", keyRange1.toString());
      assertEquals(true, keyRange2.beginInclusive);
      assertEquals(false, boolean0);
  }

  //Test case number: 16
  /*
   * 9 covered goals:
   * 1 Weak Mutation 336: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceComparisonOperator < -> !=
   * 2 Weak Mutation 341: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceVariable size1 -> size2
   * 3 Weak Mutation 351: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceComparisonOperator >= -> ==
   * 4 Weak Mutation 347: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceVariable size2 -> size1
   * 5 Weak Mutation 372: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:214 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 371: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceComparisonOperator <= -> -1
   * 7 Weak Mutation 359: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceVariable size1 -> size2
   * 8 Weak Mutation 365: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceVariable size2 -> size1
   * 9 Weak Mutation 336: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceComparisonOperator < -> !=
   */
  @Test
  public void test16()  throws Throwable  {
      int int0 = KeyRange.compareBytes((byte[]) null, (-1834), 1455, (byte[]) null, (-1834), (-33));
      assertEquals(1, int0);
  }

  //Test case number: 17
  /*
   * 33 covered goals:
   * 1 Weak Mutation 205: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable data1 -> data2
   * 2 Weak Mutation 204: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable data1 -> ZERO_LENGTH_BYTE_ARRAY
   * 3 Weak Mutation 231: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable data2 -> data1
   * 4 Weak Mutation 155: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:170 - DeleteField: endKeyLcom/sleepycat/je/DatabaseEntry;
   * 5 Weak Mutation 158: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:172 - InsertUnaryOp Negation
   * 6 Weak Mutation 169: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:173 - ReplaceConstant - 0 -> 1
   * 7 Weak Mutation 163: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:173 - DeleteField: endKeyLcom/sleepycat/je/DatabaseEntry;
   * 8 Weak Mutation 162: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:172 - ReplaceComparisonOperator == -> !=
   * 9 Weak Mutation 161: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:172 - InsertUnaryOp Negation of inclusive
   * 10 Weak Mutation 160: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:172 - ReplaceComparisonOperator != -> ==
   * 11 Weak Mutation 166: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:173 - ReplaceComparisonOperator >= -> >
   * 12 Weak Mutation 164: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:173 - DeleteStatement: compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I
   * 13 Weak Mutation 187: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:188 - ReplaceVariable key1 -> key2
   * 14 Weak Mutation 185: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:188 - ReplaceVariable key1 -> key2
   * 15 Weak Mutation 191: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:189 - ReplaceVariable key2 -> key1
   * 16 Weak Mutation 189: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:188 - ReplaceVariable key1 -> key2
   * 17 Weak Mutation 193: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:189 - ReplaceVariable key2 -> key1
   * 18 Weak Mutation 195: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:189 - ReplaceVariable key2 -> key1
   * 19 Weak Mutation 288: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b2 -> offset2
   * 20 Weak Mutation 340: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceVariable size1 -> offset1
   * 21 Weak Mutation 339: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceVariable size1 -> offset2
   * 22 Weak Mutation 346: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceVariable size2 -> offset1
   * 23 Weak Mutation 345: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceVariable size2 -> offset2
   * 24 Weak Mutation 357: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceVariable size1 -> offset2
   * 25 Weak Mutation 358: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceVariable size1 -> offset1
   * 26 Weak Mutation 364: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceVariable size2 -> offset1
   * 27 Weak Mutation 363: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceVariable size2 -> offset2
   * 28 Weak Mutation 169: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:173 - ReplaceConstant - 0 -> 1
   * 29 Weak Mutation 166: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:173 - ReplaceComparisonOperator >= -> >
   * 30 Weak Mutation 205: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable data1 -> data2
   * 31 Weak Mutation 204: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable data1 -> ZERO_LENGTH_BYTE_ARRAY
   * 32 Weak Mutation 231: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable data2 -> data1
   * 33 com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z: I23 Branch 26 IFGE L173 - true
   */
  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = KeyRange.ZERO_LENGTH_BYTE_ARRAY;
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      DatabaseEntry databaseEntry1 = KeyRange.copy(databaseEntry0);
      assertNotNull(databaseEntry1);
      
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0);
      keyRange0.endKey = keyRange1.endKey;
      boolean boolean0 = keyRange0.checkEnd(databaseEntry1, true);
      assertEquals(true, keyRange0.hasBound());
      assertEquals(false, boolean0);
  }

  //Test case number: 18
  /*
   * 23 covered goals:
   * 1 Weak Mutation 206: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable offset1 -> offset2
   * 2 Weak Mutation 233: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable offset2 -> offset1
   * 3 Weak Mutation 232: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable data2 -> ZERO_LENGTH_BYTE_ARRAY
   * 4 Weak Mutation 220: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceArithmeticOperator + -> -
   * 5 Weak Mutation 223: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceArithmeticOperator + -> *
   * 6 Weak Mutation 213: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable i -> offset2
   * 7 Weak Mutation 237: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable offset2 -> i
   * 8 Weak Mutation 252: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceArithmeticOperator + -> *
   * 9 Weak Mutation 249: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceArithmeticOperator + -> -
   * 10 Weak Mutation 241: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable i -> offset2
   * 11 Weak Mutation 274: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceComparisonOperator >= -> >
   * 12 Weak Mutation 282: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b1 -> size2
   * 13 Weak Mutation 305: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> offset2
   * 14 Weak Mutation 304: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> size1
   * 15 Weak Mutation 293: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b2 -> i
   * 16 Weak Mutation 298: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceComparisonOperator <= -> <
   * 17 Weak Mutation 301: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> offset2
   * 18 Weak Mutation 302: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> offset1
   * 19 Weak Mutation 303: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> size2
   * 20 Weak Mutation 322: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> offset2
   * 21 Weak Mutation 206: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable offset1 -> offset2
   * 22 Weak Mutation 233: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable offset2 -> offset1
   * 23 Weak Mutation 232: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable data2 -> ZERO_LENGTH_BYTE_ARRAY
   */
  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try {
        KeyRange.compareBytes(byteArray0, 1, 328, byteArray0, 0, (int) (byte)121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 5
         */
      }
  }

  //Test case number: 19
  /*
   * 16 covered goals:
   * 1 Weak Mutation 275: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 257: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b1 -> b2
   * 3 Weak Mutation 266: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b2 -> b1
   * 4 Weak Mutation 278: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:206 - ReplaceConstant - -1 -> -2
   * 5 Weak Mutation 277: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:206 - ReplaceConstant - -1 -> 1
   * 6 Weak Mutation 276: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:206 - ReplaceConstant - -1 -> 0
   * 7 com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I: I30 Branch 29 IF_ICMPGE L205 - false
   * 8 Weak Mutation 258: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b1 -> size2
   * 9 Weak Mutation 264: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b2 -> offset2
   * 10 Weak Mutation 269: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b2 -> i
   * 11 Weak Mutation 275: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceComparisonOperator >= -> -1
   * 12 Weak Mutation 278: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:206 - ReplaceConstant - -1 -> -2
   * 13 Weak Mutation 277: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:206 - ReplaceConstant - -1 -> 1
   * 14 Weak Mutation 276: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:206 - ReplaceConstant - -1 -> 0
   * 15 Weak Mutation 257: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b1 -> b2
   * 16 Weak Mutation 266: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b2 -> b1
   */
  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      int int0 = KeyRange.compareBytes(byteArray0, 1, (int) (byte)1, byteArray0, 0, (int) (byte)1);
      assertEquals((-1), int0);
  }

  //Test case number: 20
  /*
   * 108 covered goals:
   * 1 Weak Mutation 273: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceComparisonOperator >= -> ==
   * 2 Weak Mutation 281: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b1 -> b2
   * 3 Weak Mutation 290: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b2 -> b1
   * 4 Weak Mutation 299: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceComparisonOperator <= -> -1
   * 5 Weak Mutation 300: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:208 - ReplaceConstant - 1 -> 0
   * 6 com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I: I39 Branch 30 IF_ICMPLE L207 - false
   * 7 Weak Mutation 204: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable data1 -> ZERO_LENGTH_BYTE_ARRAY
   * 8 Weak Mutation 207: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable offset1 -> size2
   * 9 Weak Mutation 206: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable offset1 -> offset2
   * 10 Weak Mutation 201: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceConstant - 255 -> -1
   * 11 Weak Mutation 200: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceConstant - 255 -> 1
   * 12 Weak Mutation 203: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceConstant - 255 -> 256
   * 13 Weak Mutation 202: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceConstant - 255 -> 254
   * 14 Weak Mutation 199: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceConstant - 255 -> 0
   * 15 Weak Mutation 221: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceArithmeticOperator + -> %
   * 16 Weak Mutation 222: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceArithmeticOperator + -> /
   * 17 Weak Mutation 216: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable i -> size1
   * 18 Weak Mutation 217: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - InsertUnaryOp Negation of i
   * 19 Weak Mutation 218: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - InsertUnaryOp IINC 1 i
   * 20 Weak Mutation 219: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - InsertUnaryOp IINC -1 i
   * 21 Weak Mutation 212: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - InsertUnaryOp IINC -1 offset1
   * 22 Weak Mutation 214: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable i -> offset1
   * 23 Weak Mutation 215: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable i -> size2
   * 24 Weak Mutation 208: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable offset1 -> size1
   * 25 Weak Mutation 209: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceVariable offset1 -> i
   * 26 Weak Mutation 210: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - InsertUnaryOp Negation of offset1
   * 27 Weak Mutation 211: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - InsertUnaryOp IINC 1 offset1
   * 28 Weak Mutation 239: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - InsertUnaryOp IINC 1 offset2
   * 29 Weak Mutation 238: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - InsertUnaryOp Negation of offset2
   * 30 Weak Mutation 236: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable offset2 -> size1
   * 31 Weak Mutation 235: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable offset2 -> size2
   * 32 Weak Mutation 234: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable offset2 -> b1
   * 33 Weak Mutation 233: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable offset2 -> offset1
   * 34 Weak Mutation 232: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable data2 -> ZERO_LENGTH_BYTE_ARRAY
   * 35 Weak Mutation 230: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceConstant - 255 -> 256
   * 36 Weak Mutation 229: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceConstant - 255 -> 254
   * 37 Weak Mutation 228: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceConstant - 255 -> -1
   * 38 Weak Mutation 227: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceConstant - 255 -> 1
   * 39 Weak Mutation 226: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceConstant - 255 -> 0
   * 40 Weak Mutation 225: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceBitwiseOperator & -> ^
   * 41 Weak Mutation 224: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:203 - ReplaceBitwiseOperator & -> |
   * 42 Weak Mutation 254: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceBitwiseOperator & -> ^
   * 43 Weak Mutation 255: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b1 -> offset2
   * 44 Weak Mutation 253: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceBitwiseOperator & -> |
   * 45 Weak Mutation 250: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceArithmeticOperator + -> %
   * 46 Weak Mutation 251: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceArithmeticOperator + -> /
   * 47 Weak Mutation 248: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - InsertUnaryOp IINC -1 i
   * 48 Weak Mutation 246: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - InsertUnaryOp Negation of i
   * 49 Weak Mutation 247: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - InsertUnaryOp IINC 1 i
   * 50 Weak Mutation 244: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable i -> size2
   * 51 Weak Mutation 245: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable i -> size1
   * 52 Weak Mutation 242: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable i -> offset1
   * 53 Weak Mutation 243: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - ReplaceVariable i -> b1
   * 54 Weak Mutation 240: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:204 - InsertUnaryOp IINC -1 offset2
   * 55 Weak Mutation 272: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - InsertUnaryOp IINC -1 b2
   * 56 Weak Mutation 279: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b1 -> offset2
   * 57 Weak Mutation 283: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b1 -> size1
   * 58 Weak Mutation 280: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b1 -> offset1
   * 59 Weak Mutation 287: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - InsertUnaryOp IINC -1 b1
   * 60 Weak Mutation 286: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - InsertUnaryOp IINC 1 b1
   * 61 Weak Mutation 285: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - InsertUnaryOp Negation of b1
   * 62 Weak Mutation 284: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b1 -> i
   * 63 Weak Mutation 259: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b1 -> size1
   * 64 Weak Mutation 256: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b1 -> offset1
   * 65 Weak Mutation 257: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b1 -> b2
   * 66 Weak Mutation 262: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - InsertUnaryOp IINC 1 b1
   * 67 Weak Mutation 263: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - InsertUnaryOp IINC -1 b1
   * 68 Weak Mutation 260: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b1 -> i
   * 69 Weak Mutation 261: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - InsertUnaryOp Negation of b1
   * 70 Weak Mutation 266: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b2 -> b1
   * 71 Weak Mutation 267: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b2 -> size2
   * 72 Weak Mutation 265: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b2 -> offset1
   * 73 Weak Mutation 270: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - InsertUnaryOp Negation of b2
   * 74 Weak Mutation 271: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - InsertUnaryOp IINC 1 b2
   * 75 Weak Mutation 268: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceVariable b2 -> size1
   * 76 Weak Mutation 307: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> size2
   * 77 Weak Mutation 306: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> offset1
   * 78 Weak Mutation 308: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> size1
   * 79 Weak Mutation 313: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size1 -> offset1
   * 80 Weak Mutation 312: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size1 -> offset2
   * 81 Weak Mutation 315: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size1 -> i
   * 82 Weak Mutation 314: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size1 -> size2
   * 83 Weak Mutation 289: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b2 -> offset1
   * 84 Weak Mutation 291: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b2 -> size2
   * 85 Weak Mutation 292: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b2 -> size1
   * 86 Weak Mutation 294: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - InsertUnaryOp Negation of b2
   * 87 Weak Mutation 295: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - InsertUnaryOp IINC 1 b2
   * 88 Weak Mutation 296: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - InsertUnaryOp IINC -1 b2
   * 89 Weak Mutation 337: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceComparisonOperator < -> -2
   * 90 Weak Mutation 326: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp Negation of i
   * 91 Weak Mutation 327: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC 1 i
   * 92 Weak Mutation 324: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> size2
   * 93 Weak Mutation 325: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> size1
   * 94 Weak Mutation 323: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable i -> offset1
   * 95 Weak Mutation 321: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceComparisonOperator >= -> -1
   * 96 Weak Mutation 334: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC 1 size2
   * 97 Weak Mutation 335: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC -1 size2
   * 98 Weak Mutation 332: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size2 -> i
   * 99 Weak Mutation 333: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp Negation of size2
   * 100 Weak Mutation 330: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size2 -> offset1
   * 101 Weak Mutation 331: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size2 -> size1
   * 102 Weak Mutation 328: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC -1 i
   * 103 Weak Mutation 329: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceVariable size2 -> offset2
   * 104 Weak Mutation 273: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:205 - ReplaceComparisonOperator >= -> ==
   * 105 Weak Mutation 281: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b1 -> b2
   * 106 Weak Mutation 290: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceVariable b2 -> b1
   * 107 Weak Mutation 299: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:207 - ReplaceComparisonOperator <= -> -1
   * 108 Weak Mutation 300: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:208 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)121;
      int int0 = KeyRange.compareBytes(byteArray0, 1, 328, byteArray0, 0, (int) (byte)121);
      assertEquals(1, int0);
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 Weak Mutation 391: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - ReplaceComparisonOperator != -> -1
   * 2 Weak Mutation 392: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:245 - DeleteField: ZERO_LENGTH_BYTE_ARRAY[B
   * 3 com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B: I19 Branch 36 IFNE L244 - false
   * 4 Weak Mutation 392: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:245 - DeleteField: ZERO_LENGTH_BYTE_ARRAY[B
   * 5 Weak Mutation 391: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - ReplaceComparisonOperator != -> -1
   */
  @Test
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte)0, (int) (byte)0);
      DatabaseEntry databaseEntry1 = KeyRange.copy(databaseEntry0);
      assertEquals("<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=2>", databaseEntry1.toString());
      assertNotNull(databaseEntry1);
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * 1 Weak Mutation 390: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - ReplaceComparisonOperator != -> >
   * 2 Weak Mutation 390: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - ReplaceComparisonOperator != -> >
   */
  @Test
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, 32, (int) (byte) (-90));
      // Undeclared exception!
      try {
        KeyRange.getByteArray(databaseEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
      }
  }

  //Test case number: 23
  /*
   * 79 covered goals:
   * 1 Weak Mutation 408: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:258 - ReplaceVariable e2 -> e1
   * 2 Weak Mutation 409: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:258 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 406: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:258 - ReplaceVariable e1 -> e2
   * 4 Weak Mutation 407: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:258 - ReplaceComparisonOperator != null -> = null
   * 5 Weak Mutation 411: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:261 - ReplaceVariable e1 -> e2
   * 6 Weak Mutation 412: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:261 - ReplaceComparisonOperator = null -> != null
   * 7 Weak Mutation 415: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:262 - ReplaceConstant - 0 -> 1
   * 8 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I3 Branch 37 IFNONNULL L258 - false
   * 9 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I5 Branch 38 IFNONNULL L258 - true
   * 10 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I13 Branch 39 IFNULL L261 - true
   * 11 Weak Mutation 13: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:66 - ReplaceVariable beginKey -> endKey
   * 12 Weak Mutation 14: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:66 - ReplaceComparisonOperator != null -> = null
   * 13 Weak Mutation 15: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:67 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 14 Weak Mutation 17: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:68 - DeleteField: beginInclusiveZ
   * 15 Weak Mutation 16: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:68 - InsertUnaryOp Negation
   * 16 Weak Mutation 27: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:72 - ReplaceComparisonOperator != null -> = null
   * 17 Weak Mutation 34: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:75 - InsertUnaryOp IINC 1 endInclusive
   * 18 Weak Mutation 35: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:75 - InsertUnaryOp IINC -1 endInclusive
   * 19 Weak Mutation 32: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:75 - ReplaceVariable endInclusive -> beginInclusive
   * 20 Weak Mutation 33: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:75 - InsertUnaryOp Negation of endInclusive
   * 21 Weak Mutation 36: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:75 - DeleteStatement: check(Lcom/sleepycat/je/DatabaseEntry;Z)Z
   * 22 Weak Mutation 37: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:75 - ReplaceComparisonOperator != -> ==
   * 23 Weak Mutation 42: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:80 - ReplaceVariable range -> this
   * 24 Weak Mutation 40: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:79 - ReplaceVariable range -> this
   * 25 Weak Mutation 46: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:81 - InsertUnaryOp Negation of beginInclusive
   * 26 Weak Mutation 47: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:81 - InsertUnaryOp IINC 1 beginInclusive
   * 27 Weak Mutation 44: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:81 - ReplaceVariable range -> this
   * 28 Weak Mutation 45: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:81 - ReplaceVariable beginInclusive -> endInclusive
   * 29 Weak Mutation 51: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:82 - InsertUnaryOp Negation of endInclusive
   * 30 Weak Mutation 50: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:82 - ReplaceVariable endInclusive -> beginInclusive
   * 31 Weak Mutation 49: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:82 - ReplaceVariable range -> this
   * 32 Weak Mutation 48: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:81 - InsertUnaryOp IINC -1 beginInclusive
   * 33 Weak Mutation 53: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:82 - InsertUnaryOp IINC -1 endInclusive
   * 34 Weak Mutation 52: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;ZLcom/sleepycat/je/DatabaseEntry;Z)Lcom/sleepycat/collections/KeyRange;:82 - InsertUnaryOp IINC 1 endInclusive
   * 35 Weak Mutation 111: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:130 - InsertUnaryOp Negation
   * 36 Weak Mutation 119: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:131 - ReplaceConstant - 1 -> 0
   * 37 Weak Mutation 118: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:131 - ReplaceComparisonOperator != -> -1
   * 38 Weak Mutation 115: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:131 - DeleteStatement: compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I
   * 39 Weak Mutation 114: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:131 - DeleteField: beginKeyLcom/sleepycat/je/DatabaseEntry;
   * 40 Weak Mutation 113: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:130 - ReplaceComparisonOperator == -> !=
   * 41 Weak Mutation 112: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;Z)Z:130 - DeleteField: singleKeyZ
   * 42 Weak Mutation 186: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:188 - DeleteStatement: getData()[B
   * 43 Weak Mutation 190: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:188 - DeleteStatement: getSize()I
   * 44 Weak Mutation 188: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:188 - DeleteStatement: getOffset()I
   * 45 Weak Mutation 178: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:184 - ReplaceComparisonOperator = null -> != null
   * 46 Weak Mutation 197: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:187 - DeleteStatement: compareBytes([BII[BII)I
   * 47 Weak Mutation 196: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:189 - DeleteStatement: getSize()I
   * 48 Weak Mutation 198: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceConstant - 0 -> 1
   * 49 Weak Mutation 192: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:189 - DeleteStatement: getData()[B
   * 50 Weak Mutation 194: com.sleepycat.collections.KeyRange.compare(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)I:189 - DeleteStatement: getOffset()I
   * 51 Weak Mutation 309: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp Negation of i
   * 52 Weak Mutation 311: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC -1 i
   * 53 Weak Mutation 310: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC 1 i
   * 54 Weak Mutation 317: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC 1 size1
   * 55 Weak Mutation 316: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp Negation of size1
   * 56 Weak Mutation 318: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - InsertUnaryOp IINC -1 size1
   * 57 Weak Mutation 343: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - InsertUnaryOp IINC 1 size1
   * 58 Weak Mutation 342: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - InsertUnaryOp Negation of size1
   * 59 Weak Mutation 350: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - InsertUnaryOp IINC -1 size2
   * 60 Weak Mutation 349: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - InsertUnaryOp IINC 1 size2
   * 61 Weak Mutation 348: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - InsertUnaryOp Negation of size2
   * 62 Weak Mutation 344: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - InsertUnaryOp IINC -1 size1
   * 63 Weak Mutation 320: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:201 - ReplaceComparisonOperator >= -> >
   * 64 Weak Mutation 373: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:216 - ReplaceConstant - 0 -> 1
   * 65 Weak Mutation 368: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - InsertUnaryOp IINC -1 size2
   * 66 Weak Mutation 370: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - ReplaceComparisonOperator <= -> <
   * 67 Weak Mutation 352: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:211 - ReplaceComparisonOperator >= -> >
   * 68 Weak Mutation 366: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - InsertUnaryOp Negation of size2
   * 69 Weak Mutation 367: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - InsertUnaryOp IINC 1 size2
   * 70 Weak Mutation 360: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - InsertUnaryOp Negation of size1
   * 71 Weak Mutation 361: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - InsertUnaryOp IINC 1 size1
   * 72 Weak Mutation 362: com.sleepycat.collections.KeyRange.compareBytes([BII[BII)I:213 - InsertUnaryOp IINC -1 size1
   * 73 Weak Mutation 411: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:261 - ReplaceVariable e1 -> e2
   * 74 Weak Mutation 408: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:258 - ReplaceVariable e2 -> e1
   * 75 Weak Mutation 409: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:258 - ReplaceComparisonOperator != null -> = null
   * 76 Weak Mutation 415: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:262 - ReplaceConstant - 0 -> 1
   * 77 Weak Mutation 412: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:261 - ReplaceComparisonOperator = null -> != null
   * 78 Weak Mutation 406: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:258 - ReplaceVariable e1 -> e2
   * 79 Weak Mutation 407: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:258 - ReplaceComparisonOperator != null -> = null
   */
  @Test
  public void test23()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0);
      assertNotNull(keyRange1);
      
      KeyRange keyRange2 = keyRange1.subRange((DatabaseEntry) null, false, databaseEntry0, false);
      assertNotNull(keyRange2);
      
      boolean boolean0 = KeyRange.equalBytes((DatabaseEntry) null, keyRange2.beginKey);
      assertEquals(false, boolean0);
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true single", keyRange1.toString());
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> false", keyRange2.toString());
      assertEquals(true, keyRange2.beginInclusive);
  }

  //Test case number: 24
  /*
   * 4 covered goals:
   * 1 Weak Mutation 410: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:259 - ReplaceConstant - 1 -> 0
   * 2 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I5 Branch 38 IFNONNULL L258 - false
   * 3 Weak Mutation 409: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:258 - ReplaceComparisonOperator != null -> = null
   * 4 Weak Mutation 410: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:259 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test24()  throws Throwable  {
      boolean boolean0 = KeyRange.equalBytes((DatabaseEntry) null, (DatabaseEntry) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 33 covered goals:
   * 1 Weak Mutation 413: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:261 - ReplaceVariable e2 -> e1
   * 2 Weak Mutation 416: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:265 - ReplaceVariable e1 -> e2
   * 3 Weak Mutation 418: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:266 - ReplaceVariable e2 -> e1
   * 4 Weak Mutation 420: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:267 - ReplaceVariable e1 -> e2
   * 5 Weak Mutation 422: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:268 - ReplaceVariable e2 -> e1
   * 6 Weak Mutation 424: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:269 - ReplaceVariable e1 -> e2
   * 7 Weak Mutation 426: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:270 - ReplaceVariable e2 -> e1
   * 8 Weak Mutation 432: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:272 - ReplaceVariable d2 -> ZERO_LENGTH_BYTE_ARRAY
   * 9 Weak Mutation 434: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:273 - ReplaceConstant - 1 -> 0
   * 10 Weak Mutation 414: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:261 - ReplaceComparisonOperator != null -> = null
   * 11 Weak Mutation 413: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:261 - ReplaceVariable e2 -> e1
   * 12 Weak Mutation 432: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:272 - ReplaceVariable d2 -> ZERO_LENGTH_BYTE_ARRAY
   * 13 Weak Mutation 433: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:272 - ReplaceComparisonOperator != null -> = null
   * 14 Weak Mutation 434: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:273 - ReplaceConstant - 1 -> 0
   * 15 Weak Mutation 425: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:269 - DeleteStatement: getOffset()I
   * 16 Weak Mutation 424: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:269 - ReplaceVariable e1 -> e2
   * 17 Weak Mutation 427: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:270 - DeleteStatement: getOffset()I
   * 18 Weak Mutation 426: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:270 - ReplaceVariable e2 -> e1
   * 19 Weak Mutation 429: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:272 - ReplaceVariable d1 -> ZERO_LENGTH_BYTE_ARRAY
   * 20 Weak Mutation 430: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:272 - ReplaceComparisonOperator != null -> = null
   * 21 Weak Mutation 417: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:265 - DeleteStatement: getData()[B
   * 22 Weak Mutation 416: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:265 - ReplaceVariable e1 -> e2
   * 23 Weak Mutation 419: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:266 - DeleteStatement: getData()[B
   * 24 Weak Mutation 418: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:266 - ReplaceVariable e2 -> e1
   * 25 Weak Mutation 421: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:267 - DeleteStatement: getSize()I
   * 26 Weak Mutation 420: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:267 - ReplaceVariable e1 -> e2
   * 27 Weak Mutation 423: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:268 - DeleteStatement: getSize()I
   * 28 Weak Mutation 422: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:268 - ReplaceVariable e2 -> e1
   * 29 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I3 Branch 37 IFNONNULL L258 - true
   * 30 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I13 Branch 39 IFNULL L261 - false
   * 31 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I15 Branch 40 IFNONNULL L261 - true
   * 32 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I53 Branch 41 IFNONNULL L272 - false
   * 33 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I55 Branch 42 IFNONNULL L272 - false
   */
  @Test
  public void test25()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      DatabaseEntry databaseEntry1 = new DatabaseEntry((byte[]) null);
      boolean boolean0 = KeyRange.equalBytes(databaseEntry0, databaseEntry1);
      assertEquals(true, boolean0);
  }

  //Test case number: 26
  /*
   * 12 covered goals:
   * 1 Weak Mutation 431: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:272 - ReplaceVariable d2 -> d1
   * 2 Weak Mutation 436: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:275 - ReplaceVariable d1 -> ZERO_LENGTH_BYTE_ARRAY
   * 3 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I55 Branch 42 IFNONNULL L272 - true
   * 4 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I63 Branch 43 IFNULL L275 - true
   * 5 Weak Mutation 441: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:276 - ReplaceConstant - 0 -> 1
   * 6 Weak Mutation 433: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:272 - ReplaceComparisonOperator != null -> = null
   * 7 Weak Mutation 441: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:276 - ReplaceConstant - 0 -> 1
   * 8 Weak Mutation 435: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:275 - ReplaceVariable d1 -> d2
   * 9 Weak Mutation 436: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:275 - ReplaceVariable d1 -> ZERO_LENGTH_BYTE_ARRAY
   * 10 Weak Mutation 437: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:275 - ReplaceComparisonOperator = null -> != null
   * 11 Weak Mutation 428: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:272 - ReplaceVariable d1 -> d2
   * 12 Weak Mutation 431: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:272 - ReplaceVariable d2 -> d1
   */
  @Test
  public void test26()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0);
      assertNotNull(keyRange1);
      
      DatabaseEntry databaseEntry1 = new DatabaseEntry(keyRange1.ZERO_LENGTH_BYTE_ARRAY, (-1), (-1));
      boolean boolean0 = KeyRange.equalBytes(keyRange1.beginKey, databaseEntry1);
      assertEquals(false, boolean0);
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true single", keyRange1.toString());
  }

  //Test case number: 27
  /*
   * 34 covered goals:
   * 1 Weak Mutation 442: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s1 -> s2
   * 2 Weak Mutation 443: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s1 -> o2
   * 3 Weak Mutation 444: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s1 -> o1
   * 4 Weak Mutation 445: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp Negation of s1
   * 5 Weak Mutation 446: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp IINC 1 s1
   * 6 Weak Mutation 447: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp IINC -1 s1
   * 7 Weak Mutation 454: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceComparisonOperator == -> >=
   * 8 Weak Mutation 453: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp IINC -1 s2
   * 9 Weak Mutation 452: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp IINC 1 s2
   * 10 Weak Mutation 451: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp Negation of s2
   * 11 Weak Mutation 450: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s2 -> o1
   * 12 Weak Mutation 449: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s2 -> s1
   * 13 Weak Mutation 448: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s2 -> o2
   * 14 Weak Mutation 457: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:279 - ReplaceConstant - 0 -> 1
   * 15 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I65 Branch 44 IFNONNULL L275 - true
   * 16 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I74 Branch 45 IF_ICMPEQ L278 - false
   * 17 Weak Mutation 440: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:275 - ReplaceComparisonOperator != null -> = null
   * 18 Weak Mutation 442: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s1 -> s2
   * 19 Weak Mutation 443: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s1 -> o2
   * 20 Weak Mutation 444: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s1 -> o1
   * 21 Weak Mutation 445: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp Negation of s1
   * 22 Weak Mutation 446: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp IINC 1 s1
   * 23 Weak Mutation 447: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp IINC -1 s1
   * 24 Weak Mutation 439: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:275 - ReplaceVariable d2 -> ZERO_LENGTH_BYTE_ARRAY
   * 25 Weak Mutation 457: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:279 - ReplaceConstant - 0 -> 1
   * 26 Weak Mutation 454: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceComparisonOperator == -> >=
   * 27 Weak Mutation 453: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp IINC -1 s2
   * 28 Weak Mutation 452: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp IINC 1 s2
   * 29 Weak Mutation 451: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp Negation of s2
   * 30 Weak Mutation 450: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s2 -> o1
   * 31 Weak Mutation 449: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s2 -> s1
   * 32 Weak Mutation 448: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s2 -> o2
   * 33 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I53 Branch 41 IFNONNULL L272 - true
   * 34 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I63 Branch 43 IFNULL L275 - false
   */
  @Test
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      DatabaseEntry databaseEntry1 = new DatabaseEntry(byteArray0, (int) (byte)0, 48);
      databaseEntry0.setData(byteArray0);
      boolean boolean0 = KeyRange.equalBytes(databaseEntry1, databaseEntry0);
      assertEquals(false, boolean0);
  }

  //Test case number: 28
  /*
   * 5 covered goals:
   * 1 Weak Mutation 456: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceComparisonOperator == -> <=
   * 2 Weak Mutation 442: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s1 -> s2
   * 3 Weak Mutation 457: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:279 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 449: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s2 -> s1
   * 5 Weak Mutation 456: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceComparisonOperator == -> <=
   */
  @Test
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (-1928), (-1928));
      DatabaseEntry databaseEntry1 = new DatabaseEntry(byteArray0);
      boolean boolean0 = KeyRange.equalBytes(databaseEntry0, databaseEntry1);
      assertEquals(false, boolean0);
  }

  //Test case number: 29
  /*
   * 12 covered goals:
   * 1 Weak Mutation 460: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:282 - ReplaceVariable d1 -> ZERO_LENGTH_BYTE_ARRAY
   * 2 Weak Mutation 381: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:231 - DeleteStatement: setOffset(I)V
   * 3 Weak Mutation 380: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:231 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 377: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:230 - DeleteStatement: getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B
   * 5 Weak Mutation 378: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)V:230 - DeleteStatement: setData([B)V
   * 6 Weak Mutation 460: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:282 - ReplaceVariable d1 -> ZERO_LENGTH_BYTE_ARRAY
   * 7 Weak Mutation 458: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:281 - ReplaceConstant - 0 -> 1
   * 8 Weak Mutation 455: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceComparisonOperator == -> -2
   * 9 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I74 Branch 45 IF_ICMPEQ L278 - true
   * 10 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I97 Branch 46 IF_ICMPEQ L282 - true
   * 11 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I108 Branch 47 IF_ICMPLT L281 - true
   * 12 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I108 Branch 47 IF_ICMPLT L281 - false
   */
  @Test
  public void test29()  throws Throwable  {
      byte[] byteArray0 = KeyRange.ZERO_LENGTH_BYTE_ARRAY;
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0);
      assertNotNull(keyRange1);
      
      KeyRange.copy(keyRange1.endKey, databaseEntry0);
      boolean boolean0 = KeyRange.equalBytes(databaseEntry0, keyRange1.endKey);
      assertEquals(true, boolean0);
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=2> true<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=2> true single", keyRange1.toString());
  }

  //Test case number: 30
  /*
   * 32 covered goals:
   * 1 Weak Mutation 510: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - ReplaceComparisonOperator < -> !=
   * 2 Weak Mutation 475: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceArithmeticOperator * -> +
   * 3 Weak Mutation 478: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:301 - DeleteStatement: getData()[B
   * 4 Weak Mutation 479: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - DeleteStatement: getOffset()I
   * 5 Weak Mutation 476: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceArithmeticOperator * -> %
   * 6 Weak Mutation 477: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceArithmeticOperator * -> /
   * 7 Weak Mutation 474: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceArithmeticOperator * -> -
   * 8 Weak Mutation 475: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceArithmeticOperator * -> +
   * 9 Weak Mutation 472: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceConstant - 2 -> -1
   * 10 Weak Mutation 473: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceConstant - 2 -> 3
   * 11 Weak Mutation 470: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceConstant - 2 -> 0
   * 12 Weak Mutation 471: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceConstant - 2 -> 1
   * 13 Weak Mutation 468: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - InsertUnaryOp IINC 1 len
   * 14 Weak Mutation 469: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - InsertUnaryOp IINC -1 len
   * 15 Weak Mutation 466: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:299 - ReplaceArithmeticOperator + -> *
   * 16 Weak Mutation 467: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - InsertUnaryOp Negation of len
   * 17 Weak Mutation 464: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:299 - ReplaceArithmeticOperator + -> %
   * 18 Weak Mutation 465: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:299 - ReplaceArithmeticOperator + -> /
   * 19 Weak Mutation 463: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:299 - ReplaceArithmeticOperator + -> -
   * 20 Weak Mutation 462: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:299 - DeleteStatement: getSize()I
   * 21 Weak Mutation 461: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:299 - DeleteStatement: getOffset()I
   * 22 Weak Mutation 508: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - InsertUnaryOp IINC 1 len
   * 23 Weak Mutation 509: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - InsertUnaryOp IINC -1 len
   * 24 Weak Mutation 510: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - ReplaceComparisonOperator < -> !=
   * 25 Weak Mutation 504: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - InsertUnaryOp IINC 1 i
   * 26 Weak Mutation 505: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - InsertUnaryOp IINC -1 i
   * 27 Weak Mutation 506: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - ReplaceVariable len -> i
   * 28 Weak Mutation 507: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - InsertUnaryOp Negation of len
   * 29 Weak Mutation 502: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - ReplaceVariable i -> len
   * 30 Weak Mutation 503: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - InsertUnaryOp Negation of i
   * 31 Weak Mutation 513: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:307 - DeleteStatement: toString()Ljava/lang/String;
   * 32 com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;: I58 Branch 49 IF_ICMPLT L302 - false
   */
  @Test
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, 32, (-1));
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0);
      assertNotNull(keyRange1);
      
      String string0 = KeyRange.toString(keyRange1.beginKey);
      assertNotNull(string0);
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=32 size=-1> true<DatabaseEntry dlen=0 doff=0 doff=0 offset=32 size=-1> true single", keyRange1.toString());
  }

  //Test case number: 31
  /*
   * 76 covered goals:
   * 1 Weak Mutation 480: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:303 - ReplaceVariable data -> ZERO_LENGTH_BYTE_ARRAY
   * 2 Weak Mutation 478: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:301 - DeleteStatement: getData()[B
   * 3 Weak Mutation 479: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - DeleteStatement: getOffset()I
   * 4 Weak Mutation 476: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceArithmeticOperator * -> %
   * 5 Weak Mutation 477: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceArithmeticOperator * -> /
   * 6 Weak Mutation 474: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceArithmeticOperator * -> -
   * 7 Weak Mutation 472: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceConstant - 2 -> -1
   * 8 Weak Mutation 473: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceConstant - 2 -> 3
   * 9 Weak Mutation 470: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceConstant - 2 -> 0
   * 10 Weak Mutation 471: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - ReplaceConstant - 2 -> 1
   * 11 Weak Mutation 468: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - InsertUnaryOp IINC 1 len
   * 12 Weak Mutation 469: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - InsertUnaryOp IINC -1 len
   * 13 Weak Mutation 466: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:299 - ReplaceArithmeticOperator + -> *
   * 14 Weak Mutation 467: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:300 - InsertUnaryOp Negation of len
   * 15 Weak Mutation 464: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:299 - ReplaceArithmeticOperator + -> %
   * 16 Weak Mutation 465: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:299 - ReplaceArithmeticOperator + -> /
   * 17 Weak Mutation 463: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:299 - ReplaceArithmeticOperator + -> -
   * 18 Weak Mutation 462: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:299 - DeleteStatement: getSize()I
   * 19 Weak Mutation 461: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:299 - DeleteStatement: getOffset()I
   * 20 Weak Mutation 508: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - InsertUnaryOp IINC 1 len
   * 21 Weak Mutation 509: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - InsertUnaryOp IINC -1 len
   * 22 Weak Mutation 511: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - ReplaceComparisonOperator < -> -2
   * 23 Weak Mutation 504: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - InsertUnaryOp IINC 1 i
   * 24 Weak Mutation 505: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - InsertUnaryOp IINC -1 i
   * 25 Weak Mutation 506: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - ReplaceVariable len -> i
   * 26 Weak Mutation 507: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - InsertUnaryOp Negation of len
   * 27 Weak Mutation 500: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:305 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 28 Weak Mutation 501: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - ReplaceVariable i -> len
   * 29 Weak Mutation 502: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - ReplaceVariable i -> len
   * 30 Weak Mutation 503: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - InsertUnaryOp Negation of i
   * 31 Weak Mutation 496: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 48 -> -1
   * 32 Weak Mutation 497: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 48 -> 47
   * 33 Weak Mutation 498: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 48 -> 49
   * 34 Weak Mutation 499: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 35 Weak Mutation 493: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceComparisonOperator >= -> -1
   * 36 Weak Mutation 495: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 48 -> 1
   * 37 Weak Mutation 494: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 48 -> 0
   * 38 Weak Mutation 489: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 2 -> -1
   * 39 Weak Mutation 488: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 2 -> 1
   * 40 Weak Mutation 491: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceComparisonOperator >= -> ==
   * 41 Weak Mutation 490: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 2 -> 3
   * 42 Weak Mutation 485: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:303 - DeleteStatement: toHexString(I)Ljava/lang/String;
   * 43 Weak Mutation 484: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:303 - InsertUnaryOp IINC -1 i
   * 44 Weak Mutation 487: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 2 -> 0
   * 45 Weak Mutation 486: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - DeleteStatement: length()I
   * 46 Weak Mutation 481: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:303 - ReplaceVariable i -> len
   * 47 Weak Mutation 483: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:303 - InsertUnaryOp IINC 1 i
   * 48 Weak Mutation 482: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:303 - InsertUnaryOp Negation of i
   * 49 Weak Mutation 512: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - ReplaceComparisonOperator < -> <=
   * 50 Weak Mutation 513: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:307 - DeleteStatement: toString()Ljava/lang/String;
   * 51 Weak Mutation 511: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - ReplaceComparisonOperator < -> -2
   * 52 Weak Mutation 500: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:305 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 53 Weak Mutation 501: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - ReplaceVariable i -> len
   * 54 Weak Mutation 496: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 48 -> -1
   * 55 Weak Mutation 497: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 48 -> 47
   * 56 Weak Mutation 498: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 48 -> 49
   * 57 Weak Mutation 499: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 58 Weak Mutation 493: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceComparisonOperator >= -> -1
   * 59 Weak Mutation 495: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 48 -> 1
   * 60 Weak Mutation 494: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 48 -> 0
   * 61 Weak Mutation 489: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 2 -> -1
   * 62 Weak Mutation 488: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 2 -> 1
   * 63 Weak Mutation 491: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceComparisonOperator >= -> ==
   * 64 Weak Mutation 490: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 2 -> 3
   * 65 Weak Mutation 485: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:303 - DeleteStatement: toHexString(I)Ljava/lang/String;
   * 66 Weak Mutation 484: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:303 - InsertUnaryOp IINC -1 i
   * 67 Weak Mutation 487: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - ReplaceConstant - 2 -> 0
   * 68 Weak Mutation 486: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:304 - DeleteStatement: length()I
   * 69 Weak Mutation 481: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:303 - ReplaceVariable i -> len
   * 70 Weak Mutation 480: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:303 - ReplaceVariable data -> ZERO_LENGTH_BYTE_ARRAY
   * 71 Weak Mutation 483: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:303 - InsertUnaryOp IINC 1 i
   * 72 Weak Mutation 482: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:303 - InsertUnaryOp Negation of i
   * 73 Weak Mutation 512: com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;:302 - ReplaceComparisonOperator < -> <=
   * 74 com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;: I41 Branch 48 IF_ICMPGE L304 - true
   * 75 com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;: I41 Branch 48 IF_ICMPGE L304 - false
   * 76 com.sleepycat.collections.KeyRange.toString(Lcom/sleepycat/je/DatabaseEntry;)Ljava/lang/String;: I58 Branch 49 IF_ICMPLT L302 - true
   */
  @Test
  public void test31()  throws Throwable  {
      byte[] byteArray0 = KeyRange.ZERO_LENGTH_BYTE_ARRAY;
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      DatabaseEntry databaseEntry1 = KeyRange.copy(databaseEntry0);
      assertNotNull(databaseEntry1);
      
      String string0 = KeyRange.toString(databaseEntry1);
      assertNotNull(string0);
      assertEquals("00ffffff9b", string0);
  }

  //Test case number: 32
  /*
   * 3 covered goals:
   * 1 com.sleepycat.collections.KeyRange.getSingleKey()Lcom/sleepycat/je/DatabaseEntry;: I4 Branch 6 IFEQ L92 - true
   * 2 Weak Mutation 54: com.sleepycat.collections.KeyRange.getSingleKey()Lcom/sleepycat/je/DatabaseEntry;:92 - InsertUnaryOp Negation
   * 3 Weak Mutation 56: com.sleepycat.collections.KeyRange.getSingleKey()Lcom/sleepycat/je/DatabaseEntry;:92 - ReplaceComparisonOperator == -> !=
   */
  @Test
  public void test32()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = keyRange0.getSingleKey();
      assertNull(databaseEntry0);
  }

  //Test case number: 33
  /*
   * 26 covered goals:
   * 1 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I15 Branch 40 IFNONNULL L261 - false
   * 2 Weak Mutation 0: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:46 - DeleteStatement: check(Lcom/sleepycat/je/DatabaseEntry;)Z
   * 3 Weak Mutation 1: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:46 - ReplaceComparisonOperator != -> ==
   * 4 Weak Mutation 4: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:50 - ReplaceVariable range -> this
   * 5 Weak Mutation 5: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:51 - ReplaceVariable range -> this
   * 6 Weak Mutation 6: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:52 - ReplaceVariable range -> this
   * 7 Weak Mutation 7: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:52 - ReplaceConstant - 1 -> 0
   * 8 Weak Mutation 8: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:53 - ReplaceVariable range -> this
   * 9 Weak Mutation 9: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:53 - ReplaceConstant - 1 -> 0
   * 10 Weak Mutation 10: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:54 - ReplaceVariable range -> this
   * 11 Weak Mutation 11: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:54 - ReplaceConstant - 1 -> 0
   * 12 Weak Mutation 12: com.sleepycat.collections.KeyRange.subRange(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/collections/KeyRange;:55 - ReplaceVariable range -> this
   * 13 Weak Mutation 93: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:118 - InsertUnaryOp Negation
   * 14 Weak Mutation 95: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:118 - ReplaceComparisonOperator == -> !=
   * 15 Weak Mutation 103: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - ReplaceConstant - 1 -> 0
   * 16 Weak Mutation 108: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - ReplaceComparisonOperator == -> !=
   * 17 Weak Mutation 109: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - ReplaceConstant - 1 -> 0
   * 18 Weak Mutation 106: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - ReplaceConstant - 1 -> 0
   * 19 Weak Mutation 107: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - DeleteStatement: checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z
   * 20 Weak Mutation 104: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - DeleteStatement: checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z
   * 21 Weak Mutation 105: com.sleepycat.collections.KeyRange.check(Lcom/sleepycat/je/DatabaseEntry;)Z:121 - ReplaceComparisonOperator == -> !=
   * 22 Weak Mutation 135: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:156 - ReplaceConstant - 1 -> 0
   * 23 Weak Mutation 134: com.sleepycat.collections.KeyRange.checkBegin(Lcom/sleepycat/je/DatabaseEntry;Z)Z:155 - ReplaceComparisonOperator != null -> = null
   * 24 Weak Mutation 156: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:170 - ReplaceComparisonOperator != null -> = null
   * 25 Weak Mutation 157: com.sleepycat.collections.KeyRange.checkEnd(Lcom/sleepycat/je/DatabaseEntry;Z)Z:171 - ReplaceConstant - 1 -> 0
   * 26 Weak Mutation 415: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:262 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test33()  throws Throwable  {
      KeyRange keyRange0 = new KeyRange((Comparator) null);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      KeyRange keyRange1 = keyRange0.subRange(databaseEntry0);
      assertNotNull(keyRange1);
      
      boolean boolean0 = KeyRange.equalBytes(keyRange1.endKey, (DatabaseEntry) null);
      assertEquals(false, boolean0);
      assertEquals("[KeyRange <DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0> true single", keyRange1.toString());
  }

  //Test case number: 34
  /*
   * 67 covered goals:
   * 1 com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z: I97 Branch 46 IF_ICMPEQ L282 - false
   * 2 Weak Mutation 374: com.sleepycat.collections.KeyRange.copy(Lcom/sleepycat/je/DatabaseEntry;)Lcom/sleepycat/je/DatabaseEntry;:223 - DeleteStatement: getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B
   * 3 Weak Mutation 383: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:241 - ReplaceVariable bytes -> ZERO_LENGTH_BYTE_ARRAY
   * 4 Weak Mutation 382: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:240 - DeleteStatement: getData()[B
   * 5 Weak Mutation 411: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:261 - ReplaceVariable e1 -> e2
   * 6 Weak Mutation 414: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:261 - ReplaceComparisonOperator != null -> = null
   * 7 Weak Mutation 412: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:261 - ReplaceComparisonOperator = null -> != null
   * 8 Weak Mutation 413: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:261 - ReplaceVariable e2 -> e1
   * 9 Weak Mutation 402: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - InsertUnaryOp Negation of size
   * 10 Weak Mutation 403: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - DeleteStatement: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
   * 11 Weak Mutation 400: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - ReplaceVariable data -> ZERO_LENGTH_BYTE_ARRAY
   * 12 Weak Mutation 401: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - ReplaceConstant - 0 -> 1
   * 13 Weak Mutation 406: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:258 - ReplaceVariable e1 -> e2
   * 14 Weak Mutation 407: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:258 - ReplaceComparisonOperator != null -> = null
   * 15 Weak Mutation 404: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:250 - ReplaceVariable data -> bytes
   * 16 Weak Mutation 405: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:250 - ReplaceVariable data -> ZERO_LENGTH_BYTE_ARRAY
   * 17 Weak Mutation 395: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:247 - InsertUnaryOp IINC -1 size
   * 18 Weak Mutation 394: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:247 - InsertUnaryOp IINC 1 size
   * 19 Weak Mutation 393: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:247 - InsertUnaryOp Negation of size
   * 20 Weak Mutation 399: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - ReplaceVariable data -> bytes
   * 21 Weak Mutation 398: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - DeleteStatement: getOffset()I
   * 22 Weak Mutation 397: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - ReplaceVariable bytes -> data
   * 23 Weak Mutation 396: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - ReplaceVariable bytes -> ZERO_LENGTH_BYTE_ARRAY
   * 24 Weak Mutation 387: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - InsertUnaryOp IINC 1 size
   * 25 Weak Mutation 386: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - InsertUnaryOp Negation of size
   * 26 Weak Mutation 385: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:242 - DeleteStatement: getSize()I
   * 27 Weak Mutation 384: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:241 - ReplaceComparisonOperator != null -> = null
   * 28 Weak Mutation 389: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - ReplaceComparisonOperator != -> <
   * 29 Weak Mutation 388: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:244 - InsertUnaryOp IINC -1 size
   * 30 Weak Mutation 440: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:275 - ReplaceComparisonOperator != null -> = null
   * 31 Weak Mutation 443: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s1 -> o2
   * 32 Weak Mutation 444: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s1 -> o1
   * 33 Weak Mutation 445: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp Negation of s1
   * 34 Weak Mutation 446: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp IINC 1 s1
   * 35 Weak Mutation 447: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp IINC -1 s1
   * 36 Weak Mutation 435: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:275 - ReplaceVariable d1 -> d2
   * 37 Weak Mutation 436: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:275 - ReplaceVariable d1 -> ZERO_LENGTH_BYTE_ARRAY
   * 38 Weak Mutation 437: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:275 - ReplaceComparisonOperator = null -> != null
   * 39 Weak Mutation 438: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:275 - ReplaceVariable d2 -> d1
   * 40 Weak Mutation 439: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:275 - ReplaceVariable d2 -> ZERO_LENGTH_BYTE_ARRAY
   * 41 Weak Mutation 425: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:269 - DeleteStatement: getOffset()I
   * 42 Weak Mutation 424: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:269 - ReplaceVariable e1 -> e2
   * 43 Weak Mutation 427: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:270 - DeleteStatement: getOffset()I
   * 44 Weak Mutation 426: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:270 - ReplaceVariable e2 -> e1
   * 45 Weak Mutation 429: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:272 - ReplaceVariable d1 -> ZERO_LENGTH_BYTE_ARRAY
   * 46 Weak Mutation 428: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:272 - ReplaceVariable d1 -> d2
   * 47 Weak Mutation 430: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:272 - ReplaceComparisonOperator != null -> = null
   * 48 Weak Mutation 417: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:265 - DeleteStatement: getData()[B
   * 49 Weak Mutation 416: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:265 - ReplaceVariable e1 -> e2
   * 50 Weak Mutation 419: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:266 - DeleteStatement: getData()[B
   * 51 Weak Mutation 418: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:266 - ReplaceVariable e2 -> e1
   * 52 Weak Mutation 421: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:267 - DeleteStatement: getSize()I
   * 53 Weak Mutation 420: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:267 - ReplaceVariable e1 -> e2
   * 54 Weak Mutation 423: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:268 - DeleteStatement: getSize()I
   * 55 Weak Mutation 422: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:268 - ReplaceVariable e2 -> e1
   * 56 Weak Mutation 460: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:282 - ReplaceVariable d1 -> ZERO_LENGTH_BYTE_ARRAY
   * 57 Weak Mutation 459: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:282 - ReplaceVariable d1 -> d2
   * 58 Weak Mutation 458: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:281 - ReplaceConstant - 0 -> 1
   * 59 Weak Mutation 455: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceComparisonOperator == -> -2
   * 60 Weak Mutation 453: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp IINC -1 s2
   * 61 Weak Mutation 452: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp IINC 1 s2
   * 62 Weak Mutation 451: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - InsertUnaryOp Negation of s2
   * 63 Weak Mutation 450: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s2 -> o1
   * 64 Weak Mutation 448: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:278 - ReplaceVariable s2 -> o2
   * 65 Weak Mutation 396: com.sleepycat.collections.KeyRange.getByteArray(Lcom/sleepycat/je/DatabaseEntry;)[B:248 - ReplaceVariable bytes -> ZERO_LENGTH_BYTE_ARRAY
   * 66 Weak Mutation 438: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:275 - ReplaceVariable d2 -> d1
   * 67 Weak Mutation 459: com.sleepycat.collections.KeyRange.equalBytes(Lcom/sleepycat/je/DatabaseEntry;Lcom/sleepycat/je/DatabaseEntry;)Z:282 - ReplaceVariable d1 -> d2
   */
  @Test
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      DatabaseEntry databaseEntry1 = KeyRange.copy(databaseEntry0);
      assertTrue(databaseEntry1.equals(databaseEntry0));
      assertNotNull(databaseEntry1);
      
      byteArray0[4] = (byte)1;
      boolean boolean0 = KeyRange.equalBytes(databaseEntry0, databaseEntry1);
      assertEquals(false, boolean0);
  }
}
