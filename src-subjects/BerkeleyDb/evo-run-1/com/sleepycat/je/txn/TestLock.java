/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.txn;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.MemoryBudget;
import com.sleepycat.je.txn.Lock;
import com.sleepycat.je.txn.LockGrantType;
import com.sleepycat.je.txn.LockType;
import com.sleepycat.je.txn.Locker;
import com.sleepycat.je.txn.Txn;
import java.util.List;
import java.util.Set;

@RunWith(EvoSuiteRunner.class)
public class TestLock {


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 Weak Mutation 0: com.sleepycat.je.txn.Lock.getNodeId()Ljava/lang/Long;:52 - DeleteField: nodeIdLjava/lang/Long;
   * 2 com.sleepycat.je.txn.Lock.getNodeId()Ljava/lang/Long;: root-Branch
   * 3 com.sleepycat.je.txn.Lock.<init>(Ljava/lang/Long;)V: root-Branch
   * 4 Weak Mutation 0: com.sleepycat.je.txn.Lock.getNodeId()Ljava/lang/Long;:52 - DeleteField: nodeIdLjava/lang/Long;
   */
  @Test
  public void test0()  throws Throwable  {
      Long long0 = new Long(0L);
      Lock lock0 = new Lock(long0);
      Long long1 = lock0.getNodeId();
      assertEquals("0", long1.toString());
  }

  //Test case number: 1
  /*
   * 7 covered goals:
   * 1 Weak Mutation 18: com.sleepycat.je.txn.Lock.getWaitersListClone()Ljava/util/List;:100 - ReplaceComparisonOperator = null -> != null
   * 2 Weak Mutation 22: com.sleepycat.je.txn.Lock.getWaitersListClone()Ljava/util/List;:103 - ReplaceComparisonOperator = null -> != null
   * 3 com.sleepycat.je.txn.Lock.<init>()V: root-Branch
   * 4 com.sleepycat.je.txn.Lock.getWaitersListClone()Ljava/util/List;: I10 Branch 6 IFNULL L100 - true
   * 5 com.sleepycat.je.txn.Lock.getWaitersListClone()Ljava/util/List;: I22 Branch 7 IFNULL L103 - true
   * 6 Weak Mutation 18: com.sleepycat.je.txn.Lock.getWaitersListClone()Ljava/util/List;:100 - ReplaceComparisonOperator = null -> != null
   * 7 Weak Mutation 22: com.sleepycat.je.txn.Lock.getWaitersListClone()Ljava/util/List;:103 - ReplaceComparisonOperator = null -> != null
   */
  @Test
  public void test1()  throws Throwable  {
      Lock lock0 = new Lock();
      List<?> list0 = lock0.getWaitersListClone();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
  }

  //Test case number: 2
  /*
   * 6 covered goals:
   * 1 Weak Mutation 26: com.sleepycat.je.txn.Lock.flushWaiter(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)V:113 - ReplaceComparisonOperator = null -> != null
   * 2 Weak Mutation 31: com.sleepycat.je.txn.Lock.flushWaiter(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)V:118 - ReplaceComparisonOperator = null -> != null
   * 3 com.sleepycat.je.txn.Lock.flushWaiter(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)V: I4 Branch 8 IFNULL L113 - true
   * 4 com.sleepycat.je.txn.Lock.flushWaiter(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)V: I21 Branch 10 IFNULL L118 - true
   * 5 Weak Mutation 26: com.sleepycat.je.txn.Lock.flushWaiter(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)V:113 - ReplaceComparisonOperator = null -> != null
   * 6 Weak Mutation 31: com.sleepycat.je.txn.Lock.flushWaiter(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)V:118 - ReplaceComparisonOperator = null -> != null
   */
  @Test
  public void test2()  throws Throwable  {
      Lock lock0 = new Lock();
      lock0.flushWaiter((Locker) null, (MemoryBudget) null, 1);
      assertEquals(0, lock0.nOwners());
  }

  //Test case number: 3
  /*
   * 81 covered goals:
   * 1 Weak Mutation 63: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:196 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 2 Weak Mutation 64: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:196 - ReplaceComparisonOperator = null -> != null
   * 3 Weak Mutation 65: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:196 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 4 Weak Mutation 66: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:196 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 5 Weak Mutation 67: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:196 - ReplaceComparisonOperator != -> ==
   * 6 Weak Mutation 68: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:197 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 7 Weak Mutation 193: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:382 - InsertUnaryOp Negation of lockTableIndex
   * 8 Weak Mutation 195: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:382 - InsertUnaryOp IINC -1 lockTableIndex
   * 9 Weak Mutation 194: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:382 - InsertUnaryOp IINC 1 lockTableIndex
   * 10 Weak Mutation 196: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:383 - ReplaceComparisonOperator != null -> = null
   * 11 Weak Mutation 197: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:386 - DeleteField: EMPTY_SETLjava/util/Set;
   * 12 Weak Mutation 201: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:387 - ReplaceComparisonOperator != -> -1
   * 13 Weak Mutation 198: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:387 - DeleteStatement: nWaiters()I
   * 14 com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;: I8 Branch 20 IFNULL L196 - false
   * 15 com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;: I13 Branch 21 IF_ACMPNE L196 - false
   * 16 com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;: I11 Branch 69 IFNONNULL L383 - true
   * 17 com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;: I24 Branch 70 IFNE L387 - false
   * 18 Weak Mutation 41: com.sleepycat.je.txn.Lock.addOwner(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/dbi/MemoryBudget;I)V:135 - ReplaceComparisonOperator != null -> = null
   * 19 Weak Mutation 63: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:196 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 20 Weak Mutation 68: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:197 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 21 Weak Mutation 64: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:196 - ReplaceComparisonOperator = null -> != null
   * 22 Weak Mutation 65: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:196 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 23 Weak Mutation 66: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:196 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 24 Weak Mutation 67: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:196 - ReplaceComparisonOperator != -> ==
   * 25 Weak Mutation 136: com.sleepycat.je.txn.Lock.nWaiters()I:294 - ReplaceComparisonOperator = null -> != null
   * 26 Weak Mutation 132: com.sleepycat.je.txn.Lock.nWaiters()I:290 - ReplaceConstant - 0 -> 1
   * 27 Weak Mutation 134: com.sleepycat.je.txn.Lock.nWaiters()I:291 - ReplaceComparisonOperator = null -> != null
   * 28 Weak Mutation 153: com.sleepycat.je.txn.Lock.nOwners()I:305 - ReplaceComparisonOperator = null -> != null
   * 29 Weak Mutation 146: com.sleepycat.je.txn.Lock.nWaiters()I:297 - InsertUnaryOp Negation of count
   * 30 Weak Mutation 147: com.sleepycat.je.txn.Lock.nWaiters()I:297 - InsertUnaryOp IINC 1 count
   * 31 Weak Mutation 148: com.sleepycat.je.txn.Lock.nWaiters()I:297 - InsertUnaryOp IINC -1 count
   * 32 Weak Mutation 149: com.sleepycat.je.txn.Lock.nOwners()I:301 - ReplaceConstant - 0 -> 1
   * 33 Weak Mutation 151: com.sleepycat.je.txn.Lock.nOwners()I:302 - ReplaceComparisonOperator = null -> != null
   * 34 Weak Mutation 170: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:319 - DeleteStatement: nWaiters()I
   * 35 Weak Mutation 169: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:317 - ReplaceComparisonOperator != -> ==
   * 36 Weak Mutation 168: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:317 - ReplaceComparisonOperator != -> ==
   * 37 Weak Mutation 174: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:319 - ReplaceConstant - 1 -> 0
   * 38 Weak Mutation 173: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:319 - ReplaceComparisonOperator != -> -1
   * 39 Weak Mutation 163: com.sleepycat.je.txn.Lock.nOwners()I:308 - InsertUnaryOp Negation of count
   * 40 Weak Mutation 166: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:317 - InsertUnaryOp Negation
   * 41 Weak Mutation 165: com.sleepycat.je.txn.Lock.nOwners()I:308 - InsertUnaryOp IINC -1 count
   * 42 Weak Mutation 164: com.sleepycat.je.txn.Lock.nOwners()I:308 - InsertUnaryOp IINC 1 count
   * 43 Weak Mutation 184: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:323 - ReplaceComparisonOperator != -> ==
   * 44 Weak Mutation 178: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:320 - InsertUnaryOp IINC -1 lockTableIndex
   * 45 Weak Mutation 179: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:321 - DeleteField: WAIT_NEWLcom/sleepycat/je/txn/LockGrantType;
   * 46 Weak Mutation 176: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:320 - InsertUnaryOp Negation of lockTableIndex
   * 47 Weak Mutation 177: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:320 - InsertUnaryOp IINC 1 lockTableIndex
   * 48 Weak Mutation 182: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:322 - ReplaceComparisonOperator == -> !=
   * 49 Weak Mutation 183: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:323 - DeleteField: WAIT_RESTARTLcom/sleepycat/je/txn/LockGrantType;
   * 50 Weak Mutation 180: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:321 - ReplaceComparisonOperator == -> !=
   * 51 Weak Mutation 181: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:322 - DeleteField: WAIT_PROMOTIONLcom/sleepycat/je/txn/LockGrantType;
   * 52 Weak Mutation 201: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:387 - ReplaceComparisonOperator != -> -1
   * 53 Weak Mutation 197: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:386 - DeleteField: EMPTY_SETLjava/util/Set;
   * 54 Weak Mutation 196: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:383 - ReplaceComparisonOperator != null -> = null
   * 55 Weak Mutation 198: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:387 - DeleteStatement: nWaiters()I
   * 56 Weak Mutation 193: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:382 - InsertUnaryOp Negation of lockTableIndex
   * 57 Weak Mutation 195: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:382 - InsertUnaryOp IINC -1 lockTableIndex
   * 58 Weak Mutation 194: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:382 - InsertUnaryOp IINC 1 lockTableIndex
   * 59 Weak Mutation 220: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:464 - InsertUnaryOp Negation of lockTableIndex
   * 60 Weak Mutation 221: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:464 - InsertUnaryOp IINC 1 lockTableIndex
   * 61 Weak Mutation 222: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:464 - InsertUnaryOp IINC -1 lockTableIndex
   * 62 Weak Mutation 223: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:465 - DeleteField: NEWLcom/sleepycat/je/txn/LockGrantType;
   * 63 Weak Mutation 216: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:463 - DeleteStatement: nOwners()I
   * 64 Weak Mutation 219: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:463 - ReplaceComparisonOperator != -> -1
   * 65 Weak Mutation 404: com.sleepycat.je.txn.Lock.validateRequest(Lcom/sleepycat/je/txn/Locker;)Z:774 - ReplaceComparisonOperator = null -> != null
   * 66 Weak Mutation 391: com.sleepycat.je.txn.Lock.validateRequest(Lcom/sleepycat/je/txn/Locker;)Z:768 - ReplaceComparisonOperator = null -> != null
   * 67 Weak Mutation 420: com.sleepycat.je.txn.Lock.validateRequest(Lcom/sleepycat/je/txn/Locker;)Z:784 - ReplaceConstant - 1 -> 0
   * 68 com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I3 Branch 44 IFNE L317 - false
   * 69 com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I7 Branch 45 IFNE L317 - true
   * 70 com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I26 Branch 46 IFNE L319 - false
   * 71 com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I44 Branch 47 IF_ACMPEQ L321 - false
   * 72 com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I49 Branch 48 IF_ACMPEQ L322 - false
   * 73 com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I54 Branch 49 IF_ACMPNE L323 - true
   * 74 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I4 Branch 89 IFNE L463 - false
   * 75 com.sleepycat.je.txn.Lock.validateRequest(Lcom/sleepycat/je/txn/Locker;)Z: I4 Branch 169 IFNULL L768 - true
   * 76 com.sleepycat.je.txn.Lock.validateRequest(Lcom/sleepycat/je/txn/Locker;)Z: I37 Branch 172 IFNULL L774 - true
   * 77 com.sleepycat.je.txn.Lock.nOwners()I: I8 Branch 42 IFNULL L302 - true
   * 78 com.sleepycat.je.txn.Lock.nOwners()I: I16 Branch 43 IFNULL L305 - true
   * 79 com.sleepycat.je.txn.Lock.addOwner(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/dbi/MemoryBudget;I)V: I4 Branch 13 IFNONNULL L135 - false
   * 80 com.sleepycat.je.txn.Lock.nWaiters()I: I8 Branch 40 IFNULL L291 - true
   * 81 com.sleepycat.je.txn.Lock.nWaiters()I: I16 Branch 41 IFNULL L294 - true
   */
  @Test
  public void test3()  throws Throwable  {
      Lock lock0 = new Lock();
      LockType lockType0 = LockType.WRITE;
      LockGrantType lockGrantType0 = lock0.lock(lockType0, (Locker) null, false, (MemoryBudget) null, 0);
      assertEquals(1, lock0.nOwners());
      assertNotNull(lockGrantType0);
      
      lock0.release((Locker) null, (MemoryBudget) null, 0);
      assertEquals(0, lock0.nWaiters());
  }

  //Test case number: 4
  /*
   * 12 covered goals:
   * 1 Weak Mutation 49: com.sleepycat.je.txn.Lock.getOwnersClone()Ljava/util/Set;:158 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 2 Weak Mutation 51: com.sleepycat.je.txn.Lock.getOwnersClone()Ljava/util/Set;:159 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 3 Weak Mutation 52: com.sleepycat.je.txn.Lock.getOwnersClone()Ljava/util/Set;:159 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 4 com.sleepycat.je.txn.Lock.getOwnersClone()Ljava/util/Set;: I26 Branch 16 IFNULL L158 - false
   * 5 Weak Mutation 47: com.sleepycat.je.txn.Lock.getOwnersClone()Ljava/util/Set;:153 - ReplaceComparisonOperator = null -> != null
   * 6 Weak Mutation 50: com.sleepycat.je.txn.Lock.getOwnersClone()Ljava/util/Set;:158 - ReplaceComparisonOperator = null -> != null
   * 7 Weak Mutation 47: com.sleepycat.je.txn.Lock.getOwnersClone()Ljava/util/Set;:153 - ReplaceComparisonOperator = null -> != null
   * 8 Weak Mutation 51: com.sleepycat.je.txn.Lock.getOwnersClone()Ljava/util/Set;:159 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 9 Weak Mutation 50: com.sleepycat.je.txn.Lock.getOwnersClone()Ljava/util/Set;:158 - ReplaceComparisonOperator = null -> != null
   * 10 Weak Mutation 49: com.sleepycat.je.txn.Lock.getOwnersClone()Ljava/util/Set;:158 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 11 Weak Mutation 52: com.sleepycat.je.txn.Lock.getOwnersClone()Ljava/util/Set;:159 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 12 com.sleepycat.je.txn.Lock.getOwnersClone()Ljava/util/Set;: I4 Branch 15 IFNULL L153 - true
   */
  @Test
  public void test4()  throws Throwable  {
      Lock lock0 = new Lock();
      LockGrantType lockGrantType0 = lock0.lock((LockType) null, (Locker) null, true, (MemoryBudget) null, 0);
      assertNotNull(lockGrantType0);
      
      lock0.getOwnersClone();
      assertEquals(1, lock0.nOwners());
      assertEquals(" NodeId:null Owners:<LockInfo locker=\"null\" type=\"null\"/> Waiters: (none)", lock0.toString());
  }

  //Test case number: 5
  /*
   * 10 covered goals:
   * 1 Weak Mutation 70: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:199 - ReplaceComparisonOperator = null -> != null
   * 2 com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;: I8 Branch 20 IFNULL L196 - true
   * 3 com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;: I30 Branch 22 IFNULL L199 - true
   * 4 com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;: I11 Branch 69 IFNONNULL L383 - false
   * 5 Weak Mutation 64: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:196 - ReplaceComparisonOperator = null -> != null
   * 6 Weak Mutation 196: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:383 - ReplaceComparisonOperator != null -> = null
   * 7 Weak Mutation 193: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:382 - InsertUnaryOp Negation of lockTableIndex
   * 8 Weak Mutation 195: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:382 - InsertUnaryOp IINC -1 lockTableIndex
   * 9 Weak Mutation 194: com.sleepycat.je.txn.Lock.release(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Ljava/util/Set;:382 - InsertUnaryOp IINC 1 lockTableIndex
   * 10 Weak Mutation 70: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:199 - ReplaceComparisonOperator = null -> != null
   */
  @Test
  public void test5()  throws Throwable  {
      Lock lock0 = new Lock();
      Set<?> set0 = lock0.release((Locker) null, (MemoryBudget) null, 0);
      assertNull(set0);
  }

  //Test case number: 6
  /*
   * 40 covered goals:
   * 1 Weak Mutation 98: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:248 - ReplaceVariable lockType -> ownedLockType
   * 2 Weak Mutation 99: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:248 - ReplaceVariable ownedLockType -> lockType
   * 3 Weak Mutation 102: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:251 - ReplaceVariable ownedLockType -> lockType
   * 4 Weak Mutation 103: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:251 - ReplaceVariable lockType -> ownedLockType
   * 5 Weak Mutation 104: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:251 - DeleteStatement: getUpgrade(Lcom/sleepycat/je/txn/LockType;)Lcom/sleepycat/je/txn/LockUpgrade;
   * 6 Weak Mutation 106: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:252 - ReplaceComparisonOperator != -> ==
   * 7 Weak Mutation 105: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:252 - DeleteStatement: getPromotion()Z
   * 8 com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z: I19 Branch 31 IF_ACMPNE L248 - true
   * 9 com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z: I34 Branch 32 IFNE L252 - true
   * 10 Weak Mutation 85: com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;:225 - ReplaceComparisonOperator != -> ==
   * 11 Weak Mutation 84: com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;:225 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 12 Weak Mutation 86: com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;:226 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 13 Weak Mutation 81: com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;:225 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 14 Weak Mutation 83: com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;:225 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 15 Weak Mutation 82: com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;:225 - ReplaceComparisonOperator = null -> != null
   * 16 Weak Mutation 102: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:251 - ReplaceVariable ownedLockType -> lockType
   * 17 Weak Mutation 103: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:251 - ReplaceVariable lockType -> ownedLockType
   * 18 Weak Mutation 100: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:248 - ReplaceComparisonOperator != -> ==
   * 19 Weak Mutation 98: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:248 - ReplaceVariable lockType -> ownedLockType
   * 20 Weak Mutation 99: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:248 - ReplaceVariable ownedLockType -> lockType
   * 21 Weak Mutation 96: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:246 - ReplaceComparisonOperator = null -> != null
   * 22 Weak Mutation 97: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:247 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 23 Weak Mutation 108: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:256 - ReplaceConstant - 0 -> 1
   * 24 Weak Mutation 106: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:252 - ReplaceComparisonOperator != -> ==
   * 25 Weak Mutation 104: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:251 - DeleteStatement: getUpgrade(Lcom/sleepycat/je/txn/LockType;)Lcom/sleepycat/je/txn/LockUpgrade;
   * 26 Weak Mutation 105: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:252 - DeleteStatement: getPromotion()Z
   * 27 Weak Mutation 274: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:573 - DeleteStatement: setLockType(Lcom/sleepycat/je/txn/LockType;)V
   * 28 Weak Mutation 273: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:574 - DeleteField: READLcom/sleepycat/je/txn/LockType;
   * 29 Weak Mutation 266: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:570 - ReplaceComparisonOperator = null -> != null
   * 30 Weak Mutation 267: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:571 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 31 Weak Mutation 270: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:573 - DeleteField: RANGE_WRITELcom/sleepycat/je/txn/LockType;
   * 32 Weak Mutation 271: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:573 - ReplaceComparisonOperator != -> ==
   * 33 Weak Mutation 268: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:572 - DeleteStatement: isWriteLock()Z
   * 34 Weak Mutation 269: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:572 - ReplaceComparisonOperator == -> !=
   * 35 com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;: I4 Branch 25 IFNULL L225 - false
   * 36 com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;: I9 Branch 26 IF_ACMPNE L225 - false
   * 37 com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z: I9 Branch 30 IFNULL L246 - false
   * 38 com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V: I9 Branch 122 IFNULL L570 - false
   * 39 com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V: I19 Branch 123 IFEQ L572 - false
   * 40 com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V: I25 Branch 124 IF_ACMPNE L573 - true
   */
  @Test
  public void test6()  throws Throwable  {
      Lock lock0 = new Lock();
      LockType lockType0 = LockType.WRITE;
      LockGrantType lockGrantType0 = lock0.lock(lockType0, (Locker) null, false, (MemoryBudget) null, 0);
      assertNotNull(lockGrantType0);
      
      lock0.demote((Locker) null);
      boolean boolean0 = lock0.isOwner((Locker) null, lockType0);
      assertEquals(1, lock0.nOwners());
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 7 covered goals:
   * 1 Weak Mutation 88: com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;:228 - ReplaceComparisonOperator = null -> != null
   * 2 Weak Mutation 96: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:246 - ReplaceComparisonOperator = null -> != null
   * 3 Weak Mutation 108: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:256 - ReplaceConstant - 0 -> 1
   * 4 com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;: I4 Branch 25 IFNULL L225 - true
   * 5 com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;: I19 Branch 27 IFNULL L228 - true
   * 6 com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z: I9 Branch 30 IFNULL L246 - true
   * 7 Weak Mutation 88: com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;:228 - ReplaceComparisonOperator = null -> != null
   */
  @Test
  public void test7()  throws Throwable  {
      Lock lock0 = new Lock();
      LockType lockType0 = LockType.WRITE;
      boolean boolean0 = lock0.isOwner((Locker) null, lockType0);
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 7 covered goals:
   * 1 Weak Mutation 97: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:247 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 2 Weak Mutation 100: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:248 - ReplaceComparisonOperator != -> ==
   * 3 Weak Mutation 101: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:249 - ReplaceConstant - 1 -> 0
   * 4 com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z: I9 Branch 30 IFNULL L246 - false
   * 5 com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z: I19 Branch 31 IF_ACMPNE L248 - false
   * 6 Weak Mutation 96: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:246 - ReplaceComparisonOperator = null -> != null
   * 7 Weak Mutation 101: com.sleepycat.je.txn.Lock.isOwner(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/LockType;)Z:249 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test8()  throws Throwable  {
      Lock lock0 = new Lock();
      LockType lockType0 = LockType.WRITE;
      LockGrantType lockGrantType0 = lock0.lock(lockType0, (Locker) null, false, (MemoryBudget) null, 0);
      assertNotNull(lockGrantType0);
      
      boolean boolean0 = lock0.isOwner((Locker) null, lockType0);
      assertEquals(1, lock0.nOwners());
      assertEquals(true, boolean0);
  }

  //Test case number: 9
  /*
   * 12 covered goals:
   * 1 Weak Mutation 110: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 2 Weak Mutation 111: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - DeleteStatement: isWriteLock()Z
   * 3 Weak Mutation 109: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - ReplaceComparisonOperator = null -> != null
   * 4 Weak Mutation 113: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - ReplaceConstant - 1 -> 0
   * 5 Weak Mutation 112: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - ReplaceComparisonOperator == -> !=
   * 6 com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z: I9 Branch 33 IFNULL L264 - false
   * 7 com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z: I13 Branch 34 IFEQ L264 - false
   * 8 Weak Mutation 110: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 9 Weak Mutation 111: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - DeleteStatement: isWriteLock()Z
   * 10 Weak Mutation 109: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - ReplaceComparisonOperator = null -> != null
   * 11 Weak Mutation 113: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - ReplaceConstant - 1 -> 0
   * 12 Weak Mutation 112: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - ReplaceComparisonOperator == -> !=
   */
  @Test
  public void test9()  throws Throwable  {
      Lock lock0 = new Lock();
      LockType lockType0 = LockType.WRITE;
      LockGrantType lockGrantType0 = lock0.lock(lockType0, (Locker) null, false, (MemoryBudget) null, 0);
      assertNotNull(lockGrantType0);
      
      boolean boolean0 = lock0.isOwnedWriteLock((Locker) null);
      assertEquals(1, lock0.nOwners());
      assertEquals(true, boolean0);
  }

  //Test case number: 10
  /*
   * 8 covered goals:
   * 1 Weak Mutation 116: com.sleepycat.je.txn.Lock.isWaiter(Lcom/sleepycat/je/txn/Locker;)Z:272 - ReplaceComparisonOperator = null -> != null
   * 2 Weak Mutation 122: com.sleepycat.je.txn.Lock.isWaiter(Lcom/sleepycat/je/txn/Locker;)Z:277 - ReplaceComparisonOperator = null -> != null
   * 3 Weak Mutation 131: com.sleepycat.je.txn.Lock.isWaiter(Lcom/sleepycat/je/txn/Locker;)Z:286 - ReplaceConstant - 0 -> 1
   * 4 com.sleepycat.je.txn.Lock.isWaiter(Lcom/sleepycat/je/txn/Locker;)Z: I4 Branch 35 IFNULL L272 - true
   * 5 com.sleepycat.je.txn.Lock.isWaiter(Lcom/sleepycat/je/txn/Locker;)Z: I20 Branch 37 IFNULL L277 - true
   * 6 Weak Mutation 116: com.sleepycat.je.txn.Lock.isWaiter(Lcom/sleepycat/je/txn/Locker;)Z:272 - ReplaceComparisonOperator = null -> != null
   * 7 Weak Mutation 122: com.sleepycat.je.txn.Lock.isWaiter(Lcom/sleepycat/je/txn/Locker;)Z:277 - ReplaceComparisonOperator = null -> != null
   * 8 Weak Mutation 131: com.sleepycat.je.txn.Lock.isWaiter(Lcom/sleepycat/je/txn/Locker;)Z:286 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test10()  throws Throwable  {
      Lock lock0 = new Lock();
      boolean boolean0 = lock0.isWaiter((Locker) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 35 covered goals:
   * 1 Weak Mutation 150: com.sleepycat.je.txn.Lock.nOwners()I:302 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 2 Weak Mutation 424: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:792 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuffer;
   * 3 Weak Mutation 421: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:792 - ReplaceConstant -  NodeId: -> 
   * 4 Weak Mutation 422: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:792 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 5 Weak Mutation 425: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:793 - ReplaceConstant -  Owners: -> 
   * 6 Weak Mutation 426: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:793 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 7 Weak Mutation 427: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:794 - DeleteStatement: nOwners()I
   * 8 Weak Mutation 428: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:794 - ReplaceComparisonOperator != -> <
   * 9 Weak Mutation 433: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:797 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 10 Weak Mutation 434: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:797 - ReplaceComparisonOperator = null -> != null
   * 11 Weak Mutation 435: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:798 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 12 Weak Mutation 436: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:798 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuffer;
   * 13 Weak Mutation 438: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:800 - ReplaceComparisonOperator = null -> != null
   * 14 Weak Mutation 445: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:808 - ReplaceConstant -  Waiters: -> 
   * 15 Weak Mutation 446: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:808 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 16 com.sleepycat.je.txn.Lock.nOwners()I: I8 Branch 42 IFNULL L302 - false
   * 17 com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;: I25 Branch 176 IFNE L794 - true
   * 18 com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;: I39 Branch 177 IFNULL L797 - false
   * 19 com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;: I51 Branch 178 IFNULL L800 - true
   * 20 com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;: I88 Branch 180 IFNE L809 - false
   * 21 Weak Mutation 150: com.sleepycat.je.txn.Lock.nOwners()I:302 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 22 Weak Mutation 445: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:808 - ReplaceConstant -  Waiters: -> 
   * 23 Weak Mutation 446: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:808 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 24 Weak Mutation 433: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:797 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 25 Weak Mutation 434: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:797 - ReplaceComparisonOperator = null -> != null
   * 26 Weak Mutation 435: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:798 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 27 Weak Mutation 436: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:798 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuffer;
   * 28 Weak Mutation 438: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:800 - ReplaceComparisonOperator = null -> != null
   * 29 Weak Mutation 425: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:793 - ReplaceConstant -  Owners: -> 
   * 30 Weak Mutation 424: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:792 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuffer;
   * 31 Weak Mutation 427: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:794 - DeleteStatement: nOwners()I
   * 32 Weak Mutation 426: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:793 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 33 Weak Mutation 428: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:794 - ReplaceComparisonOperator != -> <
   * 34 Weak Mutation 421: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:792 - ReplaceConstant -  NodeId: -> 
   * 35 Weak Mutation 422: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:792 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   */
  @Test
  public void test11()  throws Throwable  {
      Lock lock0 = new Lock();
      LockType lockType0 = LockType.WRITE;
      LockGrantType lockGrantType0 = lock0.lock(lockType0, (Locker) null, false, (MemoryBudget) null, 0);
      assertNotNull(lockGrantType0);
      
      String string0 = lock0.toString();
      assertEquals(1, lock0.nOwners());
      assertEquals(" NodeId:null Owners:<LockInfo locker=\"null\" type=\"WRITE\"/> Waiters: (none)", string0);
  }

  //Test case number: 12
  /*
   * 18 covered goals:
   * 1 Weak Mutation 276: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:587 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 2 Weak Mutation 279: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:588 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 3 Weak Mutation 278: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:588 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 4 Weak Mutation 281: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:588 - ReplaceComparisonOperator != -> ==
   * 5 Weak Mutation 282: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:590 - ReplaceVariable numRemovedLockInfos -> lockTableIndex
   * 6 com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I12 Branch 125 IFNULL L587 - false
   * 7 com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I19 Branch 126 IF_ACMPNE L588 - false
   * 8 Weak Mutation 275: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:586 - ReplaceConstant - 0 -> 1
   * 9 Weak Mutation 279: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:588 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 10 Weak Mutation 278: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:588 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 11 Weak Mutation 277: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:587 - ReplaceComparisonOperator = null -> != null
   * 12 Weak Mutation 276: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:587 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 13 Weak Mutation 282: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:590 - ReplaceVariable numRemovedLockInfos -> lockTableIndex
   * 14 Weak Mutation 281: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:588 - ReplaceComparisonOperator != -> ==
   * 15 Weak Mutation 290: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:595 - ReplaceComparisonOperator = null -> != null
   * 16 com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I49 Branch 128 IFNULL L595 - true
   * 17 com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I102 Branch 132 IFNULL L607 - true
   * 18 com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I120 Branch 134 IFNULL L611 - true
   */
  @Test
  public void test12()  throws Throwable  {
      Lock lock0 = new Lock();
      LockGrantType lockGrantType0 = lock0.lock((LockType) null, (Locker) null, true, (MemoryBudget) null, 0);
      assertNotNull(lockGrantType0);
      assertEquals(1, lock0.nOwners());
      
      lock0.transfer((Locker) null, (Locker) null, (MemoryBudget) null, 0);
      assertEquals(" NodeId:null Owners: (none) Waiters: (none)", lock0.toString());
  }

  //Test case number: 13
  /*
   * 14 covered goals:
   * 1 Weak Mutation 311: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:647 - InsertUnaryOp Negation of lockTableIndex
   * 2 Weak Mutation 310: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:647 - ReplaceConstant - 0 -> 1
   * 3 Weak Mutation 313: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:647 - InsertUnaryOp IINC -1 lockTableIndex
   * 4 Weak Mutation 312: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:647 - InsertUnaryOp IINC 1 lockTableIndex
   * 5 Weak Mutation 314: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:647 - DeleteStatement: transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;
   * 6 com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I13 Branch 137 IF_ICMPNE L646 - false
   * 7 Weak Mutation 309: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:646 - ReplaceComparisonOperator != -> ==
   * 8 Weak Mutation 308: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:646 - ReplaceConstant - 1 -> 0
   * 9 Weak Mutation 311: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:647 - InsertUnaryOp Negation of lockTableIndex
   * 10 Weak Mutation 310: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:647 - ReplaceConstant - 0 -> 1
   * 11 Weak Mutation 313: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:647 - InsertUnaryOp IINC -1 lockTableIndex
   * 12 Weak Mutation 312: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:647 - InsertUnaryOp IINC 1 lockTableIndex
   * 13 Weak Mutation 314: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:647 - DeleteStatement: transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;
   * 14 com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I12 Branch 125 IFNULL L587 - true
   */
  @Test
  public void test13()  throws Throwable  {
      Lock lock0 = new Lock();
      Locker[] lockerArray0 = new Locker[1];
      LockType lockType0 = lock0.transferMultiple((Locker) null, lockerArray0, (MemoryBudget) null, 1908);
      assertNull(lockType0);
  }

  //Test case number: 14
  /*
   * 96 covered goals:
   * 1 Weak Mutation 325: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - ReplaceVariable i -> lockTableIndex
   * 2 Weak Mutation 332: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - ReplaceComparisonOperator < -> <=
   * 3 Weak Mutation 340: com.sleepycat.je.txn.Lock.cloneLockInfo(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:717 - ReplaceComparisonOperator != -> ==
   * 4 Weak Mutation 339: com.sleepycat.je.txn.Lock.cloneLockInfo(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:717 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 5 com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I60 Branch 140 IF_ICMPLT L650 - false
   * 6 com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I44 Branch 139 IF_ACMPNE L651 - true
   * 7 com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I119 Branch 145 IFNULL L669 - false
   * 8 com.sleepycat.je.txn.Lock.cloneLockInfo(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;: I5 Branch 159 IF_ACMPNE L717 - true
   * 9 Weak Mutation 54: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/dbi/MemoryBudget;I)Z:170 - ReplaceComparisonOperator = null -> != null
   * 10 Weak Mutation 53: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/dbi/MemoryBudget;I)Z:169 - ReplaceConstant - 0 -> 1
   * 11 Weak Mutation 62: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/dbi/MemoryBudget;I)Z:187 - InsertUnaryOp Negation of removed
   * 12 Weak Mutation 275: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:586 - ReplaceConstant - 0 -> 1
   * 13 Weak Mutation 279: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:588 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 14 Weak Mutation 278: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:588 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 15 Weak Mutation 277: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:587 - ReplaceComparisonOperator = null -> != null
   * 16 Weak Mutation 276: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:587 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 17 Weak Mutation 283: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:591 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 18 Weak Mutation 281: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:588 - ReplaceComparisonOperator != -> ==
   * 19 Weak Mutation 280: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:588 - ReplaceVariable destLocker -> currentLocker
   * 20 Weak Mutation 287: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:592 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 21 Weak Mutation 286: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:591 - ReplaceComparisonOperator != -> ==
   * 22 Weak Mutation 285: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:591 - ReplaceVariable currentLocker -> destLocker
   * 23 Weak Mutation 284: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:591 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 24 Weak Mutation 305: com.sleepycat.je.txn.Lock.setNewLocker(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockType;:633 - DeleteField: NEWLcom/sleepycat/je/txn/LockGrantType;
   * 25 Weak Mutation 304: com.sleepycat.je.txn.Lock.setNewLocker(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockType;:633 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 26 Weak Mutation 307: com.sleepycat.je.txn.Lock.setNewLocker(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockType;:634 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 27 Weak Mutation 306: com.sleepycat.je.txn.Lock.setNewLocker(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockType;:633 - DeleteStatement: addLock(Ljava/lang/Long;Lcom/sleepycat/je/txn/Lock;Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/LockGrantType;)V
   * 28 Weak Mutation 309: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:646 - ReplaceComparisonOperator != -> ==
   * 29 Weak Mutation 308: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:646 - ReplaceConstant - 1 -> 0
   * 30 Weak Mutation 315: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:649 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 31 Weak Mutation 317: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - ReplaceConstant - 0 -> 1
   * 32 Weak Mutation 316: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:649 - ReplaceComparisonOperator = null -> != null
   * 33 Weak Mutation 319: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:651 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 34 Weak Mutation 318: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:651 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 35 Weak Mutation 288: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:592 - ReplaceVariable destLocker -> currentLocker
   * 36 Weak Mutation 290: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:595 - ReplaceComparisonOperator = null -> != null
   * 37 Weak Mutation 302: com.sleepycat.je.txn.Lock.setNewLocker(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockType;:631 - DeleteStatement: setLocker(Lcom/sleepycat/je/txn/Locker;)V
   * 38 Weak Mutation 326: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - ReplaceVariable i -> lockTableIndex
   * 39 Weak Mutation 327: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - InsertUnaryOp Negation of i
   * 40 Weak Mutation 324: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:651 - ReplaceComparisonOperator != -> ==
   * 41 Weak Mutation 322: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:651 - InsertUnaryOp IINC 1 i
   * 42 Weak Mutation 323: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:651 - InsertUnaryOp IINC -1 i
   * 43 Weak Mutation 320: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:651 - ReplaceVariable i -> lockTableIndex
   * 44 Weak Mutation 321: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:651 - InsertUnaryOp Negation of i
   * 45 Weak Mutation 334: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:657 - ReplaceComparisonOperator = null -> != null
   * 46 Weak Mutation 331: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - ReplaceComparisonOperator < -> -2
   * 47 Weak Mutation 328: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - InsertUnaryOp IINC 1 i
   * 48 Weak Mutation 329: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - InsertUnaryOp IINC -1 i
   * 49 Weak Mutation 54: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/dbi/MemoryBudget;I)Z:170 - ReplaceComparisonOperator = null -> != null
   * 50 Weak Mutation 53: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/dbi/MemoryBudget;I)Z:169 - ReplaceConstant - 0 -> 1
   * 51 Weak Mutation 62: com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/dbi/MemoryBudget;I)Z:187 - InsertUnaryOp Negation of removed
   * 52 Weak Mutation 283: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:591 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 53 Weak Mutation 280: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:588 - ReplaceVariable destLocker -> currentLocker
   * 54 Weak Mutation 287: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:592 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 55 Weak Mutation 286: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:591 - ReplaceComparisonOperator != -> ==
   * 56 Weak Mutation 285: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:591 - ReplaceVariable currentLocker -> destLocker
   * 57 Weak Mutation 284: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:591 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 58 Weak Mutation 305: com.sleepycat.je.txn.Lock.setNewLocker(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockType;:633 - DeleteField: NEWLcom/sleepycat/je/txn/LockGrantType;
   * 59 Weak Mutation 304: com.sleepycat.je.txn.Lock.setNewLocker(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockType;:633 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 60 Weak Mutation 307: com.sleepycat.je.txn.Lock.setNewLocker(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockType;:634 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 61 Weak Mutation 306: com.sleepycat.je.txn.Lock.setNewLocker(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockType;:633 - DeleteStatement: addLock(Ljava/lang/Long;Lcom/sleepycat/je/txn/Lock;Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/LockGrantType;)V
   * 62 Weak Mutation 315: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:649 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 63 Weak Mutation 317: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - ReplaceConstant - 0 -> 1
   * 64 Weak Mutation 316: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:649 - ReplaceComparisonOperator = null -> != null
   * 65 Weak Mutation 319: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:651 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 66 Weak Mutation 318: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:651 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 67 Weak Mutation 288: com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:592 - ReplaceVariable destLocker -> currentLocker
   * 68 Weak Mutation 302: com.sleepycat.je.txn.Lock.setNewLocker(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockType;:631 - DeleteStatement: setLocker(Lcom/sleepycat/je/txn/Locker;)V
   * 69 Weak Mutation 340: com.sleepycat.je.txn.Lock.cloneLockInfo(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:717 - ReplaceComparisonOperator != -> ==
   * 70 Weak Mutation 339: com.sleepycat.je.txn.Lock.cloneLockInfo(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockInfo;:717 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 71 Weak Mutation 326: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - ReplaceVariable i -> lockTableIndex
   * 72 Weak Mutation 327: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - InsertUnaryOp Negation of i
   * 73 Weak Mutation 324: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:651 - ReplaceComparisonOperator != -> ==
   * 74 Weak Mutation 325: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - ReplaceVariable i -> lockTableIndex
   * 75 Weak Mutation 322: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:651 - InsertUnaryOp IINC 1 i
   * 76 Weak Mutation 323: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:651 - InsertUnaryOp IINC -1 i
   * 77 Weak Mutation 320: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:651 - ReplaceVariable i -> lockTableIndex
   * 78 Weak Mutation 321: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:651 - InsertUnaryOp Negation of i
   * 79 Weak Mutation 334: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:657 - ReplaceComparisonOperator = null -> != null
   * 80 Weak Mutation 332: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - ReplaceComparisonOperator < -> <=
   * 81 Weak Mutation 331: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - ReplaceComparisonOperator < -> -2
   * 82 Weak Mutation 328: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - InsertUnaryOp IINC 1 i
   * 83 Weak Mutation 329: com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;:650 - InsertUnaryOp IINC -1 i
   * 84 com.sleepycat.je.txn.Lock.setNewLocker(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockType;: root-Branch
   * 85 com.sleepycat.je.txn.Lock.flushOwner(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/dbi/MemoryBudget;I)Z: I7 Branch 17 IFNULL L170 - true
   * 86 com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I19 Branch 126 IF_ACMPNE L588 - true
   * 87 com.sleepycat.je.txn.Lock.transfer(Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I36 Branch 127 IF_ACMPNE L591 - false
   * 88 com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I13 Branch 137 IF_ICMPNE L646 - true
   * 89 com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I29 Branch 138 IFNULL L649 - false
   * 90 com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I60 Branch 140 IF_ICMPLT L650 - true
   * 91 com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I65 Branch 141 IFNULL L657 - true
   * 92 com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I139 Branch 146 IFNULL L673 - true
   * 93 com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I187 Branch 150 IFNULL L684 - true
   * 94 com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I223 Branch 153 IFNULL L692 - true
   * 95 com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I284 Branch 157 IFNE L706 - false
   * 96 com.sleepycat.je.txn.Lock.transferMultiple(Lcom/sleepycat/je/txn/Locker;[Lcom/sleepycat/je/txn/Locker;Lcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockType;: I286 Branch 158 IFNE L706 - false
   */
  @Test
  public void test14()  throws Throwable  {
      Lock lock0 = new Lock();
      LockType lockType0 = LockType.WRITE;
      LockGrantType lockGrantType0 = lock0.lock(lockType0, (Locker) null, false, (MemoryBudget) null, 0);
      assertNotNull(lockGrantType0);
      
      Locker[] lockerArray0 = new Locker[4];
      Txn txn0 = new Txn();
      lock0.transfer((Locker) null, (Locker) txn0, (MemoryBudget) null, 0);
      // Undeclared exception!
      try {
        lock0.transferMultiple((Locker) null, lockerArray0, (MemoryBudget) null, 1743);
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
      }
  }

  //Test case number: 15
  /*
   * 12 covered goals:
   * 1 Weak Mutation 371: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:743 - ReplaceComparisonOperator = null -> != null
   * 2 Weak Mutation 375: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:746 - ReplaceComparisonOperator = null -> != null
   * 3 Weak Mutation 377: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:748 - ReplaceComparisonOperator = null -> != null
   * 4 Weak Mutation 389: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:751 - ReplaceComparisonOperator != null -> = null
   * 5 com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;: I12 Branch 161 IFNULL L743 - true
   * 6 com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;: I23 Branch 162 IFNULL L746 - true
   * 7 com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;: I34 Branch 163 IFNULL L748 - true
   * 8 com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;: I81 Branch 168 IFNONNULL L751 - false
   * 9 Weak Mutation 375: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:746 - ReplaceComparisonOperator = null -> != null
   * 10 Weak Mutation 371: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:743 - ReplaceComparisonOperator = null -> != null
   * 11 Weak Mutation 377: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:748 - ReplaceComparisonOperator = null -> != null
   * 12 Weak Mutation 389: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:751 - ReplaceComparisonOperator != null -> = null
   */
  @Test
  public void test15()  throws Throwable  {
      Lock lock0 = new Lock();
      Locker locker0 = lock0.getWriteOwnerLocker();
      assertNull(locker0);
  }

  //Test case number: 16
  /*
   * 15 covered goals:
   * 1 Weak Mutation 374: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:746 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 2 Weak Mutation 376: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:747 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 3 Weak Mutation 381: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:752 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 4 Weak Mutation 383: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:752 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 382: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:752 - DeleteStatement: isWriteLock()Z
   * 6 Weak Mutation 384: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:753 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 7 com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;: I23 Branch 162 IFNULL L746 - false
   * 8 com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;: I81 Branch 168 IFNONNULL L751 - true
   * 9 com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;: I52 Branch 165 IFEQ L752 - false
   * 10 Weak Mutation 374: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:746 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 11 Weak Mutation 381: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:752 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 12 Weak Mutation 383: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:752 - ReplaceComparisonOperator == -> !=
   * 13 Weak Mutation 382: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:752 - DeleteStatement: isWriteLock()Z
   * 14 Weak Mutation 376: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:747 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 15 Weak Mutation 384: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:753 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   */
  @Test
  public void test16()  throws Throwable  {
      Lock lock0 = new Lock();
      LockType lockType0 = LockType.WRITE;
      LockGrantType lockGrantType0 = lock0.lock(lockType0, (Locker) null, false, (MemoryBudget) null, 0);
      assertNotNull(lockGrantType0);
      
      lock0.getWriteOwnerLocker();
      assertEquals(1, lock0.nOwners());
      assertEquals(" NodeId:null Owners:<LockInfo locker=\"null\" type=\"WRITE\"/> Waiters: (none)", lock0.toString());
  }

  //Test case number: 17
  /*
   * 12 covered goals:
   * 1 Weak Mutation 385: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:755 - ReplaceComparisonOperator = null -> != null
   * 2 com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;: I52 Branch 165 IFEQ L752 - true
   * 3 com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;: I61 Branch 166 IFNULL L755 - true
   * 4 Weak Mutation 375: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:746 - ReplaceComparisonOperator = null -> != null
   * 5 Weak Mutation 374: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:746 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 6 Weak Mutation 371: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:743 - ReplaceComparisonOperator = null -> != null
   * 7 Weak Mutation 381: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:752 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 8 Weak Mutation 383: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:752 - ReplaceComparisonOperator == -> !=
   * 9 Weak Mutation 382: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:752 - DeleteStatement: isWriteLock()Z
   * 10 Weak Mutation 376: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:747 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 11 Weak Mutation 389: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:751 - ReplaceComparisonOperator != null -> = null
   * 12 Weak Mutation 385: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:755 - ReplaceComparisonOperator = null -> != null
   */
  @Test
  public void test17()  throws Throwable  {
      Lock lock0 = new Lock();
      LockType lockType0 = LockType.WRITE;
      LockGrantType lockGrantType0 = lock0.lock(lockType0, (Locker) null, false, (MemoryBudget) null, 0);
      assertNotNull(lockGrantType0);
      
      lock0.demote((Locker) null);
      lock0.getWriteOwnerLocker();
      assertEquals(1, lock0.nOwners());
      assertEquals(" NodeId:null Owners:<LockInfo locker=\"null\" type=\"READ\"/> Waiters: (none)", lock0.toString());
  }

  //Test case number: 18
  /*
   * 17 covered goals:
   * 1 Weak Mutation 423: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:792 - DeleteField: nodeIdLjava/lang/Long;
   * 2 Weak Mutation 430: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:794 - ReplaceComparisonOperator != -> -1
   * 3 Weak Mutation 432: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:795 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 4 Weak Mutation 431: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:795 - ReplaceConstant -  (none) -> 
   * 5 com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;: I25 Branch 176 IFNE L794 - false
   * 6 Weak Mutation 445: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:808 - ReplaceConstant -  Waiters: -> 
   * 7 Weak Mutation 446: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:808 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 8 Weak Mutation 425: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:793 - ReplaceConstant -  Owners: -> 
   * 9 Weak Mutation 424: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:792 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuffer;
   * 10 Weak Mutation 427: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:794 - DeleteStatement: nOwners()I
   * 11 Weak Mutation 426: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:793 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 12 Weak Mutation 421: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:792 - ReplaceConstant -  NodeId: -> 
   * 13 Weak Mutation 422: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:792 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 14 Weak Mutation 432: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:795 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 15 Weak Mutation 431: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:795 - ReplaceConstant -  (none) -> 
   * 16 Weak Mutation 430: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:794 - ReplaceComparisonOperator != -> -1
   * 17 Weak Mutation 423: com.sleepycat.je.txn.Lock.toString()Ljava/lang/String;:792 - DeleteField: nodeIdLjava/lang/Long;
   */
  @Test
  public void test18()  throws Throwable  {
      Long long0 = new Long((-846L));
      Lock lock0 = new Lock(long0);
      String string0 = lock0.toString();
      assertEquals(" NodeId:-846 Owners: (none) Waiters: (none)", string0);
      assertNotNull(string0);
  }

  //Test case number: 19
  /*
   * 7 covered goals:
   * 1 com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z: I13 Branch 34 IFEQ L264 - true
   * 2 Weak Mutation 110: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 3 Weak Mutation 111: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - DeleteStatement: isWriteLock()Z
   * 4 Weak Mutation 109: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - ReplaceComparisonOperator = null -> != null
   * 5 Weak Mutation 114: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - ReplaceConstant - 0 -> 1
   * 6 Weak Mutation 112: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 114: com.sleepycat.je.txn.Lock.isOwnedWriteLock(Lcom/sleepycat/je/txn/Locker;)Z:264 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test19()  throws Throwable  {
      Lock lock0 = new Lock();
      LockType lockType0 = LockType.WRITE;
      LockGrantType lockGrantType0 = lock0.lock(lockType0, (Locker) null, false, (MemoryBudget) null, 0);
      assertNotNull(lockGrantType0);
      
      lock0.demote((Locker) null);
      boolean boolean0 = lock0.isOwnedWriteLock((Locker) null);
      assertEquals(1, lock0.nOwners());
      assertEquals(false, boolean0);
  }

  //Test case number: 20
  /*
   * 38 covered goals:
   * 1 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I193 Branch 103 IFNONNULL L483 - false
   * 2 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I124 Branch 97 IFNONNULL L489 - true
   * 3 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I173 Branch 101 IFNULL L507 - true
   * 4 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I197 Branch 104 IFNULL L513 - false
   * 5 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I206 Branch 105 IFNE L515 - false
   * 6 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I208 Branch 106 IFNONNULL L515 - true
   * 7 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I216 Branch 107 IFNE L516 - false
   * 8 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I226 Branch 108 IFEQ L518 - false
   * 9 Weak Mutation 150: com.sleepycat.je.txn.Lock.nOwners()I:302 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 10 Weak Mutation 217: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:463 - ReplaceComparisonOperator != -> <
   * 11 Weak Mutation 234: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:479 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 12 Weak Mutation 233: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:478 - ReplaceComparisonOperator = null -> != null
   * 13 Weak Mutation 232: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:478 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 14 Weak Mutation 229: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:475 - ReplaceComparisonOperator = null -> != null
   * 15 Weak Mutation 227: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:472 - ReplaceConstant - 0 -> 1
   * 16 Weak Mutation 226: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:471 - ReplaceConstant - 0 -> 1
   * 17 Weak Mutation 225: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:468 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 18 Weak Mutation 224: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:467 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 19 Weak Mutation 274: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:573 - DeleteStatement: setLockType(Lcom/sleepycat/je/txn/LockType;)V
   * 20 Weak Mutation 273: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:574 - DeleteField: READLcom/sleepycat/je/txn/LockType;
   * 21 Weak Mutation 270: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:573 - DeleteField: RANGE_WRITELcom/sleepycat/je/txn/LockType;
   * 22 Weak Mutation 271: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:573 - ReplaceComparisonOperator != -> ==
   * 23 Weak Mutation 217: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:463 - ReplaceComparisonOperator != -> <
   * 24 Weak Mutation 234: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:479 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 25 Weak Mutation 233: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:478 - ReplaceComparisonOperator = null -> != null
   * 26 Weak Mutation 232: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:478 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 27 Weak Mutation 229: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:475 - ReplaceComparisonOperator = null -> != null
   * 28 Weak Mutation 227: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:472 - ReplaceConstant - 0 -> 1
   * 29 Weak Mutation 226: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:471 - ReplaceConstant - 0 -> 1
   * 30 Weak Mutation 225: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:468 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 31 Weak Mutation 224: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:467 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 32 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I4 Branch 89 IFNE L463 - true
   * 33 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I54 Branch 90 IFNULL L475 - true
   * 34 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I65 Branch 91 IFNULL L478 - false
   * 35 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I103 Branch 94 IF_ACMPNE L486 - false
   * 36 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I107 Branch 95 IFNE L487 - false
   * 37 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I109 Branch 96 IFNULL L487 - true
   * 38 com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;: I193 Branch 103 IFNONNULL L483 - true
   */
  @Test
  public void test20()  throws Throwable  {
      Lock lock0 = new Lock();
      LockType lockType0 = LockType.WRITE;
      LockGrantType lockGrantType0 = lock0.lock(lockType0, (Locker) null, false, (MemoryBudget) null, 0);
      assertNotNull(lockGrantType0);
      
      lock0.demote((Locker) null);
      lock0.lock(lockType0, (Locker) null, false, (MemoryBudget) null, 0);
      assertEquals(1, lock0.nOwners());
      assertEquals(" NodeId:null Owners:<LockInfo locker=\"null\" type=\"WRITE\"/> Waiters: (none)", lock0.toString());
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * 1 com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V: I9 Branch 122 IFNULL L570 - true
   * 2 Weak Mutation 88: com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;:228 - ReplaceComparisonOperator = null -> != null
   */
  @Test
  public void test21()  throws Throwable  {
      Lock lock0 = new Lock();
      lock0.demote((Locker) null);
      assertEquals(0, lock0.nWaiters());
  }

  //Test case number: 22
  /*
   * 48 covered goals:
   * 1 com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V: I19 Branch 123 IFEQ L572 - true
   * 2 Weak Mutation 41: com.sleepycat.je.txn.Lock.addOwner(Lcom/sleepycat/je/txn/LockInfo;Lcom/sleepycat/je/dbi/MemoryBudget;I)V:135 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 85: com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;:225 - ReplaceComparisonOperator != -> ==
   * 4 Weak Mutation 84: com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;:225 - DeleteStatement: getLocker()Lcom/sleepycat/je/txn/Locker;
   * 5 Weak Mutation 86: com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;:226 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 6 Weak Mutation 81: com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;:225 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 7 Weak Mutation 83: com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;:225 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 8 Weak Mutation 82: com.sleepycat.je.txn.Lock.getOwnerLockInfo(Lcom/sleepycat/je/txn/Locker;)Lcom/sleepycat/je/txn/LockInfo;:225 - ReplaceComparisonOperator = null -> != null
   * 9 Weak Mutation 136: com.sleepycat.je.txn.Lock.nWaiters()I:294 - ReplaceComparisonOperator = null -> != null
   * 10 Weak Mutation 132: com.sleepycat.je.txn.Lock.nWaiters()I:290 - ReplaceConstant - 0 -> 1
   * 11 Weak Mutation 134: com.sleepycat.je.txn.Lock.nWaiters()I:291 - ReplaceComparisonOperator = null -> != null
   * 12 Weak Mutation 153: com.sleepycat.je.txn.Lock.nOwners()I:305 - ReplaceComparisonOperator = null -> != null
   * 13 Weak Mutation 146: com.sleepycat.je.txn.Lock.nWaiters()I:297 - InsertUnaryOp Negation of count
   * 14 Weak Mutation 147: com.sleepycat.je.txn.Lock.nWaiters()I:297 - InsertUnaryOp IINC 1 count
   * 15 Weak Mutation 148: com.sleepycat.je.txn.Lock.nWaiters()I:297 - InsertUnaryOp IINC -1 count
   * 16 Weak Mutation 149: com.sleepycat.je.txn.Lock.nOwners()I:301 - ReplaceConstant - 0 -> 1
   * 17 Weak Mutation 151: com.sleepycat.je.txn.Lock.nOwners()I:302 - ReplaceComparisonOperator = null -> != null
   * 18 Weak Mutation 170: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:319 - DeleteStatement: nWaiters()I
   * 19 Weak Mutation 169: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:317 - ReplaceComparisonOperator != -> ==
   * 20 Weak Mutation 168: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:317 - ReplaceComparisonOperator != -> ==
   * 21 Weak Mutation 174: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:319 - ReplaceConstant - 1 -> 0
   * 22 Weak Mutation 173: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:319 - ReplaceComparisonOperator != -> -1
   * 23 Weak Mutation 163: com.sleepycat.je.txn.Lock.nOwners()I:308 - InsertUnaryOp Negation of count
   * 24 Weak Mutation 166: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:317 - InsertUnaryOp Negation
   * 25 Weak Mutation 165: com.sleepycat.je.txn.Lock.nOwners()I:308 - InsertUnaryOp IINC -1 count
   * 26 Weak Mutation 164: com.sleepycat.je.txn.Lock.nOwners()I:308 - InsertUnaryOp IINC 1 count
   * 27 Weak Mutation 184: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:323 - ReplaceComparisonOperator != -> ==
   * 28 Weak Mutation 178: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:320 - InsertUnaryOp IINC -1 lockTableIndex
   * 29 Weak Mutation 179: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:321 - DeleteField: WAIT_NEWLcom/sleepycat/je/txn/LockGrantType;
   * 30 Weak Mutation 176: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:320 - InsertUnaryOp Negation of lockTableIndex
   * 31 Weak Mutation 177: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:320 - InsertUnaryOp IINC 1 lockTableIndex
   * 32 Weak Mutation 182: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:322 - ReplaceComparisonOperator == -> !=
   * 33 Weak Mutation 183: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:323 - DeleteField: WAIT_RESTARTLcom/sleepycat/je/txn/LockGrantType;
   * 34 Weak Mutation 180: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:321 - ReplaceComparisonOperator == -> !=
   * 35 Weak Mutation 181: com.sleepycat.je.txn.Lock.lock(Lcom/sleepycat/je/txn/LockType;Lcom/sleepycat/je/txn/Locker;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:322 - DeleteField: WAIT_PROMOTIONLcom/sleepycat/je/txn/LockGrantType;
   * 36 Weak Mutation 220: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:464 - InsertUnaryOp Negation of lockTableIndex
   * 37 Weak Mutation 221: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:464 - InsertUnaryOp IINC 1 lockTableIndex
   * 38 Weak Mutation 222: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:464 - InsertUnaryOp IINC -1 lockTableIndex
   * 39 Weak Mutation 223: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:465 - DeleteField: NEWLcom/sleepycat/je/txn/LockGrantType;
   * 40 Weak Mutation 216: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:463 - DeleteStatement: nOwners()I
   * 41 Weak Mutation 219: com.sleepycat.je.txn.Lock.tryLock(Lcom/sleepycat/je/txn/LockInfo;ZLcom/sleepycat/je/dbi/MemoryBudget;I)Lcom/sleepycat/je/txn/LockGrantType;:463 - ReplaceComparisonOperator != -> -1
   * 42 Weak Mutation 266: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:570 - ReplaceComparisonOperator = null -> != null
   * 43 Weak Mutation 267: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:571 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 44 Weak Mutation 268: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:572 - DeleteStatement: isWriteLock()Z
   * 45 Weak Mutation 269: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:572 - ReplaceComparisonOperator == -> !=
   * 46 Weak Mutation 404: com.sleepycat.je.txn.Lock.validateRequest(Lcom/sleepycat/je/txn/Locker;)Z:774 - ReplaceComparisonOperator = null -> != null
   * 47 Weak Mutation 391: com.sleepycat.je.txn.Lock.validateRequest(Lcom/sleepycat/je/txn/Locker;)Z:768 - ReplaceComparisonOperator = null -> != null
   * 48 Weak Mutation 420: com.sleepycat.je.txn.Lock.validateRequest(Lcom/sleepycat/je/txn/Locker;)Z:784 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test22()  throws Throwable  {
      Lock lock0 = new Lock();
      LockType lockType0 = LockType.NONE;
      LockGrantType lockGrantType0 = lock0.lock(lockType0, (Locker) null, false, (MemoryBudget) null, 0);
      assertNotNull(lockGrantType0);
      
      lock0.demote((Locker) null);
      assertEquals(1, lock0.nOwners());
  }
}
