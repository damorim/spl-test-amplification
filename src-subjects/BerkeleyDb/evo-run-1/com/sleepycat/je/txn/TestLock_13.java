/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.txn;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.dbi.MemoryBudget;
import com.sleepycat.je.txn.Lock;
import com.sleepycat.je.txn.LockGrantType;
import com.sleepycat.je.txn.LockType;
import com.sleepycat.je.txn.Locker;
import java.util.List;
import java.util.Set;

@RunWith(EvoSuiteRunner.class)
public class TestLock_13 {


  //Test case number: 13
  /*
   * 30 covered goals:
   * 1 Weak Mutation 367: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:722 - ReplaceComparisonOperator = null -> != null
   * 2 com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;: I52 Branch 165 IFEQ L719 - true
   * 3 com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;: I61 Branch 166 IFNULL L722 - true
   * 4 Weak Mutation 266: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:551 - DeleteField: RANGE_READLcom/sleepycat/je/txn/LockType;
   * 5 Weak Mutation 264: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:551 - DeleteField: RANGE_WRITELcom/sleepycat/je/txn/LockType;
   * 6 Weak Mutation 265: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:551 - ReplaceComparisonOperator != -> ==
   * 7 Weak Mutation 268: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:551 - DeleteStatement: setLockType(Lcom/sleepycat/je/txn/LockType;)V
   * 8 Weak Mutation 262: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:550 - DeleteStatement: isWriteLock()Z
   * 9 Weak Mutation 263: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:550 - ReplaceComparisonOperator == -> !=
   * 10 Weak Mutation 261: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:549 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 11 Weak Mutation 266: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:551 - DeleteField: RANGE_READLcom/sleepycat/je/txn/LockType;
   * 12 Weak Mutation 264: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:551 - DeleteField: RANGE_WRITELcom/sleepycat/je/txn/LockType;
   * 13 Weak Mutation 265: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:551 - ReplaceComparisonOperator != -> ==
   * 14 Weak Mutation 268: com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V:551 - DeleteStatement: setLockType(Lcom/sleepycat/je/txn/LockType;)V
   * 15 Weak Mutation 356: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:712 - ReplaceComparisonOperator = null -> != null
   * 16 Weak Mutation 357: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:713 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 17 Weak Mutation 352: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:709 - ReplaceComparisonOperator = null -> != null
   * 18 Weak Mutation 355: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:712 - DeleteField: firstOwnerLcom/sleepycat/je/txn/LockInfo;
   * 19 Weak Mutation 364: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:719 - DeleteStatement: isWriteLock()Z
   * 20 Weak Mutation 365: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:719 - ReplaceComparisonOperator == -> !=
   * 21 Weak Mutation 367: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:722 - ReplaceComparisonOperator = null -> != null
   * 22 Weak Mutation 362: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:718 - ReplaceComparisonOperator = null -> != null
   * 23 Weak Mutation 363: com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;:719 - DeleteStatement: getLockType()Lcom/sleepycat/je/txn/LockType;
   * 24 com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;: I12 Branch 160 IFNULL L709 - true
   * 25 com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;: I23 Branch 161 IFNULL L712 - false
   * 26 com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;: I46 Branch 164 IFNULL L718 - true
   * 27 com.sleepycat.je.txn.Lock.getWriteOwnerLocker()Lcom/sleepycat/je/txn/Locker;: I46 Branch 164 IFNULL L718 - false
   * 28 com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V: I9 Branch 121 IFNULL L548 - false
   * 29 com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V: I19 Branch 122 IFEQ L550 - false
   * 30 com.sleepycat.je.txn.Lock.demote(Lcom/sleepycat/je/txn/Locker;)V: I25 Branch 123 IF_ACMPNE L551 - false
   */
  @Test
  public void test13()  throws Throwable  {
      Lock lock0 = new Lock((Long) (-308L));
      LockType lockType0 = LockType.RANGE_WRITE;
      LockGrantType lockGrantType0 = lock0.lock(lockType0, (Locker) null, false, (MemoryBudget) null, 0);
      assertNotNull(lockGrantType0);
      
      lock0.demote((Locker) null);
      lock0.getWriteOwnerLocker();
      assertEquals(1, lock0.nOwners());
      assertEquals(" NodeId:-308 Owners:<LockInfo locker=\"null\" type=\"RANGE_READ\"/> Waiters: (none)", lock0.toString());
  }
}
