/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.dbi;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseId;
import java.nio.ByteBuffer;

@RunWith(EvoSuiteRunner.class)
public class TestDatabaseId {


  //Test case number: 0
  /*
   * 13 covered goals:
   * 1 Weak Mutation 27: com.sleepycat.je.dbi.DatabaseId.hashCode()I:56 - InsertUnaryOp Negation
   * 2 Weak Mutation 29: com.sleepycat.je.dbi.DatabaseId.hashCode()I:56 - InsertUnaryOp -1
   * 3 Weak Mutation 28: com.sleepycat.je.dbi.DatabaseId.hashCode()I:56 - InsertUnaryOp +1
   * 4 Weak Mutation 30: com.sleepycat.je.dbi.DatabaseId.hashCode()I:56 - DeleteField: idI
   * 5 com.sleepycat.je.dbi.DatabaseId.hashCode()I: root-Branch
   * 6 Weak Mutation 0: com.sleepycat.je.dbi.DatabaseId.<init>(I)V:19 - InsertUnaryOp Negation of id
   * 7 Weak Mutation 1: com.sleepycat.je.dbi.DatabaseId.<init>(I)V:19 - InsertUnaryOp IINC 1 id
   * 8 Weak Mutation 2: com.sleepycat.je.dbi.DatabaseId.<init>(I)V:19 - InsertUnaryOp IINC -1 id
   * 9 Weak Mutation 27: com.sleepycat.je.dbi.DatabaseId.hashCode()I:56 - InsertUnaryOp Negation
   * 10 Weak Mutation 29: com.sleepycat.je.dbi.DatabaseId.hashCode()I:56 - InsertUnaryOp -1
   * 11 Weak Mutation 28: com.sleepycat.je.dbi.DatabaseId.hashCode()I:56 - InsertUnaryOp +1
   * 12 Weak Mutation 30: com.sleepycat.je.dbi.DatabaseId.hashCode()I:56 - DeleteField: idI
   * 13 com.sleepycat.je.dbi.DatabaseId.<init>(I)V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-1));
      int int0 = databaseId0.hashCode();
      assertEquals((-1), int0);
  }

  //Test case number: 1
  /*
   * 9 covered goals:
   * 1 Weak Mutation 3: com.sleepycat.je.dbi.DatabaseId.getId()I:30 - InsertUnaryOp Negation
   * 2 Weak Mutation 4: com.sleepycat.je.dbi.DatabaseId.getId()I:30 - InsertUnaryOp +1
   * 3 Weak Mutation 5: com.sleepycat.je.dbi.DatabaseId.getId()I:30 - InsertUnaryOp -1
   * 4 Weak Mutation 6: com.sleepycat.je.dbi.DatabaseId.getId()I:30 - DeleteField: idI
   * 5 com.sleepycat.je.dbi.DatabaseId.getId()I: root-Branch
   * 6 Weak Mutation 3: com.sleepycat.je.dbi.DatabaseId.getId()I:30 - InsertUnaryOp Negation
   * 7 Weak Mutation 4: com.sleepycat.je.dbi.DatabaseId.getId()I:30 - InsertUnaryOp +1
   * 8 Weak Mutation 5: com.sleepycat.je.dbi.DatabaseId.getId()I:30 - InsertUnaryOp -1
   * 9 Weak Mutation 6: com.sleepycat.je.dbi.DatabaseId.getId()I:30 - DeleteField: idI
   */
  @Test
  public void test1()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-2));
      int int0 = databaseId0.getId();
      assertEquals((-2), int0);
  }

  //Test case number: 2
  /*
   * 18 covered goals:
   * 1 Weak Mutation 7: com.sleepycat.je.dbi.DatabaseId.getBytes()[B:37 - DeleteStatement: toString()Ljava/lang/String;
   * 2 Weak Mutation 8: com.sleepycat.je.dbi.DatabaseId.getBytes()[B:37 - ReplaceConstant - UTF-8 -> 
   * 3 Weak Mutation 9: com.sleepycat.je.dbi.DatabaseId.getBytes()[B:37 - DeleteStatement: getBytes(Ljava/lang/String;)[B
   * 4 Weak Mutation 31: com.sleepycat.je.dbi.DatabaseId.toString()Ljava/lang/String;:59 - InsertUnaryOp Negation
   * 5 Weak Mutation 34: com.sleepycat.je.dbi.DatabaseId.toString()Ljava/lang/String;:59 - DeleteField: idI
   * 6 Weak Mutation 35: com.sleepycat.je.dbi.DatabaseId.toString()Ljava/lang/String;:59 - DeleteStatement: toString(I)Ljava/lang/String;
   * 7 Weak Mutation 32: com.sleepycat.je.dbi.DatabaseId.toString()Ljava/lang/String;:59 - InsertUnaryOp +1
   * 8 Weak Mutation 33: com.sleepycat.je.dbi.DatabaseId.toString()Ljava/lang/String;:59 - InsertUnaryOp -1
   * 9 com.sleepycat.je.dbi.DatabaseId.toString()Ljava/lang/String;: root-Branch
   * 10 com.sleepycat.je.dbi.DatabaseId.getBytes()[B: root-Branch
   * 11 Weak Mutation 7: com.sleepycat.je.dbi.DatabaseId.getBytes()[B:37 - DeleteStatement: toString()Ljava/lang/String;
   * 12 Weak Mutation 8: com.sleepycat.je.dbi.DatabaseId.getBytes()[B:37 - ReplaceConstant - UTF-8 -> 
   * 13 Weak Mutation 9: com.sleepycat.je.dbi.DatabaseId.getBytes()[B:37 - DeleteStatement: getBytes(Ljava/lang/String;)[B
   * 14 Weak Mutation 31: com.sleepycat.je.dbi.DatabaseId.toString()Ljava/lang/String;:59 - InsertUnaryOp Negation
   * 15 Weak Mutation 34: com.sleepycat.je.dbi.DatabaseId.toString()Ljava/lang/String;:59 - DeleteField: idI
   * 16 Weak Mutation 35: com.sleepycat.je.dbi.DatabaseId.toString()Ljava/lang/String;:59 - DeleteStatement: toString(I)Ljava/lang/String;
   * 17 Weak Mutation 32: com.sleepycat.je.dbi.DatabaseId.toString()Ljava/lang/String;:59 - InsertUnaryOp +1
   * 18 Weak Mutation 33: com.sleepycat.je.dbi.DatabaseId.toString()Ljava/lang/String;:59 - InsertUnaryOp -1
   */
  @Test
  public void test2()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-2));
      byte[] byteArray0 = databaseId0.getBytes();
      assertEquals("-2", databaseId0.toString());
      assertNotNull(byteArray0);
  }

  //Test case number: 3
  /*
   * 5 covered goals:
   * 1 Weak Mutation 10: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:47 - ReplaceComparisonOperator != -> ==
   * 2 Weak Mutation 11: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:48 - ReplaceConstant - 1 -> 0
   * 3 com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z: I4 Branch 1 IF_ACMPNE L47 - false
   * 4 Weak Mutation 10: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:47 - ReplaceComparisonOperator != -> ==
   * 5 Weak Mutation 11: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:48 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test3()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-2));
      boolean boolean0 = databaseId0.equals((Object) databaseId0);
      assertEquals(true, boolean0);
      assertEquals(-2, databaseId0.getId());
  }

  //Test case number: 4
  /*
   * 25 covered goals:
   * 1 Weak Mutation 12: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:50 - ReplaceComparisonOperator != -> ==
   * 2 Weak Mutation 14: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp Negation
   * 3 Weak Mutation 15: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp +1
   * 4 Weak Mutation 17: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - DeleteField: idI
   * 5 Weak Mutation 16: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp -1
   * 6 Weak Mutation 19: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp +1
   * 7 Weak Mutation 18: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp Negation
   * 8 Weak Mutation 21: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - DeleteField: idI
   * 9 Weak Mutation 20: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp -1
   * 10 Weak Mutation 23: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - ReplaceComparisonOperator != -> <
   * 11 Weak Mutation 26: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - ReplaceConstant - 0 -> 1
   * 12 com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z: I4 Branch 1 IF_ACMPNE L47 - true
   * 13 com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z: I13 Branch 2 IFNE L50 - true
   * 14 com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z: I25 Branch 3 IF_ICMPNE L53 - true
   * 15 Weak Mutation 12: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:50 - ReplaceComparisonOperator != -> ==
   * 16 Weak Mutation 14: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp Negation
   * 17 Weak Mutation 15: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp +1
   * 18 Weak Mutation 17: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - DeleteField: idI
   * 19 Weak Mutation 16: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp -1
   * 20 Weak Mutation 19: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp +1
   * 21 Weak Mutation 18: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp Negation
   * 22 Weak Mutation 21: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - DeleteField: idI
   * 23 Weak Mutation 20: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp -1
   * 24 Weak Mutation 23: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - ReplaceComparisonOperator != -> <
   * 25 Weak Mutation 26: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test4()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-2));
      DatabaseId databaseId1 = new DatabaseId((-1096));
      boolean boolean0 = databaseId1.equals((Object) databaseId0);
      assertFalse(databaseId0.equals(databaseId1));
      assertEquals(-1096, databaseId1.getId());
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 4 covered goals:
   * 1 Weak Mutation 13: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:51 - ReplaceConstant - 0 -> 1
   * 2 com.sleepycat.je.dbi.DatabaseId.<init>()V: root-Branch
   * 3 com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z: I13 Branch 2 IFNE L50 - false
   * 4 Weak Mutation 13: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:51 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test5()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      boolean boolean0 = databaseId0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 5 covered goals:
   * 1 Weak Mutation 22: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - ReplaceComparisonOperator != -> >
   * 2 Weak Mutation 17: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - DeleteField: idI
   * 3 Weak Mutation 21: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - DeleteField: idI
   * 4 Weak Mutation 26: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 22: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - ReplaceComparisonOperator != -> >
   */
  @Test
  public void test6()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-2));
      DatabaseId databaseId1 = new DatabaseId(876);
      boolean boolean0 = databaseId1.equals((Object) databaseId0);
      assertEquals(false, boolean0);
      assertFalse(databaseId0.equals(databaseId1));
      assertEquals("876", databaseId1.toString());
  }

  //Test case number: 7
  /*
   * 13 covered goals:
   * 1 Weak Mutation 25: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - ReplaceConstant - 1 -> 0
   * 2 Weak Mutation 24: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - ReplaceComparisonOperator != -> -1
   * 3 com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z: I25 Branch 3 IF_ICMPNE L53 - false
   * 4 Weak Mutation 10: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:47 - ReplaceComparisonOperator != -> ==
   * 5 Weak Mutation 12: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:50 - ReplaceComparisonOperator != -> ==
   * 6 Weak Mutation 14: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp Negation
   * 7 Weak Mutation 15: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp +1
   * 8 Weak Mutation 16: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp -1
   * 9 Weak Mutation 19: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp +1
   * 10 Weak Mutation 18: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp Negation
   * 11 Weak Mutation 20: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - InsertUnaryOp -1
   * 12 Weak Mutation 25: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - ReplaceConstant - 1 -> 0
   * 13 Weak Mutation 24: com.sleepycat.je.dbi.DatabaseId.equals(Ljava/lang/Object;)Z:53 - ReplaceComparisonOperator != -> -1
   */
  @Test
  public void test7()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      DatabaseId databaseId1 = new DatabaseId();
      boolean boolean0 = databaseId1.equals((Object) databaseId0);
      assertEquals(true, boolean0);
  }

  //Test case number: 8
  /*
   * 24 covered goals:
   * 1 Weak Mutation 36: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:65 - ReplaceComparisonOperator != null -> = null
   * 2 Weak Mutation 38: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp +1
   * 3 Weak Mutation 39: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp -1
   * 4 Weak Mutation 37: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp Negation
   * 5 Weak Mutation 42: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp Negation
   * 6 Weak Mutation 43: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp +1
   * 7 Weak Mutation 40: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - DeleteField: idI
   * 8 Weak Mutation 44: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp -1
   * 9 Weak Mutation 45: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - DeleteField: idI
   * 10 Weak Mutation 48: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - ReplaceComparisonOperator != -> -1
   * 11 Weak Mutation 49: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:70 - ReplaceConstant - 0 -> 1
   * 12 com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I: I3 Branch 4 IFNONNULL L65 - true
   * 13 com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I: I21 Branch 5 IF_ICMPNE L69 - false
   * 14 Weak Mutation 38: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp +1
   * 15 Weak Mutation 39: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp -1
   * 16 Weak Mutation 36: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:65 - ReplaceComparisonOperator != null -> = null
   * 17 Weak Mutation 37: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp Negation
   * 18 Weak Mutation 42: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp Negation
   * 19 Weak Mutation 43: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp +1
   * 20 Weak Mutation 40: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - DeleteField: idI
   * 21 Weak Mutation 44: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp -1
   * 22 Weak Mutation 45: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - DeleteField: idI
   * 23 Weak Mutation 49: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:70 - ReplaceConstant - 0 -> 1
   * 24 Weak Mutation 48: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - ReplaceComparisonOperator != -> -1
   */
  @Test
  public void test8()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-1));
      int int0 = databaseId0.compareTo((Object) databaseId0);
      assertEquals(-1, databaseId0.getId());
      assertEquals(0, int0);
  }

  //Test case number: 9
  /*
   * 30 covered goals:
   * 1 Weak Mutation 41: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - ReplaceVariable argId -> this
   * 2 Weak Mutation 46: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - ReplaceComparisonOperator != -> >
   * 3 Weak Mutation 51: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp +1
   * 4 Weak Mutation 50: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp Negation
   * 5 Weak Mutation 55: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp Negation
   * 6 Weak Mutation 54: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - ReplaceVariable argId -> this
   * 7 Weak Mutation 53: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - DeleteField: idI
   * 8 Weak Mutation 52: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp -1
   * 9 Weak Mutation 59: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - ReplaceComparisonOperator <= -> ==
   * 10 Weak Mutation 57: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp -1
   * 11 Weak Mutation 56: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp +1
   * 12 Weak Mutation 63: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:76 - ReplaceConstant - -1 -> 0
   * 13 Weak Mutation 64: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:76 - ReplaceConstant - -1 -> 1
   * 14 Weak Mutation 65: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:76 - ReplaceConstant - -1 -> -2
   * 15 com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I: I21 Branch 5 IF_ICMPNE L69 - true
   * 16 com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I: I32 Branch 6 IF_ICMPLE L72 - true
   * 17 Weak Mutation 41: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - ReplaceVariable argId -> this
   * 18 Weak Mutation 46: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - ReplaceComparisonOperator != -> >
   * 19 Weak Mutation 51: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp +1
   * 20 Weak Mutation 50: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp Negation
   * 21 Weak Mutation 55: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp Negation
   * 22 Weak Mutation 54: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - ReplaceVariable argId -> this
   * 23 Weak Mutation 53: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - DeleteField: idI
   * 24 Weak Mutation 52: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp -1
   * 25 Weak Mutation 59: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - ReplaceComparisonOperator <= -> ==
   * 26 Weak Mutation 57: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp -1
   * 27 Weak Mutation 56: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp +1
   * 28 Weak Mutation 63: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:76 - ReplaceConstant - -1 -> 0
   * 29 Weak Mutation 64: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:76 - ReplaceConstant - -1 -> 1
   * 30 Weak Mutation 65: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:76 - ReplaceConstant - -1 -> -2
   */
  @Test
  public void test9()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-1));
      DatabaseId databaseId1 = new DatabaseId();
      int int0 = databaseId0.compareTo((Object) databaseId1);
      assertEquals((-1), int0);
      assertEquals(-1, databaseId0.getId());
  }

  //Test case number: 10
  /*
   * 26 covered goals:
   * 1 Weak Mutation 47: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - ReplaceComparisonOperator != -> <
   * 2 Weak Mutation 58: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - DeleteField: idI
   * 3 Weak Mutation 61: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - ReplaceComparisonOperator <= -> -1
   * 4 Weak Mutation 62: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:73 - ReplaceConstant - 1 -> 0
   * 5 com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I: I32 Branch 6 IF_ICMPLE L72 - false
   * 6 Weak Mutation 38: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp +1
   * 7 Weak Mutation 39: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp -1
   * 8 Weak Mutation 37: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp Negation
   * 9 Weak Mutation 42: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp Negation
   * 10 Weak Mutation 43: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp +1
   * 11 Weak Mutation 40: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - DeleteField: idI
   * 12 Weak Mutation 41: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - ReplaceVariable argId -> this
   * 13 Weak Mutation 44: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - InsertUnaryOp -1
   * 14 Weak Mutation 45: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - DeleteField: idI
   * 15 Weak Mutation 51: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp +1
   * 16 Weak Mutation 50: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp Negation
   * 17 Weak Mutation 55: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp Negation
   * 18 Weak Mutation 54: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - ReplaceVariable argId -> this
   * 19 Weak Mutation 53: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - DeleteField: idI
   * 20 Weak Mutation 52: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp -1
   * 21 Weak Mutation 57: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp -1
   * 22 Weak Mutation 56: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - InsertUnaryOp +1
   * 23 Weak Mutation 47: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:69 - ReplaceComparisonOperator != -> <
   * 24 Weak Mutation 58: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - DeleteField: idI
   * 25 Weak Mutation 62: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:73 - ReplaceConstant - 1 -> 0
   * 26 Weak Mutation 61: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:72 - ReplaceComparisonOperator <= -> -1
   */
  @Test
  public void test10()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-2));
      DatabaseId databaseId1 = new DatabaseId((-1096));
      int int0 = databaseId0.compareTo((Object) databaseId1);
      assertEquals(-2, databaseId0.getId());
      assertEquals(1, int0);
  }

  //Test case number: 11
  /*
   * 3 covered goals:
   * 1 Weak Mutation 66: com.sleepycat.je.dbi.DatabaseId.getLogSize()I:83 - DeleteStatement: getIntLogSize()I
   * 2 com.sleepycat.je.dbi.DatabaseId.getLogSize()I: root-Branch
   * 3 Weak Mutation 66: com.sleepycat.je.dbi.DatabaseId.getLogSize()I:83 - DeleteStatement: getIntLogSize()I
   */
  @Test
  public void test11()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      int int0 = databaseId0.getLogSize();
      assertEquals(4, int0);
  }

  //Test case number: 12
  /*
   * 11 covered goals:
   * 1 Weak Mutation 68: com.sleepycat.je.dbi.DatabaseId.writeToLog(Ljava/nio/ByteBuffer;)V:89 - InsertUnaryOp +1
   * 2 Weak Mutation 69: com.sleepycat.je.dbi.DatabaseId.writeToLog(Ljava/nio/ByteBuffer;)V:89 - InsertUnaryOp -1
   * 3 Weak Mutation 70: com.sleepycat.je.dbi.DatabaseId.writeToLog(Ljava/nio/ByteBuffer;)V:89 - DeleteField: idI
   * 4 Weak Mutation 71: com.sleepycat.je.dbi.DatabaseId.writeToLog(Ljava/nio/ByteBuffer;)V:89 - DeleteStatement: writeInt(Ljava/nio/ByteBuffer;I)V
   * 5 Weak Mutation 67: com.sleepycat.je.dbi.DatabaseId.writeToLog(Ljava/nio/ByteBuffer;)V:89 - InsertUnaryOp Negation
   * 6 com.sleepycat.je.dbi.DatabaseId.writeToLog(Ljava/nio/ByteBuffer;)V: root-Branch
   * 7 Weak Mutation 68: com.sleepycat.je.dbi.DatabaseId.writeToLog(Ljava/nio/ByteBuffer;)V:89 - InsertUnaryOp +1
   * 8 Weak Mutation 69: com.sleepycat.je.dbi.DatabaseId.writeToLog(Ljava/nio/ByteBuffer;)V:89 - InsertUnaryOp -1
   * 9 Weak Mutation 70: com.sleepycat.je.dbi.DatabaseId.writeToLog(Ljava/nio/ByteBuffer;)V:89 - DeleteField: idI
   * 10 Weak Mutation 71: com.sleepycat.je.dbi.DatabaseId.writeToLog(Ljava/nio/ByteBuffer;)V:89 - DeleteStatement: writeInt(Ljava/nio/ByteBuffer;I)V
   * 11 Weak Mutation 67: com.sleepycat.je.dbi.DatabaseId.writeToLog(Ljava/nio/ByteBuffer;)V:89 - InsertUnaryOp Negation
   */
  @Test
  public void test12()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-360));
      // Undeclared exception!
      try {
        databaseId0.writeToLog((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 13
  /*
   * 3 covered goals:
   * 1 Weak Mutation 72: com.sleepycat.je.dbi.DatabaseId.readFromLog(Ljava/nio/ByteBuffer;B)V:95 - DeleteStatement: readInt(Ljava/nio/ByteBuffer;)I
   * 2 com.sleepycat.je.dbi.DatabaseId.readFromLog(Ljava/nio/ByteBuffer;B)V: root-Branch
   * 3 Weak Mutation 72: com.sleepycat.je.dbi.DatabaseId.readFromLog(Ljava/nio/ByteBuffer;B)V:95 - DeleteStatement: readInt(Ljava/nio/ByteBuffer;)I
   */
  @Test
  public void test13()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      // Undeclared exception!
      try {
        databaseId0.readFromLog((ByteBuffer) null, (byte) (-103));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 14
  /*
   * 19 covered goals:
   * 1 Weak Mutation 73: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:101 - ReplaceConstant - <dbId id=" -> 
   * 2 Weak Mutation 74: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:101 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 3 Weak Mutation 76: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:102 - InsertUnaryOp +1
   * 4 Weak Mutation 77: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:102 - InsertUnaryOp -1
   * 5 Weak Mutation 78: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:102 - DeleteField: idI
   * 6 Weak Mutation 79: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:102 - DeleteStatement: append(I)Ljava/lang/StringBuffer;
   * 7 Weak Mutation 75: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:102 - InsertUnaryOp Negation
   * 8 Weak Mutation 81: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:103 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 9 Weak Mutation 80: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:103 - ReplaceConstant - "/> -> 
   * 10 com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V: root-Branch
   * 11 Weak Mutation 76: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:102 - InsertUnaryOp +1
   * 12 Weak Mutation 77: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:102 - InsertUnaryOp -1
   * 13 Weak Mutation 78: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:102 - DeleteField: idI
   * 14 Weak Mutation 79: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:102 - DeleteStatement: append(I)Ljava/lang/StringBuffer;
   * 15 Weak Mutation 73: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:101 - ReplaceConstant - <dbId id=" -> 
   * 16 Weak Mutation 74: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:101 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 17 Weak Mutation 75: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:102 - InsertUnaryOp Negation
   * 18 Weak Mutation 81: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:103 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 19 Weak Mutation 80: com.sleepycat.je.dbi.DatabaseId.dumpLog(Ljava/lang/StringBuffer;Z)V:103 - ReplaceConstant - "/> -> 
   */
  @Test
  public void test14()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-2));
      StringBuffer stringBuffer0 = new StringBuffer();
      databaseId0.dumpLog(stringBuffer0, false);
      assertEquals(15, stringBuffer0.length());
      assertEquals(-2, databaseId0.getId());
  }

  //Test case number: 15
  /*
   * 6 covered goals:
   * 1 Weak Mutation 82: com.sleepycat.je.dbi.DatabaseId.logEntryIsTransactional()Z:109 - ReplaceConstant - 0 -> 1
   * 2 com.sleepycat.je.dbi.DatabaseId.logEntryIsTransactional()Z: root-Branch
   * 3 Weak Mutation 0: com.sleepycat.je.dbi.DatabaseId.<init>(I)V:19 - InsertUnaryOp Negation of id
   * 4 Weak Mutation 1: com.sleepycat.je.dbi.DatabaseId.<init>(I)V:19 - InsertUnaryOp IINC 1 id
   * 5 Weak Mutation 2: com.sleepycat.je.dbi.DatabaseId.<init>(I)V:19 - InsertUnaryOp IINC -1 id
   * 6 Weak Mutation 82: com.sleepycat.je.dbi.DatabaseId.logEntryIsTransactional()Z:109 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test15()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-2));
      boolean boolean0 = databaseId0.logEntryIsTransactional();
      assertEquals(false, boolean0);
      assertEquals(-2, databaseId0.getId());
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 Weak Mutation 84: com.sleepycat.je.dbi.DatabaseId.getTransactionId()J:115 - ReplaceConstant - 0 -> -1
   * 2 Weak Mutation 83: com.sleepycat.je.dbi.DatabaseId.getTransactionId()J:115 - ReplaceConstant - 0 -> 1
   * 3 com.sleepycat.je.dbi.DatabaseId.getTransactionId()J: root-Branch
   * 4 Weak Mutation 84: com.sleepycat.je.dbi.DatabaseId.getTransactionId()J:115 - ReplaceConstant - 0 -> -1
   * 5 Weak Mutation 83: com.sleepycat.je.dbi.DatabaseId.getTransactionId()J:115 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test16()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      long long0 = databaseId0.getTransactionId();
      assertEquals(0L, long0);
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * 1 com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I: I3 Branch 4 IFNONNULL L65 - false
   * 2 Weak Mutation 36: com.sleepycat.je.dbi.DatabaseId.compareTo(Ljava/lang/Object;)I:65 - ReplaceComparisonOperator != null -> = null
   */
  @Test
  public void test17()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      // Undeclared exception!
      try {
        databaseId0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
