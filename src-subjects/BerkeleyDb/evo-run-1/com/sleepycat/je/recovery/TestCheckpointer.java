/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.recovery;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.dbi.EnvironmentImpl;
import com.sleepycat.je.recovery.Checkpointer;

@RunWith(EvoSuiteRunner.class)
public class TestCheckpointer {


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 Weak Mutation 38: com.sleepycat.je.recovery.Checkpointer.<init>(Lcom/sleepycat/je/dbi/EnvironmentImpl;JLjava/lang/String;)V:103 - DeleteStatement: getConfigManager()Lcom/sleepycat/je/dbi/DbConfigManager;
   * 2 com.sleepycat.je.recovery.Checkpointer.<init>(Lcom/sleepycat/je/dbi/EnvironmentImpl;JLjava/lang/String;)V: root-Branch
   * 3 Weak Mutation 38: com.sleepycat.je.recovery.Checkpointer.<init>(Lcom/sleepycat/je/dbi/EnvironmentImpl;JLjava/lang/String;)V:103 - DeleteStatement: getConfigManager()Lcom/sleepycat/je/dbi/DbConfigManager;
   */
  @Test
  public void test0()  throws Throwable  {
      Checkpointer checkpointer0 = null;
      try {
        checkpointer0 = new Checkpointer((EnvironmentImpl) null, 286L, "@%;zq");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 1
  /*
   * 22 covered goals:
   * 1 Weak Mutation 23: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:931 - ReplaceComparisonOperator != -> ==
   * 2 Weak Mutation 25: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - InsertUnaryOp Negation
   * 3 Weak Mutation 28: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - InsertUnaryOp Negation
   * 4 Weak Mutation 30: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - DeleteStatement: longSub(JJ)I
   * 5 Weak Mutation 34: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 33: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - ReplaceComparisonOperator != -> -1
   * 7 com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z: I4 Branch 2 IFNE L931 - true
   * 8 com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z: I21 Branch 3 IFNE L935 - false
   * 9 Weak Mutation 12: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:923 - InsertUnaryOp Negation of nodeId
   * 10 Weak Mutation 14: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:924 - InsertUnaryOp Negation of containsDuplicates
   * 11 Weak Mutation 15: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:924 - InsertUnaryOp IINC 1 containsDuplicates
   * 12 Weak Mutation 16: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:924 - InsertUnaryOp IINC -1 containsDuplicates
   * 13 Weak Mutation 19: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:925 - InsertUnaryOp IINC 1 isDbRoot
   * 14 Weak Mutation 18: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:925 - InsertUnaryOp Negation of isDbRoot
   * 15 Weak Mutation 20: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:925 - InsertUnaryOp IINC -1 isDbRoot
   * 16 Weak Mutation 23: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:931 - ReplaceComparisonOperator != -> ==
   * 17 Weak Mutation 25: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - InsertUnaryOp Negation
   * 18 Weak Mutation 28: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - InsertUnaryOp Negation
   * 19 Weak Mutation 30: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - DeleteStatement: longSub(JJ)I
   * 20 Weak Mutation 34: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - ReplaceConstant - 1 -> 0
   * 21 Weak Mutation 33: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - ReplaceComparisonOperator != -> -1
   * 22 com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Checkpointer.CheckpointReference checkpointer_CheckpointReference0 = new Checkpointer.CheckpointReference((DatabaseImpl) null, (long) 0, false, false, byteArray0, byteArray0);
      boolean boolean0 = checkpointer_CheckpointReference0.equals((Object) checkpointer_CheckpointReference0);
      assertEquals(false, checkpointer_CheckpointReference0.isDbRoot);
      assertEquals(true, boolean0);
      assertEquals(false, checkpointer_CheckpointReference0.containsDuplicates);
  }

  //Test case number: 2
  /*
   * 4 covered goals:
   * 1 Weak Mutation 13: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:924 - ReplaceVariable containsDuplicates -> isDbRoot
   * 2 Weak Mutation 17: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:925 - ReplaceVariable isDbRoot -> containsDuplicates
   * 3 Weak Mutation 13: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:924 - ReplaceVariable containsDuplicates -> isDbRoot
   * 4 Weak Mutation 17: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:925 - ReplaceVariable isDbRoot -> containsDuplicates
   */
  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Checkpointer.CheckpointReference checkpointer_CheckpointReference0 = new Checkpointer.CheckpointReference((DatabaseImpl) null, (-14L), true, true, byteArray0, byteArray0);
      Checkpointer.CheckpointReference checkpointer_CheckpointReference1 = new Checkpointer.CheckpointReference((DatabaseImpl) null, (long) 0, true, false, checkpointer_CheckpointReference0.dupTreeKey, checkpointer_CheckpointReference0.dupTreeKey);
      assertEquals((-14L), checkpointer_CheckpointReference0.nodeId);
      assertEquals(true, checkpointer_CheckpointReference1.containsDuplicates);
      assertEquals(false, checkpointer_CheckpointReference1.isDbRoot);
  }

  //Test case number: 3
  /*
   * 4 covered goals:
   * 1 Weak Mutation 21: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:926 - ReplaceVariable mainTreeKey -> dupTreeKey
   * 2 Weak Mutation 22: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:927 - ReplaceVariable dupTreeKey -> mainTreeKey
   * 3 Weak Mutation 21: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:926 - ReplaceVariable mainTreeKey -> dupTreeKey
   * 4 Weak Mutation 22: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:927 - ReplaceVariable dupTreeKey -> mainTreeKey
   */
  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Checkpointer.CheckpointReference checkpointer_CheckpointReference0 = new Checkpointer.CheckpointReference((DatabaseImpl) null, (-14L), true, true, byteArray0, byteArray0);
      byte[] byteArray1 = new byte[4];
      Checkpointer.CheckpointReference checkpointer_CheckpointReference1 = new Checkpointer.CheckpointReference((DatabaseImpl) null, (long) 0, true, true, checkpointer_CheckpointReference0.dupTreeKey, byteArray1);
      assertEquals((-14L), checkpointer_CheckpointReference0.nodeId);
      assertEquals(true, checkpointer_CheckpointReference0.isDbRoot);
      assertEquals(true, checkpointer_CheckpointReference0.containsDuplicates);
      assertEquals(true, checkpointer_CheckpointReference1.isDbRoot);
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 Weak Mutation 24: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:932 - ReplaceConstant - 0 -> 1
   * 2 com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z: I4 Branch 2 IFNE L931 - false
   * 3 Weak Mutation 24: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:932 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Checkpointer.CheckpointReference checkpointer_CheckpointReference0 = new Checkpointer.CheckpointReference((DatabaseImpl) null, (long) (byte) (-41), true, true, byteArray0, byteArray0);
      boolean boolean0 = checkpointer_CheckpointReference0.equals((Object) "[]");
      assertEquals((-41L), checkpointer_CheckpointReference0.nodeId);
      assertEquals(true, checkpointer_CheckpointReference0.containsDuplicates);
      assertEquals(true, checkpointer_CheckpointReference0.isDbRoot);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 9 covered goals:
   * 1 Weak Mutation 27: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - ReplaceVariable other -> this
   * 2 Weak Mutation 26: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - DeleteField: nodeIdJ
   * 3 Weak Mutation 35: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 32: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - ReplaceComparisonOperator != -> >
   * 5 com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z: I21 Branch 3 IFNE L935 - true
   * 6 Weak Mutation 27: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - ReplaceVariable other -> this
   * 7 Weak Mutation 26: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - DeleteField: nodeIdJ
   * 8 Weak Mutation 35: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - ReplaceConstant - 0 -> 1
   * 9 Weak Mutation 32: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - ReplaceComparisonOperator != -> >
   */
  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Checkpointer.CheckpointReference checkpointer_CheckpointReference0 = new Checkpointer.CheckpointReference((DatabaseImpl) null, (-14L), true, true, byteArray0, byteArray0);
      Checkpointer.CheckpointReference checkpointer_CheckpointReference1 = new Checkpointer.CheckpointReference((DatabaseImpl) null, (long) 0, true, true, checkpointer_CheckpointReference0.dupTreeKey, checkpointer_CheckpointReference0.dupTreeKey);
      boolean boolean0 = checkpointer_CheckpointReference0.equals((Object) checkpointer_CheckpointReference1);
      assertEquals(true, checkpointer_CheckpointReference0.containsDuplicates);
      assertEquals(false, boolean0);
      assertEquals((-14L), checkpointer_CheckpointReference0.nodeId);
      assertEquals(true, checkpointer_CheckpointReference0.isDbRoot);
      assertFalse(checkpointer_CheckpointReference1.equals(checkpointer_CheckpointReference0));
  }

  //Test case number: 6
  /*
   * 9 covered goals:
   * 1 Weak Mutation 29: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - DeleteField: nodeIdJ
   * 2 Weak Mutation 23: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:931 - ReplaceComparisonOperator != -> ==
   * 3 Weak Mutation 25: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - InsertUnaryOp Negation
   * 4 Weak Mutation 27: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - ReplaceVariable other -> this
   * 5 Weak Mutation 28: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - InsertUnaryOp Negation
   * 6 Weak Mutation 30: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - DeleteStatement: longSub(JJ)I
   * 7 Weak Mutation 35: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - ReplaceConstant - 0 -> 1
   * 8 Weak Mutation 32: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - ReplaceComparisonOperator != -> >
   * 9 Weak Mutation 29: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.equals(Ljava/lang/Object;)Z:935 - DeleteField: nodeIdJ
   */
  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Checkpointer.CheckpointReference checkpointer_CheckpointReference0 = new Checkpointer.CheckpointReference((DatabaseImpl) null, (long) 0, true, true, byteArray0, byteArray0);
      Checkpointer.CheckpointReference checkpointer_CheckpointReference1 = new Checkpointer.CheckpointReference((DatabaseImpl) null, 1572L, true, true, checkpointer_CheckpointReference0.dupTreeKey, checkpointer_CheckpointReference0.dupTreeKey);
      boolean boolean0 = checkpointer_CheckpointReference0.equals((Object) checkpointer_CheckpointReference1);
      assertEquals(true, checkpointer_CheckpointReference1.isDbRoot);
      assertEquals(true, checkpointer_CheckpointReference1.containsDuplicates);
      assertEquals(false, boolean0);
      assertFalse(checkpointer_CheckpointReference1.equals(checkpointer_CheckpointReference0));
      assertEquals(1572L, checkpointer_CheckpointReference1.nodeId);
  }

  //Test case number: 7
  /*
   * 12 covered goals:
   * 1 Weak Mutation 36: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.hashCode()I:939 - InsertUnaryOp Negation
   * 2 Weak Mutation 37: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.hashCode()I:939 - DeleteField: nodeIdJ
   * 3 com.sleepycat.je.recovery.Checkpointer$CheckpointReference.hashCode()I: root-Branch
   * 4 Weak Mutation 12: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:923 - InsertUnaryOp Negation of nodeId
   * 5 Weak Mutation 14: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:924 - InsertUnaryOp Negation of containsDuplicates
   * 6 Weak Mutation 15: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:924 - InsertUnaryOp IINC 1 containsDuplicates
   * 7 Weak Mutation 16: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:924 - InsertUnaryOp IINC -1 containsDuplicates
   * 8 Weak Mutation 19: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:925 - InsertUnaryOp IINC 1 isDbRoot
   * 9 Weak Mutation 18: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:925 - InsertUnaryOp Negation of isDbRoot
   * 10 Weak Mutation 20: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;JZZ[B[B)V:925 - InsertUnaryOp IINC -1 isDbRoot
   * 11 Weak Mutation 36: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.hashCode()I:939 - InsertUnaryOp Negation
   * 12 Weak Mutation 37: com.sleepycat.je.recovery.Checkpointer$CheckpointReference.hashCode()I:939 - DeleteField: nodeIdJ
   */
  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Checkpointer.CheckpointReference checkpointer_CheckpointReference0 = new Checkpointer.CheckpointReference((DatabaseImpl) null, (long) (byte) (-41), true, true, byteArray0, byteArray0);
      int int0 = checkpointer_CheckpointReference0.hashCode();
      assertEquals(true, checkpointer_CheckpointReference0.containsDuplicates);
      assertEquals(true, checkpointer_CheckpointReference0.isDbRoot);
      assertEquals((-41), int0);
  }
}
