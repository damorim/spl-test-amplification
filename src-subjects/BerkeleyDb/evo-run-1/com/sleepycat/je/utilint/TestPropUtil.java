/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.utilint;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.utilint.PropUtil;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;

@RunWith(EvoSuiteRunner.class)
public class TestPropUtil {


  //Test case number: 0
  /*
   * 18 covered goals:
   * 1 Weak Mutation 3: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:15 - ReplaceVariable value -> propName
   * 2 Weak Mutation 4: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:15 - ReplaceConstant - true -> 
   * 3 Weak Mutation 5: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:15 - DeleteStatement: StringEqualsIgnoreCase(Ljava/lang/String;Ljava/lang/String;)I
   * 4 Weak Mutation 6: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:15 - ReplaceComparisonOperator <= -> ==
   * 5 com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z: I9 Branch 1 IFNULL L15 - false
   * 6 com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z: I13 Branch 2 IFLE L15 - true
   * 7 Weak Mutation 0: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:14 - DeleteStatement: getProperty(Ljava/lang/String;)Ljava/lang/String;
   * 8 Weak Mutation 1: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:15 - ReplaceVariable value -> propName
   * 9 Weak Mutation 2: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:15 - ReplaceComparisonOperator = null -> != null
   * 10 Weak Mutation 10: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:19 - ReplaceConstant - 0 -> 1
   * 11 Weak Mutation 0: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:14 - DeleteStatement: getProperty(Ljava/lang/String;)Ljava/lang/String;
   * 12 Weak Mutation 1: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:15 - ReplaceVariable value -> propName
   * 13 Weak Mutation 2: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:15 - ReplaceComparisonOperator = null -> != null
   * 14 Weak Mutation 3: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:15 - ReplaceVariable value -> propName
   * 15 Weak Mutation 4: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:15 - ReplaceConstant - true -> 
   * 16 Weak Mutation 5: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:15 - DeleteStatement: StringEqualsIgnoreCase(Ljava/lang/String;Ljava/lang/String;)I
   * 17 Weak Mutation 6: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:15 - ReplaceComparisonOperator <= -> ==
   * 18 Weak Mutation 10: com.sleepycat.je.utilint.PropUtil.getBoolean(Ljava/util/Properties;Ljava/lang/String;)Z:19 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test0()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.put((Object) "/Users/sabrinasouto/git/spl-test-amplification/libs/+3<Z7e7l8x/+3<Z7e7l8x", (Object) "{}");
      boolean boolean0 = PropUtil.getBoolean(properties0, "/Users/sabrinasouto/git/spl-test-amplification/libs/+3<Z7e7l8x/+3<Z7e7l8x");
      assertEquals(false, boolean0);
  }

  //Test case number: 1
  /*
   * 8 covered goals:
   * 1 Weak Mutation 11: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:29 - ReplaceComparisonOperator != null -> = null
   * 2 Weak Mutation 12: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:33 - DeleteStatement: size()I
   * 3 Weak Mutation 14: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:33 - ReplaceComparisonOperator <= -> <
   * 4 com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;: I3 Branch 3 IFNONNULL L29 - true
   * 5 com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;: I14 Branch 4 IFLE L33 - true
   * 6 Weak Mutation 11: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:29 - ReplaceComparisonOperator != null -> = null
   * 7 Weak Mutation 12: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:33 - DeleteStatement: size()I
   * 8 Weak Mutation 14: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:33 - ReplaceComparisonOperator <= -> <
   */
  @Test
  public void test1()  throws Throwable  {
      Properties properties0 = new Properties();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashSet<String> hashSet0 = new HashSet<String>((Collection<?>) linkedList0);
      Properties properties1 = PropUtil.validateProps(properties0, (Set) hashSet0, "+3<Z7e7l8x");
      assertSame(properties0, properties1);
  }

  //Test case number: 2
  /*
   * 39 covered goals:
   * 1 Weak Mutation 15: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:33 - ReplaceComparisonOperator <= -> -1
   * 2 Weak Mutation 16: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:34 - DeleteStatement: propertyNames()Ljava/util/Enumeration;
   * 3 Weak Mutation 21: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:35 - DeleteStatement: hasMoreElements()Z
   * 4 Weak Mutation 22: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:35 - ReplaceComparisonOperator != -> ==
   * 5 Weak Mutation 17: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:36 - DeleteStatement: nextElement()Ljava/lang/Object;
   * 6 Weak Mutation 19: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:37 - ReplaceVariable apiMethod -> propName
   * 7 Weak Mutation 18: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:37 - ReplaceVariable propName -> apiMethod
   * 8 Weak Mutation 20: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:37 - DeleteStatement: validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V
   * 9 Weak Mutation 23: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:47 - ReplaceVariable propName -> apiMethod
   * 10 Weak Mutation 25: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:47 - ReplaceComparisonOperator > -> !=
   * 11 Weak Mutation 24: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:47 - DeleteStatement: collectionContains(Ljava/util/Collection;Ljava/lang/Object;)I
   * 12 Weak Mutation 29: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:48 - DeleteStatement: valueOf(Ljava/lang/Object;)Ljava/lang/String;
   * 13 Weak Mutation 28: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:48 - ReplaceVariable propName -> apiMethod
   * 14 Weak Mutation 31: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:48 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 15 Weak Mutation 30: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:48 - ReplaceConstant -  is not a valid property for  -> 
   * 16 Weak Mutation 34: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:48 - DeleteStatement: toString()Ljava/lang/String;
   * 17 Weak Mutation 32: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:48 - ReplaceVariable apiMethod -> propName
   * 18 Weak Mutation 33: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:48 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 19 com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;: I14 Branch 4 IFLE L33 - false
   * 20 com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;: I39 Branch 5 IFNE L35 - true
   * 21 com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V: I5 Branch 6 IFGT L47 - false
   * 22 Weak Mutation 15: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:33 - ReplaceComparisonOperator <= -> -1
   * 23 Weak Mutation 17: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:36 - DeleteStatement: nextElement()Ljava/lang/Object;
   * 24 Weak Mutation 16: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:34 - DeleteStatement: propertyNames()Ljava/util/Enumeration;
   * 25 Weak Mutation 19: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:37 - ReplaceVariable apiMethod -> propName
   * 26 Weak Mutation 18: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:37 - ReplaceVariable propName -> apiMethod
   * 27 Weak Mutation 21: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:35 - DeleteStatement: hasMoreElements()Z
   * 28 Weak Mutation 20: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:37 - DeleteStatement: validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V
   * 29 Weak Mutation 23: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:47 - ReplaceVariable propName -> apiMethod
   * 30 Weak Mutation 22: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:35 - ReplaceComparisonOperator != -> ==
   * 31 Weak Mutation 25: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:47 - ReplaceComparisonOperator > -> !=
   * 32 Weak Mutation 24: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:47 - DeleteStatement: collectionContains(Ljava/util/Collection;Ljava/lang/Object;)I
   * 33 Weak Mutation 29: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:48 - DeleteStatement: valueOf(Ljava/lang/Object;)Ljava/lang/String;
   * 34 Weak Mutation 28: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:48 - ReplaceVariable propName -> apiMethod
   * 35 Weak Mutation 31: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:48 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 36 Weak Mutation 30: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:48 - ReplaceConstant -  is not a valid property for  -> 
   * 37 Weak Mutation 34: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:48 - DeleteStatement: toString()Ljava/lang/String;
   * 38 Weak Mutation 32: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:48 - ReplaceVariable apiMethod -> propName
   * 39 Weak Mutation 33: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:48 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   */
  @Test
  public void test2()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.put((Object) "/Users/sabrinasouto/git/spl-test-amplification/libs/+3<Z7e7l8x/+3<Z7e7l8x", (Object) "{}");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashSet<String> hashSet0 = new HashSet<String>((Collection<?>) linkedList0);
      try {
        PropUtil.validateProps(properties0, (Set) hashSet0, "+3<Z7e7l8x");
        fail("Expecting exception: DatabaseException");
      } catch(DatabaseException e) {
        /*
         * /Users/sabrinasouto/git/spl-test-amplification/libs/+3<Z7e7l8x/+3<Z7e7l8x is not a valid property for +3<Z7e7l8x
         */
      }
  }

  //Test case number: 3
  /*
   * 15 covered goals:
   * 1 Weak Mutation 27: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:47 - ReplaceComparisonOperator > -> -2
   * 2 com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;: I39 Branch 5 IFNE L35 - false
   * 3 com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V: I5 Branch 6 IFGT L47 - true
   * 4 Weak Mutation 12: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:33 - DeleteStatement: size()I
   * 5 Weak Mutation 15: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:33 - ReplaceComparisonOperator <= -> -1
   * 6 Weak Mutation 17: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:36 - DeleteStatement: nextElement()Ljava/lang/Object;
   * 7 Weak Mutation 16: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:34 - DeleteStatement: propertyNames()Ljava/util/Enumeration;
   * 8 Weak Mutation 19: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:37 - ReplaceVariable apiMethod -> propName
   * 9 Weak Mutation 18: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:37 - ReplaceVariable propName -> apiMethod
   * 10 Weak Mutation 21: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:35 - DeleteStatement: hasMoreElements()Z
   * 11 Weak Mutation 20: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:37 - DeleteStatement: validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V
   * 12 Weak Mutation 23: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:47 - ReplaceVariable propName -> apiMethod
   * 13 Weak Mutation 22: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:35 - ReplaceComparisonOperator != -> ==
   * 14 Weak Mutation 24: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:47 - DeleteStatement: collectionContains(Ljava/util/Collection;Ljava/lang/Object;)I
   * 15 Weak Mutation 27: com.sleepycat.je.utilint.PropUtil.validateProp(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)V:47 - ReplaceComparisonOperator > -> -2
   */
  @Test
  public void test3()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.put((Object) "China", (Object) "v-*(?44b^Qy7");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("China");
      Properties properties1 = PropUtil.validateProps(properties0, (Set) linkedHashSet0, "China");
      assertNotNull(properties1);
      assertEquals("{China=v-*(?44b^Qy7}", properties1.toString());
  }

  //Test case number: 4
  /*
   * 39 covered goals:
   * 1 Weak Mutation 35: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - InsertUnaryOp Negation of micros
   * 2 Weak Mutation 38: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 999 -> -1
   * 3 Weak Mutation 39: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 999 -> 998
   * 4 Weak Mutation 36: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 999 -> 0
   * 5 Weak Mutation 37: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 999 -> 1
   * 6 Weak Mutation 42: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator + -> %
   * 7 Weak Mutation 43: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator + -> /
   * 8 Weak Mutation 40: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 999 -> 1000
   * 9 Weak Mutation 41: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator + -> -
   * 10 Weak Mutation 46: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 1000 -> 1
   * 11 Weak Mutation 47: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 1000 -> -1
   * 12 Weak Mutation 44: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator + -> *
   * 13 Weak Mutation 45: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 1000 -> 0
   * 14 Weak Mutation 51: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator / -> %
   * 15 Weak Mutation 50: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator / -> -
   * 16 Weak Mutation 49: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 1000 -> 1001
   * 17 Weak Mutation 48: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 1000 -> 999
   * 18 Weak Mutation 53: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator / -> *
   * 19 Weak Mutation 52: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator / -> +
   * 20 com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J: root-Branch
   * 21 Weak Mutation 35: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - InsertUnaryOp Negation of micros
   * 22 Weak Mutation 38: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 999 -> -1
   * 23 Weak Mutation 39: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 999 -> 998
   * 24 Weak Mutation 36: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 999 -> 0
   * 25 Weak Mutation 37: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 999 -> 1
   * 26 Weak Mutation 42: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator + -> %
   * 27 Weak Mutation 43: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator + -> /
   * 28 Weak Mutation 40: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 999 -> 1000
   * 29 Weak Mutation 41: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator + -> -
   * 30 Weak Mutation 46: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 1000 -> 1
   * 31 Weak Mutation 47: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 1000 -> -1
   * 32 Weak Mutation 44: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator + -> *
   * 33 Weak Mutation 45: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 1000 -> 0
   * 34 Weak Mutation 51: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator / -> %
   * 35 Weak Mutation 50: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator / -> -
   * 36 Weak Mutation 49: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 1000 -> 1001
   * 37 Weak Mutation 48: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceConstant - 1000 -> 999
   * 38 Weak Mutation 53: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator / -> *
   * 39 Weak Mutation 52: com.sleepycat.je.utilint.PropUtil.microsToMillis(J)J:57 - ReplaceArithmeticOperator / -> +
   */
  @Test
  public void test4()  throws Throwable  {
      long long0 = PropUtil.microsToMillis(0L);
      assertEquals(0L, long0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;: I3 Branch 3 IFNONNULL L29 - false
   * 2 Weak Mutation 11: com.sleepycat.je.utilint.PropUtil.validateProps(Ljava/util/Properties;Ljava/util/Set;Ljava/lang/String;)Ljava/util/Properties;:29 - ReplaceComparisonOperator != null -> = null
   */
  @Test
  public void test5()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Properties properties0 = PropUtil.validateProps((Properties) null, (Set) treeSet0, "WI");
      assertEquals(0, properties0.size());
  }
}
