/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.utilint;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.utilint.TinyHashSet;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Set;

@RunWith(EvoSuiteRunner.class)
public class TestTinyHashSet {


  //Test case number: 0
  /*
   * 9 covered goals:
   * 1 Weak Mutation 23: com.sleepycat.je.utilint.TinyHashSet.size()I:18 - ReplaceComparisonOperator = null -> != null
   * 2 Weak Mutation 26: com.sleepycat.je.utilint.TinyHashSet.size()I:21 - ReplaceComparisonOperator = null -> != null
   * 3 Weak Mutation 29: com.sleepycat.je.utilint.TinyHashSet.size()I:25 - ReplaceConstant - 0 -> 1
   * 4 com.sleepycat.je.utilint.TinyHashSet.<init>()V: root-Branch
   * 5 com.sleepycat.je.utilint.TinyHashSet.size()I: I4 Branch 7 IFNULL L18 - true
   * 6 com.sleepycat.je.utilint.TinyHashSet.size()I: I13 Branch 8 IFNULL L21 - true
   * 7 Weak Mutation 23: com.sleepycat.je.utilint.TinyHashSet.size()I:18 - ReplaceComparisonOperator = null -> != null
   * 8 Weak Mutation 26: com.sleepycat.je.utilint.TinyHashSet.size()I:21 - ReplaceComparisonOperator = null -> != null
   * 9 Weak Mutation 29: com.sleepycat.je.utilint.TinyHashSet.size()I:25 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test0()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      int int0 = tinyHashSet0.size();
      assertEquals(0, int0);
  }

  //Test case number: 1
  /*
   * 21 covered goals:
   * 1 Weak Mutation 22: com.sleepycat.je.utilint.TinyHashSet.size()I:18 - DeleteField: singleLjava/lang/Object;
   * 2 Weak Mutation 24: com.sleepycat.je.utilint.TinyHashSet.size()I:19 - ReplaceConstant - 1 -> 0
   * 3 Weak Mutation 51: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:47 - InsertUnaryOp Negation
   * 4 Weak Mutation 55: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:47 - ReplaceComparisonOperator = null -> != null
   * 5 Weak Mutation 53: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:47 - ReplaceComparisonOperator != -> ==
   * 6 Weak Mutation 59: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:48 - ReplaceComparisonOperator = null -> != null
   * 7 Weak Mutation 63: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:51 - ReplaceComparisonOperator != null -> = null
   * 8 Weak Mutation 64: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:53 - ReplaceConstant - 1 -> 0
   * 9 com.sleepycat.je.utilint.TinyHashSet.size()I: I4 Branch 7 IFNULL L18 - false
   * 10 com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z: I3 Branch 16 IFNE L47 - false
   * 11 com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z: I6 Branch 17 IFNULL L47 - true
   * 12 com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z: I18 Branch 19 IFNULL L48 - true
   * 13 com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z: I30 Branch 20 IFNONNULL L51 - false
   * 14 Weak Mutation 22: com.sleepycat.je.utilint.TinyHashSet.size()I:18 - DeleteField: singleLjava/lang/Object;
   * 15 Weak Mutation 24: com.sleepycat.je.utilint.TinyHashSet.size()I:19 - ReplaceConstant - 1 -> 0
   * 16 Weak Mutation 51: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:47 - InsertUnaryOp Negation
   * 17 Weak Mutation 55: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:47 - ReplaceComparisonOperator = null -> != null
   * 18 Weak Mutation 53: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:47 - ReplaceComparisonOperator != -> ==
   * 19 Weak Mutation 59: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:48 - ReplaceComparisonOperator = null -> != null
   * 20 Weak Mutation 63: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:51 - ReplaceComparisonOperator != null -> = null
   * 21 Weak Mutation 64: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:53 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test1()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      tinyHashSet0.add((Object) tinyHashSet0);
      int int0 = tinyHashSet0.size();
      assertEquals(1, tinyHashSet0.size());
      assertEquals(1, int0);
  }

  //Test case number: 2
  /*
   * 28 covered goals:
   * 1 Weak Mutation 25: com.sleepycat.je.utilint.TinyHashSet.size()I:21 - DeleteField: setLjava/util/Set;
   * 2 Weak Mutation 27: com.sleepycat.je.utilint.TinyHashSet.size()I:22 - DeleteField: setLjava/util/Set;
   * 3 Weak Mutation 28: com.sleepycat.je.utilint.TinyHashSet.size()I:22 - DeleteStatement: size()I
   * 4 Weak Mutation 54: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:47 - DeleteField: singleLjava/lang/Object;
   * 5 Weak Mutation 57: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:47 - ReplaceComparisonOperator = null -> != null
   * 6 Weak Mutation 62: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:51 - DeleteField: singleLjava/lang/Object;
   * 7 Weak Mutation 65: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:57 - DeleteField: setLjava/util/Set;
   * 8 Weak Mutation 66: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:57 - DeleteField: singleLjava/lang/Object;
   * 9 Weak Mutation 67: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:57 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 10 Weak Mutation 68: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:59 - DeleteField: setLjava/util/Set;
   * 11 Weak Mutation 69: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:59 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 12 com.sleepycat.je.utilint.TinyHashSet.size()I: I13 Branch 8 IFNULL L21 - false
   * 13 com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z: I6 Branch 17 IFNULL L47 - false
   * 14 com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z: I9 Branch 18 IFNULL L47 - true
   * 15 com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z: I30 Branch 20 IFNONNULL L51 - true
   * 16 Weak Mutation 23: com.sleepycat.je.utilint.TinyHashSet.size()I:18 - ReplaceComparisonOperator = null -> != null
   * 17 Weak Mutation 26: com.sleepycat.je.utilint.TinyHashSet.size()I:21 - ReplaceComparisonOperator = null -> != null
   * 18 Weak Mutation 25: com.sleepycat.je.utilint.TinyHashSet.size()I:21 - DeleteField: setLjava/util/Set;
   * 19 Weak Mutation 27: com.sleepycat.je.utilint.TinyHashSet.size()I:22 - DeleteField: setLjava/util/Set;
   * 20 Weak Mutation 28: com.sleepycat.je.utilint.TinyHashSet.size()I:22 - DeleteStatement: size()I
   * 21 Weak Mutation 54: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:47 - DeleteField: singleLjava/lang/Object;
   * 22 Weak Mutation 57: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:47 - ReplaceComparisonOperator = null -> != null
   * 23 Weak Mutation 62: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:51 - DeleteField: singleLjava/lang/Object;
   * 24 Weak Mutation 68: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:59 - DeleteField: setLjava/util/Set;
   * 25 Weak Mutation 69: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:59 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 26 Weak Mutation 65: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:57 - DeleteField: setLjava/util/Set;
   * 27 Weak Mutation 66: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:57 - DeleteField: singleLjava/lang/Object;
   * 28 Weak Mutation 67: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:57 - DeleteStatement: add(Ljava/lang/Object;)Z
   */
  @Test
  public void test2()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      Object object0 = new Object();
      tinyHashSet0.add((Object) tinyHashSet0);
      tinyHashSet0.add(object0);
      int int0 = tinyHashSet0.size();
      assertEquals(2, tinyHashSet0.size());
      assertEquals(2, int0);
  }

  //Test case number: 3
  /*
   * 50 covered goals:
   * 1 Weak Mutation 30: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:29 - InsertUnaryOp Negation
   * 2 Weak Mutation 34: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:29 - ReplaceComparisonOperator = null -> != null
   * 3 Weak Mutation 32: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:29 - ReplaceComparisonOperator != -> ==
   * 4 Weak Mutation 38: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:30 - ReplaceComparisonOperator = null -> != null
   * 5 Weak Mutation 47: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:39 - ReplaceComparisonOperator = null -> != null
   * 6 Weak Mutation 50: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:43 - ReplaceConstant - 0 -> 1
   * 7 Weak Mutation 0: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.<init>(Ljava/lang/Object;Lcom/sleepycat/je/utilint/TinyHashSet;)V:87 - ReplaceConstant - 0 -> 1
   * 8 Weak Mutation 1: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.<init>(Ljava/lang/Object;Lcom/sleepycat/je/utilint/TinyHashSet;)V:91 - ReplaceComparisonOperator != null -> = null
   * 9 Weak Mutation 3: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.<init>(Ljava/lang/Object;Lcom/sleepycat/je/utilint/TinyHashSet;)V:91 - ReplaceConstant - 0 -> 1
   * 10 Weak Mutation 9: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;:97 - InsertUnaryOp Negation
   * 11 Weak Mutation 11: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;:97 - ReplaceComparisonOperator == -> !=
   * 12 Weak Mutation 12: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;:100 - ReplaceConstant - 1 -> 0
   * 13 Weak Mutation 13: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;:101 - DeleteField: theObjectLjava/lang/Object;
   * 14 Weak Mutation 14: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:104 - DeleteField: theObjectLjava/lang/Object;
   * 15 Weak Mutation 15: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:104 - ReplaceComparisonOperator = null -> != null
   * 16 Weak Mutation 17: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:104 - DeleteField: returnedTheObjectZ
   * 17 Weak Mutation 16: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:104 - InsertUnaryOp Negation
   * 18 Weak Mutation 18: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:104 - ReplaceComparisonOperator != -> ==
   * 19 Weak Mutation 19: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:107 - DeleteField: theSetLcom/sleepycat/je/utilint/TinyHashSet;
   * 20 Weak Mutation 21: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:107 - DeleteStatement: remove(Ljava/lang/Object;)Z
   * 21 Weak Mutation 20: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:107 - DeleteField: theObjectLjava/lang/Object;
   * 22 com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z: I3 Branch 9 IFNE L29 - false
   * 23 com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z: I6 Branch 10 IFNULL L29 - true
   * 24 com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z: I18 Branch 12 IFNULL L30 - true
   * 25 com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z: I47 Branch 15 IFNULL L39 - true
   * 26 com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.<init>(Ljava/lang/Object;Lcom/sleepycat/je/utilint/TinyHashSet;)V: I23 Branch 1 IFNONNULL L91 - true
   * 27 com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;: I4 Branch 3 IFEQ L97 - true
   * 28 com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V: I4 Branch 4 IFNULL L104 - false
   * 29 com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V: I7 Branch 5 IFNE L104 - true
   * 30 Weak Mutation 0: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.<init>(Ljava/lang/Object;Lcom/sleepycat/je/utilint/TinyHashSet;)V:87 - ReplaceConstant - 0 -> 1
   * 31 Weak Mutation 1: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.<init>(Ljava/lang/Object;Lcom/sleepycat/je/utilint/TinyHashSet;)V:91 - ReplaceComparisonOperator != null -> = null
   * 32 Weak Mutation 3: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.<init>(Ljava/lang/Object;Lcom/sleepycat/je/utilint/TinyHashSet;)V:91 - ReplaceConstant - 0 -> 1
   * 33 Weak Mutation 9: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;:97 - InsertUnaryOp Negation
   * 34 Weak Mutation 11: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;:97 - ReplaceComparisonOperator == -> !=
   * 35 Weak Mutation 12: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;:100 - ReplaceConstant - 1 -> 0
   * 36 Weak Mutation 13: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;:101 - DeleteField: theObjectLjava/lang/Object;
   * 37 Weak Mutation 14: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:104 - DeleteField: theObjectLjava/lang/Object;
   * 38 Weak Mutation 15: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:104 - ReplaceComparisonOperator = null -> != null
   * 39 Weak Mutation 17: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:104 - DeleteField: returnedTheObjectZ
   * 40 Weak Mutation 16: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:104 - InsertUnaryOp Negation
   * 41 Weak Mutation 19: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:107 - DeleteField: theSetLcom/sleepycat/je/utilint/TinyHashSet;
   * 42 Weak Mutation 18: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:104 - ReplaceComparisonOperator != -> ==
   * 43 Weak Mutation 21: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:107 - DeleteStatement: remove(Ljava/lang/Object;)Z
   * 44 Weak Mutation 20: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:107 - DeleteField: theObjectLjava/lang/Object;
   * 45 Weak Mutation 30: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:29 - InsertUnaryOp Negation
   * 46 Weak Mutation 34: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:29 - ReplaceComparisonOperator = null -> != null
   * 47 Weak Mutation 32: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:29 - ReplaceComparisonOperator != -> ==
   * 48 Weak Mutation 38: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:30 - ReplaceComparisonOperator = null -> != null
   * 49 Weak Mutation 47: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:39 - ReplaceComparisonOperator = null -> != null
   * 50 Weak Mutation 50: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:43 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test3()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      Object object0 = new Object();
      TinyHashSet.SingleElementIterator tinyHashSet_SingleElementIterator0 = new TinyHashSet.SingleElementIterator(object0, tinyHashSet0);
      Object object1 = tinyHashSet_SingleElementIterator0.next();
      assertNotNull(object1);
      
      tinyHashSet_SingleElementIterator0.remove();
      assertEquals(true, tinyHashSet_SingleElementIterator0.returnedTheObject);
      assertEquals(false, tinyHashSet_SingleElementIterator0.hasNext());
  }

  //Test case number: 4
  /*
   * 20 covered goals:
   * 1 Weak Mutation 33: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:29 - DeleteField: singleLjava/lang/Object;
   * 2 Weak Mutation 36: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:29 - ReplaceComparisonOperator = null -> != null
   * 3 Weak Mutation 37: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:30 - DeleteField: singleLjava/lang/Object;
   * 4 Weak Mutation 39: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:31 - DeleteField: singleLjava/lang/Object;
   * 5 Weak Mutation 40: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:31 - ReplaceComparisonOperator == -> !=
   * 6 Weak Mutation 44: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:33 - ReplaceConstant - 1 -> 0
   * 7 com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z: I6 Branch 10 IFNULL L29 - false
   * 8 com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z: I9 Branch 11 IFNULL L29 - true
   * 9 com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z: I18 Branch 12 IFNULL L30 - false
   * 10 com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z: I24 Branch 13 IF_ACMPEQ L31 - true
   * 11 Weak Mutation 17: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:104 - DeleteField: returnedTheObjectZ
   * 12 Weak Mutation 19: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:107 - DeleteField: theSetLcom/sleepycat/je/utilint/TinyHashSet;
   * 13 Weak Mutation 21: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:107 - DeleteStatement: remove(Ljava/lang/Object;)Z
   * 14 Weak Mutation 20: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:107 - DeleteField: theObjectLjava/lang/Object;
   * 15 Weak Mutation 33: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:29 - DeleteField: singleLjava/lang/Object;
   * 16 Weak Mutation 39: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:31 - DeleteField: singleLjava/lang/Object;
   * 17 Weak Mutation 36: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:29 - ReplaceComparisonOperator = null -> != null
   * 18 Weak Mutation 37: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:30 - DeleteField: singleLjava/lang/Object;
   * 19 Weak Mutation 40: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:31 - ReplaceComparisonOperator == -> !=
   * 20 Weak Mutation 44: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:33 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test4()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      Object object0 = new Object();
      TinyHashSet.SingleElementIterator tinyHashSet_SingleElementIterator0 = new TinyHashSet.SingleElementIterator(object0, tinyHashSet0);
      tinyHashSet0.add(object0);
      tinyHashSet_SingleElementIterator0.next();
      assertEquals(1, tinyHashSet0.size());
      
      tinyHashSet_SingleElementIterator0.remove();
      assertEquals(0, tinyHashSet0.size());
  }

  //Test case number: 5
  /*
   * 15 covered goals:
   * 1 Weak Mutation 42: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:31 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 2 Weak Mutation 43: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:31 - ReplaceComparisonOperator == -> !=
   * 3 Weak Mutation 41: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:31 - DeleteField: singleLjava/lang/Object;
   * 4 Weak Mutation 45: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:36 - ReplaceConstant - 0 -> 1
   * 5 com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z: I24 Branch 13 IF_ACMPEQ L31 - false
   * 6 com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z: I29 Branch 14 IFEQ L31 - true
   * 7 Weak Mutation 33: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:29 - DeleteField: singleLjava/lang/Object;
   * 8 Weak Mutation 39: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:31 - DeleteField: singleLjava/lang/Object;
   * 9 Weak Mutation 36: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:29 - ReplaceComparisonOperator = null -> != null
   * 10 Weak Mutation 37: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:30 - DeleteField: singleLjava/lang/Object;
   * 11 Weak Mutation 40: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:31 - ReplaceComparisonOperator == -> !=
   * 12 Weak Mutation 42: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:31 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 13 Weak Mutation 43: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:31 - ReplaceComparisonOperator == -> !=
   * 14 Weak Mutation 41: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:31 - DeleteField: singleLjava/lang/Object;
   * 15 Weak Mutation 45: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:36 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test5()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      tinyHashSet0.add((Object) tinyHashSet0);
      boolean boolean0 = tinyHashSet0.remove((Object) "wo2a.cg(");
      assertEquals(1, tinyHashSet0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 12 covered goals:
   * 1 Weak Mutation 46: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:39 - DeleteField: setLjava/util/Set;
   * 2 Weak Mutation 49: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:40 - DeleteStatement: remove(Ljava/lang/Object;)Z
   * 3 Weak Mutation 48: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:40 - DeleteField: setLjava/util/Set;
   * 4 com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z: I47 Branch 15 IFNULL L39 - false
   * 5 Weak Mutation 30: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:29 - InsertUnaryOp Negation
   * 6 Weak Mutation 34: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:29 - ReplaceComparisonOperator = null -> != null
   * 7 Weak Mutation 32: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:29 - ReplaceComparisonOperator != -> ==
   * 8 Weak Mutation 38: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:30 - ReplaceComparisonOperator = null -> != null
   * 9 Weak Mutation 47: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:39 - ReplaceComparisonOperator = null -> != null
   * 10 Weak Mutation 46: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:39 - DeleteField: setLjava/util/Set;
   * 11 Weak Mutation 49: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:40 - DeleteStatement: remove(Ljava/lang/Object;)Z
   * 12 Weak Mutation 48: com.sleepycat.je.utilint.TinyHashSet.remove(Ljava/lang/Object;)Z:40 - DeleteField: setLjava/util/Set;
   */
  @Test
  public void test6()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      Object object0 = new Object();
      tinyHashSet0.add((Object) tinyHashSet0);
      tinyHashSet0.add(object0);
      tinyHashSet0.remove((Object) 1);
      assertEquals(2, tinyHashSet0.size());
  }

  //Test case number: 7
  /*
   * 7 covered goals:
   * 1 Weak Mutation 58: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:48 - DeleteField: setLjava/util/Set;
   * 2 Weak Mutation 61: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:49 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 3 Weak Mutation 60: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:49 - DeleteField: setLjava/util/Set;
   * 4 com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z: I18 Branch 19 IFNULL L48 - false
   * 5 Weak Mutation 58: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:48 - DeleteField: setLjava/util/Set;
   * 6 Weak Mutation 61: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:49 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 7 Weak Mutation 60: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:49 - DeleteField: setLjava/util/Set;
   */
  @Test
  public void test7()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      Object object0 = new Object();
      tinyHashSet0.add((Object) tinyHashSet0);
      tinyHashSet0.add(object0);
      boolean boolean0 = tinyHashSet0.add(object0);
      assertEquals(2, tinyHashSet0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 21 covered goals:
   * 1 Weak Mutation 76: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:63 - ReplaceComparisonOperator = null -> != null
   * 2 Weak Mutation 73: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:63 - DeleteField: singleLjava/lang/Object;
   * 3 Weak Mutation 80: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:69 - DeleteField: singleLjava/lang/Object;
   * 4 Weak Mutation 83: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:70 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 5 Weak Mutation 82: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:70 - DeleteField: singleLjava/lang/Object;
   * 6 com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;: I6 Branch 22 IFNULL L63 - false
   * 7 com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;: I9 Branch 23 IFNULL L63 - true
   * 8 com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;: I37 Branch 25 IFNULL L69 - false
   * 9 Weak Mutation 81: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:69 - ReplaceComparisonOperator = null -> != null
   * 10 Weak Mutation 70: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:63 - InsertUnaryOp Negation
   * 11 Weak Mutation 76: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:63 - ReplaceComparisonOperator = null -> != null
   * 12 Weak Mutation 78: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:64 - ReplaceComparisonOperator = null -> != null
   * 13 Weak Mutation 72: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:63 - ReplaceComparisonOperator != -> ==
   * 14 Weak Mutation 73: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:63 - DeleteField: singleLjava/lang/Object;
   * 15 Weak Mutation 74: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:63 - ReplaceComparisonOperator = null -> != null
   * 16 Weak Mutation 81: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:69 - ReplaceComparisonOperator = null -> != null
   * 17 Weak Mutation 80: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:69 - DeleteField: singleLjava/lang/Object;
   * 18 Weak Mutation 83: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:70 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 19 Weak Mutation 82: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:70 - DeleteField: singleLjava/lang/Object;
   * 20 com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;: I3 Branch 21 IFNE L63 - false
   * 21 com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;: I18 Branch 24 IFNULL L64 - true
   */
  @Test
  public void test8()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      Object object0 = new Object();
      tinyHashSet0.add(object0);
      Set<?> set0 = tinyHashSet0.copy();
      assertEquals(1, tinyHashSet0.size());
      assertEquals(1, set0.size());
  }

  //Test case number: 9
  /*
   * 10 covered goals:
   * 1 Weak Mutation 77: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:64 - DeleteField: setLjava/util/Set;
   * 2 Weak Mutation 79: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:65 - DeleteField: setLjava/util/Set;
   * 3 com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;: I18 Branch 24 IFNULL L64 - false
   * 4 Weak Mutation 70: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:63 - InsertUnaryOp Negation
   * 5 Weak Mutation 78: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:64 - ReplaceComparisonOperator = null -> != null
   * 6 Weak Mutation 72: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:63 - ReplaceComparisonOperator != -> ==
   * 7 Weak Mutation 74: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:63 - ReplaceComparisonOperator = null -> != null
   * 8 Weak Mutation 77: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:64 - DeleteField: setLjava/util/Set;
   * 9 Weak Mutation 79: com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;:65 - DeleteField: setLjava/util/Set;
   * 10 com.sleepycat.je.utilint.TinyHashSet.copy()Ljava/util/Set;: I6 Branch 22 IFNULL L63 - true
   */
  @Test
  public void test9()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      Object object0 = new Object();
      tinyHashSet0.add((Object) tinyHashSet0);
      tinyHashSet0.add(object0);
      Set<?> set0 = tinyHashSet0.copy();
      assertEquals(2, tinyHashSet0.size());
      assertEquals(false, set0.isEmpty());
  }

  //Test case number: 10
  /*
   * 14 covered goals:
   * 1 Weak Mutation 87: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:76 - DeleteField: singleLjava/lang/Object;
   * 2 Weak Mutation 90: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:76 - ReplaceComparisonOperator = null -> != null
   * 3 Weak Mutation 95: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:81 - DeleteField: singleLjava/lang/Object;
   * 4 com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;: I6 Branch 27 IFNULL L76 - false
   * 5 com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;: I9 Branch 28 IFNULL L76 - true
   * 6 Weak Mutation 84: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:76 - InsertUnaryOp Negation
   * 7 Weak Mutation 87: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:76 - DeleteField: singleLjava/lang/Object;
   * 8 Weak Mutation 86: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:76 - ReplaceComparisonOperator != -> ==
   * 9 Weak Mutation 92: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:77 - ReplaceComparisonOperator = null -> != null
   * 10 Weak Mutation 95: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:81 - DeleteField: singleLjava/lang/Object;
   * 11 Weak Mutation 88: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:76 - ReplaceComparisonOperator = null -> != null
   * 12 Weak Mutation 90: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:76 - ReplaceComparisonOperator = null -> != null
   * 13 com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;: I3 Branch 26 IFNE L76 - false
   * 14 com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;: I18 Branch 29 IFNULL L77 - true
   */
  @Test
  public void test10()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      Object object0 = new Object();
      tinyHashSet0.add(object0);
      Iterator<?> iterator0 = tinyHashSet0.iterator();
      assertEquals(1, tinyHashSet0.size());
      assertEquals(true, iterator0.hasNext());
  }

  //Test case number: 11
  /*
   * 26 covered goals:
   * 1 Weak Mutation 91: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:77 - DeleteField: setLjava/util/Set;
   * 2 Weak Mutation 93: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:78 - DeleteField: setLjava/util/Set;
   * 3 Weak Mutation 94: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:78 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 4 com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;: I18 Branch 29 IFNULL L77 - false
   * 5 Weak Mutation 51: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:47 - InsertUnaryOp Negation
   * 6 Weak Mutation 55: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:47 - ReplaceComparisonOperator = null -> != null
   * 7 Weak Mutation 54: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:47 - DeleteField: singleLjava/lang/Object;
   * 8 Weak Mutation 53: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:47 - ReplaceComparisonOperator != -> ==
   * 9 Weak Mutation 59: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:48 - ReplaceComparisonOperator = null -> != null
   * 10 Weak Mutation 57: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:47 - ReplaceComparisonOperator = null -> != null
   * 11 Weak Mutation 63: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:51 - ReplaceComparisonOperator != null -> = null
   * 12 Weak Mutation 62: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:51 - DeleteField: singleLjava/lang/Object;
   * 13 Weak Mutation 68: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:59 - DeleteField: setLjava/util/Set;
   * 14 Weak Mutation 69: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:59 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 15 Weak Mutation 64: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:53 - ReplaceConstant - 1 -> 0
   * 16 Weak Mutation 65: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:57 - DeleteField: setLjava/util/Set;
   * 17 Weak Mutation 66: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:57 - DeleteField: singleLjava/lang/Object;
   * 18 Weak Mutation 67: com.sleepycat.je.utilint.TinyHashSet.add(Ljava/lang/Object;)Z:57 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 19 Weak Mutation 84: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:76 - InsertUnaryOp Negation
   * 20 Weak Mutation 86: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:76 - ReplaceComparisonOperator != -> ==
   * 21 Weak Mutation 92: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:77 - ReplaceComparisonOperator = null -> != null
   * 22 Weak Mutation 88: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:76 - ReplaceComparisonOperator = null -> != null
   * 23 Weak Mutation 93: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:78 - DeleteField: setLjava/util/Set;
   * 24 Weak Mutation 94: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:78 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 25 Weak Mutation 91: com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;:77 - DeleteField: setLjava/util/Set;
   * 26 com.sleepycat.je.utilint.TinyHashSet.iterator()Ljava/util/Iterator;: I6 Branch 27 IFNULL L76 - true
   */
  @Test
  public void test11()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      Object object0 = new Object();
      tinyHashSet0.add((Object) tinyHashSet0);
      tinyHashSet0.add(object0);
      Iterator<?> iterator0 = tinyHashSet0.iterator();
      assertEquals(2, tinyHashSet0.size());
      assertEquals(true, iterator0.hasNext());
  }

  //Test case number: 12
  /*
   * 7 covered goals:
   * 1 Weak Mutation 4: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.hasNext()Z:94 - InsertUnaryOp Negation
   * 2 Weak Mutation 6: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.hasNext()Z:94 - ReplaceComparisonOperator == -> !=
   * 3 Weak Mutation 8: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.hasNext()Z:94 - ReplaceConstant - 1 -> 0
   * 4 com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.hasNext()Z: I4 Branch 2 IFEQ L94 - true
   * 5 Weak Mutation 4: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.hasNext()Z:94 - InsertUnaryOp Negation
   * 6 Weak Mutation 6: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.hasNext()Z:94 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 8: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.hasNext()Z:94 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test12()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      Object object0 = new Object();
      TinyHashSet.SingleElementIterator tinyHashSet_SingleElementIterator0 = new TinyHashSet.SingleElementIterator(object0, tinyHashSet0);
      boolean boolean0 = tinyHashSet_SingleElementIterator0.hasNext();
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 7 covered goals:
   * 1 Weak Mutation 5: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.hasNext()Z:94 - DeleteField: returnedTheObjectZ
   * 2 Weak Mutation 7: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.hasNext()Z:94 - ReplaceConstant - 0 -> 1
   * 3 com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.hasNext()Z: I4 Branch 2 IFEQ L94 - false
   * 4 Weak Mutation 4: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.hasNext()Z:94 - InsertUnaryOp Negation
   * 5 Weak Mutation 6: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.hasNext()Z:94 - ReplaceComparisonOperator == -> !=
   * 6 Weak Mutation 5: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.hasNext()Z:94 - DeleteField: returnedTheObjectZ
   * 7 Weak Mutation 7: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.hasNext()Z:94 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test13()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      Object object0 = new Object();
      TinyHashSet.SingleElementIterator tinyHashSet_SingleElementIterator0 = new TinyHashSet.SingleElementIterator(object0, tinyHashSet0);
      Object object1 = tinyHashSet_SingleElementIterator0.next();
      assertNotNull(object1);
      
      boolean boolean0 = tinyHashSet_SingleElementIterator0.hasNext();
      assertEquals(true, tinyHashSet_SingleElementIterator0.returnedTheObject);
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 7 covered goals:
   * 1 Weak Mutation 10: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;:97 - DeleteField: returnedTheObjectZ
   * 2 com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;: I4 Branch 3 IFEQ L97 - false
   * 3 Weak Mutation 9: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;:97 - InsertUnaryOp Negation
   * 4 Weak Mutation 11: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;:97 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 12: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;:100 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 13: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;:101 - DeleteField: theObjectLjava/lang/Object;
   * 7 Weak Mutation 10: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.next()Ljava/lang/Object;:97 - DeleteField: returnedTheObjectZ
   */
  @Test
  public void test14()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      Object object0 = new Object();
      TinyHashSet.SingleElementIterator tinyHashSet_SingleElementIterator0 = new TinyHashSet.SingleElementIterator(object0, tinyHashSet0);
      Object object1 = tinyHashSet_SingleElementIterator0.next();
      assertNotNull(object1);
      
      // Undeclared exception!
      try {
        tinyHashSet_SingleElementIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * 1 com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V: I4 Branch 4 IFNULL L104 - true
   * 2 Weak Mutation 2: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.<init>(Ljava/lang/Object;Lcom/sleepycat/je/utilint/TinyHashSet;)V:91 - ReplaceConstant - 1 -> 0
   * 3 Weak Mutation 2: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.<init>(Ljava/lang/Object;Lcom/sleepycat/je/utilint/TinyHashSet;)V:91 - ReplaceConstant - 1 -> 0
   * 4 com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.<init>(Ljava/lang/Object;Lcom/sleepycat/je/utilint/TinyHashSet;)V: I23 Branch 1 IFNONNULL L91 - false
   */
  @Test
  public void test15()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      TinyHashSet.SingleElementIterator tinyHashSet_SingleElementIterator0 = new TinyHashSet.SingleElementIterator((Object) null, tinyHashSet0);
      // Undeclared exception!
      try {
        tinyHashSet_SingleElementIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
      }
  }

  //Test case number: 16
  /*
   * 8 covered goals:
   * 1 com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V: I7 Branch 5 IFNE L104 - false
   * 2 Weak Mutation 0: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.<init>(Ljava/lang/Object;Lcom/sleepycat/je/utilint/TinyHashSet;)V:87 - ReplaceConstant - 0 -> 1
   * 3 Weak Mutation 1: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.<init>(Ljava/lang/Object;Lcom/sleepycat/je/utilint/TinyHashSet;)V:91 - ReplaceComparisonOperator != null -> = null
   * 4 Weak Mutation 3: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.<init>(Ljava/lang/Object;Lcom/sleepycat/je/utilint/TinyHashSet;)V:91 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 14: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:104 - DeleteField: theObjectLjava/lang/Object;
   * 6 Weak Mutation 15: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:104 - ReplaceComparisonOperator = null -> != null
   * 7 Weak Mutation 16: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:104 - InsertUnaryOp Negation
   * 8 Weak Mutation 18: com.sleepycat.je.utilint.TinyHashSet$SingleElementIterator.remove()V:104 - ReplaceComparisonOperator != -> ==
   */
  @Test
  public void test16()  throws Throwable  {
      TinyHashSet tinyHashSet0 = new TinyHashSet();
      TinyHashSet.SingleElementIterator tinyHashSet_SingleElementIterator0 = new TinyHashSet.SingleElementIterator((Object) tinyHashSet0, tinyHashSet0);
      // Undeclared exception!
      try {
        tinyHashSet_SingleElementIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
      }
  }
}
