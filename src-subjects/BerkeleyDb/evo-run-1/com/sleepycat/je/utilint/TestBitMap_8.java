/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.utilint;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.utilint.BitMap;

@RunWith(EvoSuiteRunner.class)
public class TestBitMap_8 {


  //Test case number: 8
  /*
   * 38 covered goals:
   * 1 com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;: I24 Branch 6 IFNONNULL L49 - true
   * 2 Weak Mutation 0: com.sleepycat.je.utilint.BitMap.set(J)V:24 - InsertUnaryOp Negation
   * 3 Weak Mutation 1: com.sleepycat.je.utilint.BitMap.set(J)V:24 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 2: com.sleepycat.je.utilint.BitMap.set(J)V:24 - ReplaceConstant - 0 -> -1
   * 5 Weak Mutation 3: com.sleepycat.je.utilint.BitMap.set(J)V:24 - DeleteStatement: longSub(JJ)I
   * 6 Weak Mutation 4: com.sleepycat.je.utilint.BitMap.set(J)V:24 - ReplaceComparisonOperator >= -> ==
   * 7 Weak Mutation 12: com.sleepycat.je.utilint.BitMap.set(J)V:27 - InsertUnaryOp Negation
   * 8 Weak Mutation 13: com.sleepycat.je.utilint.BitMap.set(J)V:27 - ReplaceConstant - 1 -> 0
   * 9 Weak Mutation 14: com.sleepycat.je.utilint.BitMap.set(J)V:28 - ReplaceComparisonOperator != null -> = null
   * 10 Weak Mutation 21: com.sleepycat.je.utilint.BitMap.set(J)V:32 - InsertUnaryOp Negation
   * 11 Weak Mutation 20: com.sleepycat.je.utilint.BitMap.set(J)V:31 - InsertUnaryOp Negation
   * 12 Weak Mutation 23: com.sleepycat.je.utilint.BitMap.set(J)V:32 - InsertUnaryOp IINC -1
   * 13 Weak Mutation 22: com.sleepycat.je.utilint.BitMap.set(J)V:32 - InsertUnaryOp IINC 1
   * 14 Weak Mutation 24: com.sleepycat.je.utilint.BitMap.set(J)V:32 - DeleteStatement: set(I)V
   * 15 Weak Mutation 46: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:46 - InsertUnaryOp Negation
   * 16 Weak Mutation 47: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:46 - ReplaceConstant - 16 -> 0
   * 17 Weak Mutation 51: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:46 - ReplaceConstant - 16 -> 17
   * 18 Weak Mutation 50: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:46 - ReplaceConstant - 16 -> 15
   * 19 Weak Mutation 49: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:46 - ReplaceConstant - 16 -> -1
   * 20 Weak Mutation 48: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:46 - ReplaceConstant - 16 -> 1
   * 21 Weak Mutation 55: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:47 - DeleteStatement: get(Ljava/lang/Object;)Ljava/lang/Object;
   * 22 Weak Mutation 54: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:47 - DeleteField: bitSegmentsLjava/util/Map;
   * 23 Weak Mutation 53: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:46 - ReplaceBitwiseOperator >> -> <<
   * 24 Weak Mutation 59: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:48 - ReplaceComparisonOperator == -> !=
   * 25 Weak Mutation 58: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:48 - InsertUnaryOp IINC -1
   * 26 Weak Mutation 57: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:48 - InsertUnaryOp IINC 1
   * 27 Weak Mutation 56: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:48 - InsertUnaryOp Negation
   * 28 Weak Mutation 63: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:57 - InsertUnaryOp Negation
   * 29 Weak Mutation 62: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:51 - DeleteStatement: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   * 30 Weak Mutation 61: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:51 - DeleteField: bitSegmentsLjava/util/Map;
   * 31 Weak Mutation 60: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:49 - ReplaceComparisonOperator != null -> = null
   * 32 Weak Mutation 68: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:57 - ReplaceConstant - 65535 -> 65536
   * 33 Weak Mutation 69: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:57 - ReplaceBitwiseOperator & -> |
   * 34 Weak Mutation 70: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:57 - ReplaceBitwiseOperator & -> ^
   * 35 Weak Mutation 64: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:57 - ReplaceConstant - 65535 -> 0
   * 36 Weak Mutation 65: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:57 - ReplaceConstant - 65535 -> 1
   * 37 Weak Mutation 66: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:57 - ReplaceConstant - 65535 -> -1
   * 38 Weak Mutation 67: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:57 - ReplaceConstant - 65535 -> 65534
   */
  @Test
  public void test8()  throws Throwable  {
      BitMap bitMap0 = new BitMap();
      bitMap0.set(42L);
      bitMap0.set(42L);
      assertEquals(1, bitMap0.getNumSegments());
      assertEquals(1, bitMap0.cardinality());
  }
}
