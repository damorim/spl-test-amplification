/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.utilint;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.utilint.BitMap;

@RunWith(EvoSuiteRunner.class)
public class TestBitMap {


  //Test case number: 0
  /*
   * 78 covered goals:
   * 1 Weak Mutation 0: com.sleepycat.je.utilint.BitMap.set(J)V:26 - InsertUnaryOp Negation of index
   * 2 Weak Mutation 1: com.sleepycat.je.utilint.BitMap.set(J)V:26 - ReplaceConstant - 0 -> 1
   * 3 Weak Mutation 2: com.sleepycat.je.utilint.BitMap.set(J)V:26 - ReplaceConstant - 0 -> -1
   * 4 Weak Mutation 3: com.sleepycat.je.utilint.BitMap.set(J)V:26 - DeleteStatement: longSub(JJ)I
   * 5 Weak Mutation 5: com.sleepycat.je.utilint.BitMap.set(J)V:26 - ReplaceComparisonOperator >= -> >
   * 6 Weak Mutation 12: com.sleepycat.je.utilint.BitMap.set(J)V:29 - InsertUnaryOp Negation of index
   * 7 Weak Mutation 13: com.sleepycat.je.utilint.BitMap.set(J)V:29 - ReplaceConstant - 1 -> 0
   * 8 Weak Mutation 14: com.sleepycat.je.utilint.BitMap.set(J)V:30 - ReplaceComparisonOperator != null -> = null
   * 9 Weak Mutation 20: com.sleepycat.je.utilint.BitMap.set(J)V:33 - InsertUnaryOp Negation of index
   * 10 Weak Mutation 21: com.sleepycat.je.utilint.BitMap.set(J)V:34 - InsertUnaryOp Negation of useIndex
   * 11 Weak Mutation 23: com.sleepycat.je.utilint.BitMap.set(J)V:34 - InsertUnaryOp IINC -1 useIndex
   * 12 Weak Mutation 22: com.sleepycat.je.utilint.BitMap.set(J)V:34 - InsertUnaryOp IINC 1 useIndex
   * 13 Weak Mutation 24: com.sleepycat.je.utilint.BitMap.set(J)V:34 - DeleteStatement: set(I)V
   * 14 Weak Mutation 46: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - InsertUnaryOp Negation of index
   * 15 Weak Mutation 47: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceConstant - 16 -> 0
   * 16 Weak Mutation 51: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceConstant - 16 -> 17
   * 17 Weak Mutation 50: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceConstant - 16 -> 15
   * 18 Weak Mutation 49: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceConstant - 16 -> -1
   * 19 Weak Mutation 48: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceConstant - 16 -> 1
   * 20 Weak Mutation 55: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:51 - DeleteStatement: get(Ljava/lang/Object;)Ljava/lang/Object;
   * 21 Weak Mutation 54: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:51 - DeleteField: bitSegmentsLjava/util/Map;
   * 22 Weak Mutation 59: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:52 - ReplaceComparisonOperator == -> !=
   * 23 Weak Mutation 58: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:52 - InsertUnaryOp IINC -1 allowCreate
   * 24 Weak Mutation 57: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:52 - InsertUnaryOp IINC 1 allowCreate
   * 25 Weak Mutation 56: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:52 - InsertUnaryOp Negation of allowCreate
   * 26 Weak Mutation 60: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:53 - ReplaceComparisonOperator != null -> = null
   * 27 Weak Mutation 62: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:55 - DeleteStatement: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   * 28 Weak Mutation 61: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:55 - DeleteField: bitSegmentsLjava/util/Map;
   * 29 Weak Mutation 63: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - InsertUnaryOp Negation of index
   * 30 Weak Mutation 68: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceConstant - 65535 -> 65536
   * 31 Weak Mutation 69: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceBitwiseOperator & -> |
   * 32 Weak Mutation 70: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceBitwiseOperator & -> ^
   * 33 Weak Mutation 64: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceConstant - 65535 -> 0
   * 34 Weak Mutation 65: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceConstant - 65535 -> 1
   * 35 Weak Mutation 66: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceConstant - 65535 -> -1
   * 36 Weak Mutation 67: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceConstant - 65535 -> 65534
   * 37 com.sleepycat.je.utilint.BitMap.<init>()V: root-Branch
   * 38 com.sleepycat.je.utilint.BitMap.getIntIndex(J)I: root-Branch
   * 39 com.sleepycat.je.utilint.BitMap.set(J)V: I5 Branch 1 IFGE L26 - true
   * 40 com.sleepycat.je.utilint.BitMap.set(J)V: I30 Branch 2 IFNONNULL L30 - true
   * 41 com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;: I20 Branch 5 IFEQ L52 - false
   * 42 com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;: I24 Branch 6 IFNONNULL L53 - false
   * 43 Weak Mutation 0: com.sleepycat.je.utilint.BitMap.set(J)V:26 - InsertUnaryOp Negation of index
   * 44 Weak Mutation 1: com.sleepycat.je.utilint.BitMap.set(J)V:26 - ReplaceConstant - 0 -> 1
   * 45 Weak Mutation 2: com.sleepycat.je.utilint.BitMap.set(J)V:26 - ReplaceConstant - 0 -> -1
   * 46 Weak Mutation 3: com.sleepycat.je.utilint.BitMap.set(J)V:26 - DeleteStatement: longSub(JJ)I
   * 47 Weak Mutation 5: com.sleepycat.je.utilint.BitMap.set(J)V:26 - ReplaceComparisonOperator >= -> >
   * 48 Weak Mutation 12: com.sleepycat.je.utilint.BitMap.set(J)V:29 - InsertUnaryOp Negation of index
   * 49 Weak Mutation 13: com.sleepycat.je.utilint.BitMap.set(J)V:29 - ReplaceConstant - 1 -> 0
   * 50 Weak Mutation 14: com.sleepycat.je.utilint.BitMap.set(J)V:30 - ReplaceComparisonOperator != null -> = null
   * 51 Weak Mutation 21: com.sleepycat.je.utilint.BitMap.set(J)V:34 - InsertUnaryOp Negation of useIndex
   * 52 Weak Mutation 20: com.sleepycat.je.utilint.BitMap.set(J)V:33 - InsertUnaryOp Negation of index
   * 53 Weak Mutation 23: com.sleepycat.je.utilint.BitMap.set(J)V:34 - InsertUnaryOp IINC -1 useIndex
   * 54 Weak Mutation 22: com.sleepycat.je.utilint.BitMap.set(J)V:34 - InsertUnaryOp IINC 1 useIndex
   * 55 Weak Mutation 24: com.sleepycat.je.utilint.BitMap.set(J)V:34 - DeleteStatement: set(I)V
   * 56 Weak Mutation 46: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - InsertUnaryOp Negation of index
   * 57 Weak Mutation 47: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceConstant - 16 -> 0
   * 58 Weak Mutation 51: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceConstant - 16 -> 17
   * 59 Weak Mutation 50: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceConstant - 16 -> 15
   * 60 Weak Mutation 49: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceConstant - 16 -> -1
   * 61 Weak Mutation 48: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceConstant - 16 -> 1
   * 62 Weak Mutation 55: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:51 - DeleteStatement: get(Ljava/lang/Object;)Ljava/lang/Object;
   * 63 Weak Mutation 54: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:51 - DeleteField: bitSegmentsLjava/util/Map;
   * 64 Weak Mutation 59: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:52 - ReplaceComparisonOperator == -> !=
   * 65 Weak Mutation 58: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:52 - InsertUnaryOp IINC -1 allowCreate
   * 66 Weak Mutation 57: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:52 - InsertUnaryOp IINC 1 allowCreate
   * 67 Weak Mutation 56: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:52 - InsertUnaryOp Negation of allowCreate
   * 68 Weak Mutation 63: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - InsertUnaryOp Negation of index
   * 69 Weak Mutation 62: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:55 - DeleteStatement: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   * 70 Weak Mutation 61: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:55 - DeleteField: bitSegmentsLjava/util/Map;
   * 71 Weak Mutation 60: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:53 - ReplaceComparisonOperator != null -> = null
   * 72 Weak Mutation 68: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceConstant - 65535 -> 65536
   * 73 Weak Mutation 69: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceBitwiseOperator & -> |
   * 74 Weak Mutation 70: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceBitwiseOperator & -> ^
   * 75 Weak Mutation 64: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceConstant - 65535 -> 0
   * 76 Weak Mutation 65: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceConstant - 65535 -> 1
   * 77 Weak Mutation 66: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceConstant - 65535 -> -1
   * 78 Weak Mutation 67: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceConstant - 65535 -> 65534
   */
  @Test
  public void test0()  throws Throwable  {
      BitMap bitMap0 = new BitMap();
      bitMap0.set(0L);
      assertEquals(1, bitMap0.cardinality());
      assertEquals(1, bitMap0.getNumSegments());
  }

  //Test case number: 1
  /*
   * 23 covered goals:
   * 1 Weak Mutation 41: com.sleepycat.je.utilint.BitMap.get(J)Z:45 - InsertUnaryOp Negation of index
   * 2 Weak Mutation 42: com.sleepycat.je.utilint.BitMap.get(J)Z:46 - InsertUnaryOp Negation of useIndex
   * 3 Weak Mutation 43: com.sleepycat.je.utilint.BitMap.get(J)Z:46 - InsertUnaryOp IINC 1 useIndex
   * 4 Weak Mutation 44: com.sleepycat.je.utilint.BitMap.get(J)Z:46 - InsertUnaryOp IINC -1 useIndex
   * 5 Weak Mutation 45: com.sleepycat.je.utilint.BitMap.get(J)Z:46 - DeleteStatement: get(I)Z
   * 6 com.sleepycat.je.utilint.BitMap.get(J)Z: I30 Branch 4 IFNONNULL L42 - true
   * 7 Weak Mutation 4: com.sleepycat.je.utilint.BitMap.set(J)V:26 - ReplaceComparisonOperator >= -> ==
   * 8 Weak Mutation 25: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - InsertUnaryOp Negation of index
   * 9 Weak Mutation 27: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - ReplaceConstant - 0 -> -1
   * 10 Weak Mutation 26: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - ReplaceConstant - 0 -> 1
   * 11 Weak Mutation 29: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - ReplaceComparisonOperator >= -> ==
   * 12 Weak Mutation 28: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - DeleteStatement: longSub(JJ)I
   * 13 Weak Mutation 38: com.sleepycat.je.utilint.BitMap.get(J)Z:41 - ReplaceConstant - 0 -> 1
   * 14 Weak Mutation 39: com.sleepycat.je.utilint.BitMap.get(J)Z:42 - ReplaceComparisonOperator != null -> = null
   * 15 Weak Mutation 37: com.sleepycat.je.utilint.BitMap.get(J)Z:41 - InsertUnaryOp Negation of index
   * 16 Weak Mutation 42: com.sleepycat.je.utilint.BitMap.get(J)Z:46 - InsertUnaryOp Negation of useIndex
   * 17 Weak Mutation 43: com.sleepycat.je.utilint.BitMap.get(J)Z:46 - InsertUnaryOp IINC 1 useIndex
   * 18 Weak Mutation 41: com.sleepycat.je.utilint.BitMap.get(J)Z:45 - InsertUnaryOp Negation of index
   * 19 Weak Mutation 44: com.sleepycat.je.utilint.BitMap.get(J)Z:46 - InsertUnaryOp IINC -1 useIndex
   * 20 Weak Mutation 45: com.sleepycat.je.utilint.BitMap.get(J)Z:46 - DeleteStatement: get(I)Z
   * 21 Weak Mutation 53: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceBitwiseOperator >> -> <<
   * 22 com.sleepycat.je.utilint.BitMap.get(J)Z: I5 Branch 3 IFGE L38 - true
   * 23 com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;: I20 Branch 5 IFEQ L52 - true
   */
  @Test
  public void test1()  throws Throwable  {
      BitMap bitMap0 = new BitMap();
      bitMap0.set(526L);
      boolean boolean0 = bitMap0.get((long) 1);
      assertEquals(1, bitMap0.cardinality());
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 13 covered goals:
   * 1 Weak Mutation 6: com.sleepycat.je.utilint.BitMap.set(J)V:26 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 7: com.sleepycat.je.utilint.BitMap.set(J)V:27 - InsertUnaryOp Negation of index
   * 3 Weak Mutation 8: com.sleepycat.je.utilint.BitMap.set(J)V:27 - DeleteStatement: valueOf(J)Ljava/lang/String;
   * 4 Weak Mutation 9: com.sleepycat.je.utilint.BitMap.set(J)V:27 - ReplaceConstant -  is negative. -> 
   * 5 Weak Mutation 10: com.sleepycat.je.utilint.BitMap.set(J)V:27 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 6 Weak Mutation 11: com.sleepycat.je.utilint.BitMap.set(J)V:27 - DeleteStatement: toString()Ljava/lang/String;
   * 7 com.sleepycat.je.utilint.BitMap.set(J)V: I5 Branch 1 IFGE L26 - false
   * 8 Weak Mutation 6: com.sleepycat.je.utilint.BitMap.set(J)V:26 - ReplaceComparisonOperator >= -> -1
   * 9 Weak Mutation 7: com.sleepycat.je.utilint.BitMap.set(J)V:27 - InsertUnaryOp Negation of index
   * 10 Weak Mutation 8: com.sleepycat.je.utilint.BitMap.set(J)V:27 - DeleteStatement: valueOf(J)Ljava/lang/String;
   * 11 Weak Mutation 9: com.sleepycat.je.utilint.BitMap.set(J)V:27 - ReplaceConstant -  is negative. -> 
   * 12 Weak Mutation 10: com.sleepycat.je.utilint.BitMap.set(J)V:27 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 13 Weak Mutation 11: com.sleepycat.je.utilint.BitMap.set(J)V:27 - DeleteStatement: toString()Ljava/lang/String;
   */
  @Test
  public void test2()  throws Throwable  {
      BitMap bitMap0 = new BitMap();
      try {
        bitMap0.set((-615L));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * -615 is negative.
         */
      }
  }

  //Test case number: 3
  /*
   * 17 covered goals:
   * 1 Weak Mutation 25: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - InsertUnaryOp Negation of index
   * 2 Weak Mutation 27: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - ReplaceConstant - 0 -> -1
   * 3 Weak Mutation 26: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 28: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - DeleteStatement: longSub(JJ)I
   * 5 Weak Mutation 31: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - ReplaceComparisonOperator >= -> -1
   * 6 Weak Mutation 34: com.sleepycat.je.utilint.BitMap.get(J)Z:39 - ReplaceConstant -  is negative. -> 
   * 7 Weak Mutation 35: com.sleepycat.je.utilint.BitMap.get(J)Z:39 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 8 Weak Mutation 32: com.sleepycat.je.utilint.BitMap.get(J)Z:39 - InsertUnaryOp Negation of index
   * 9 Weak Mutation 33: com.sleepycat.je.utilint.BitMap.get(J)Z:39 - DeleteStatement: valueOf(J)Ljava/lang/String;
   * 10 Weak Mutation 36: com.sleepycat.je.utilint.BitMap.get(J)Z:39 - DeleteStatement: toString()Ljava/lang/String;
   * 11 com.sleepycat.je.utilint.BitMap.get(J)Z: I5 Branch 3 IFGE L38 - false
   * 12 Weak Mutation 31: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - ReplaceComparisonOperator >= -> -1
   * 13 Weak Mutation 34: com.sleepycat.je.utilint.BitMap.get(J)Z:39 - ReplaceConstant -  is negative. -> 
   * 14 Weak Mutation 35: com.sleepycat.je.utilint.BitMap.get(J)Z:39 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 15 Weak Mutation 32: com.sleepycat.je.utilint.BitMap.get(J)Z:39 - InsertUnaryOp Negation of index
   * 16 Weak Mutation 33: com.sleepycat.je.utilint.BitMap.get(J)Z:39 - DeleteStatement: valueOf(J)Ljava/lang/String;
   * 17 Weak Mutation 36: com.sleepycat.je.utilint.BitMap.get(J)Z:39 - DeleteStatement: toString()Ljava/lang/String;
   */
  @Test
  public void test3()  throws Throwable  {
      BitMap bitMap0 = new BitMap();
      try {
        bitMap0.get((-169L));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * -169 is negative.
         */
      }
  }

  //Test case number: 4
  /*
   * 9 covered goals:
   * 1 Weak Mutation 29: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - ReplaceComparisonOperator >= -> ==
   * 2 Weak Mutation 38: com.sleepycat.je.utilint.BitMap.get(J)Z:41 - ReplaceConstant - 0 -> 1
   * 3 Weak Mutation 37: com.sleepycat.je.utilint.BitMap.get(J)Z:41 - InsertUnaryOp Negation of index
   * 4 Weak Mutation 39: com.sleepycat.je.utilint.BitMap.get(J)Z:42 - ReplaceComparisonOperator != null -> = null
   * 5 Weak Mutation 40: com.sleepycat.je.utilint.BitMap.get(J)Z:43 - ReplaceConstant - 0 -> 1
   * 6 com.sleepycat.je.utilint.BitMap.get(J)Z: I5 Branch 3 IFGE L38 - true
   * 7 com.sleepycat.je.utilint.BitMap.get(J)Z: I30 Branch 4 IFNONNULL L42 - false
   * 8 com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;: I20 Branch 5 IFEQ L52 - true
   * 9 Weak Mutation 40: com.sleepycat.je.utilint.BitMap.get(J)Z:43 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test4()  throws Throwable  {
      BitMap bitMap0 = new BitMap();
      boolean boolean0 = bitMap0.get((long) 1);
      assertEquals(0, bitMap0.getNumSegments());
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 10 covered goals:
   * 1 Weak Mutation 30: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - ReplaceComparisonOperator >= -> >
   * 2 Weak Mutation 25: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - InsertUnaryOp Negation of index
   * 3 Weak Mutation 27: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - ReplaceConstant - 0 -> -1
   * 4 Weak Mutation 26: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 28: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - DeleteStatement: longSub(JJ)I
   * 6 Weak Mutation 38: com.sleepycat.je.utilint.BitMap.get(J)Z:41 - ReplaceConstant - 0 -> 1
   * 7 Weak Mutation 39: com.sleepycat.je.utilint.BitMap.get(J)Z:42 - ReplaceComparisonOperator != null -> = null
   * 8 Weak Mutation 37: com.sleepycat.je.utilint.BitMap.get(J)Z:41 - InsertUnaryOp Negation of index
   * 9 Weak Mutation 40: com.sleepycat.je.utilint.BitMap.get(J)Z:43 - ReplaceConstant - 0 -> 1
   * 10 Weak Mutation 30: com.sleepycat.je.utilint.BitMap.get(J)Z:38 - ReplaceComparisonOperator >= -> >
   */
  @Test
  public void test5()  throws Throwable  {
      BitMap bitMap0 = new BitMap();
      boolean boolean0 = bitMap0.get(0L);
      assertEquals(false, boolean0);
      assertEquals(0, bitMap0.getNumSegments());
  }

  //Test case number: 6
  /*
   * 5 covered goals:
   * 1 Weak Mutation 71: com.sleepycat.je.utilint.BitMap.getNumSegments()I:66 - DeleteField: bitSegmentsLjava/util/Map;
   * 2 Weak Mutation 72: com.sleepycat.je.utilint.BitMap.getNumSegments()I:66 - DeleteStatement: size()I
   * 3 com.sleepycat.je.utilint.BitMap.getNumSegments()I: root-Branch
   * 4 Weak Mutation 71: com.sleepycat.je.utilint.BitMap.getNumSegments()I:66 - DeleteField: bitSegmentsLjava/util/Map;
   * 5 Weak Mutation 72: com.sleepycat.je.utilint.BitMap.getNumSegments()I:66 - DeleteStatement: size()I
   */
  @Test
  public void test6()  throws Throwable  {
      BitMap bitMap0 = new BitMap();
      int int0 = bitMap0.getNumSegments();
      assertEquals(0, int0);
  }

  //Test case number: 7
  /*
   * 38 covered goals:
   * 1 Weak Mutation 77: com.sleepycat.je.utilint.BitMap.cardinality()I:73 - DeleteStatement: next()Ljava/lang/Object;
   * 2 Weak Mutation 78: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - InsertUnaryOp Negation of count
   * 3 Weak Mutation 79: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - InsertUnaryOp IINC 1 count
   * 4 Weak Mutation 85: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - ReplaceArithmeticOperator + -> *
   * 5 Weak Mutation 84: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - ReplaceArithmeticOperator + -> /
   * 6 Weak Mutation 81: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - DeleteStatement: cardinality()I
   * 7 Weak Mutation 80: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - InsertUnaryOp IINC -1 count
   * 8 Weak Mutation 83: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - ReplaceArithmeticOperator + -> %
   * 9 Weak Mutation 82: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - ReplaceArithmeticOperator + -> -
   * 10 com.sleepycat.je.utilint.BitMap.cardinality()I: I31 Branch 7 IFNE L72 - true
   * 11 Weak Mutation 76: com.sleepycat.je.utilint.BitMap.cardinality()I:71 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 12 Weak Mutation 73: com.sleepycat.je.utilint.BitMap.cardinality()I:70 - ReplaceConstant - 0 -> 1
   * 13 Weak Mutation 74: com.sleepycat.je.utilint.BitMap.cardinality()I:71 - DeleteField: bitSegmentsLjava/util/Map;
   * 14 Weak Mutation 75: com.sleepycat.je.utilint.BitMap.cardinality()I:71 - DeleteStatement: values()Ljava/util/Collection;
   * 15 Weak Mutation 87: com.sleepycat.je.utilint.BitMap.cardinality()I:72 - ReplaceComparisonOperator != -> ==
   * 16 Weak Mutation 86: com.sleepycat.je.utilint.BitMap.cardinality()I:72 - DeleteStatement: hasNext()Z
   * 17 Weak Mutation 89: com.sleepycat.je.utilint.BitMap.cardinality()I:76 - InsertUnaryOp IINC 1 count
   * 18 Weak Mutation 88: com.sleepycat.je.utilint.BitMap.cardinality()I:76 - InsertUnaryOp Negation of count
   * 19 Weak Mutation 90: com.sleepycat.je.utilint.BitMap.cardinality()I:76 - InsertUnaryOp IINC -1 count
   * 20 Weak Mutation 76: com.sleepycat.je.utilint.BitMap.cardinality()I:71 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 21 Weak Mutation 77: com.sleepycat.je.utilint.BitMap.cardinality()I:73 - DeleteStatement: next()Ljava/lang/Object;
   * 22 Weak Mutation 78: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - InsertUnaryOp Negation of count
   * 23 Weak Mutation 79: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - InsertUnaryOp IINC 1 count
   * 24 Weak Mutation 73: com.sleepycat.je.utilint.BitMap.cardinality()I:70 - ReplaceConstant - 0 -> 1
   * 25 Weak Mutation 74: com.sleepycat.je.utilint.BitMap.cardinality()I:71 - DeleteField: bitSegmentsLjava/util/Map;
   * 26 Weak Mutation 75: com.sleepycat.je.utilint.BitMap.cardinality()I:71 - DeleteStatement: values()Ljava/util/Collection;
   * 27 Weak Mutation 85: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - ReplaceArithmeticOperator + -> *
   * 28 Weak Mutation 84: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - ReplaceArithmeticOperator + -> /
   * 29 Weak Mutation 87: com.sleepycat.je.utilint.BitMap.cardinality()I:72 - ReplaceComparisonOperator != -> ==
   * 30 Weak Mutation 86: com.sleepycat.je.utilint.BitMap.cardinality()I:72 - DeleteStatement: hasNext()Z
   * 31 Weak Mutation 81: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - DeleteStatement: cardinality()I
   * 32 Weak Mutation 80: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - InsertUnaryOp IINC -1 count
   * 33 Weak Mutation 83: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - ReplaceArithmeticOperator + -> %
   * 34 Weak Mutation 82: com.sleepycat.je.utilint.BitMap.cardinality()I:74 - ReplaceArithmeticOperator + -> -
   * 35 Weak Mutation 89: com.sleepycat.je.utilint.BitMap.cardinality()I:76 - InsertUnaryOp IINC 1 count
   * 36 Weak Mutation 88: com.sleepycat.je.utilint.BitMap.cardinality()I:76 - InsertUnaryOp Negation of count
   * 37 Weak Mutation 90: com.sleepycat.je.utilint.BitMap.cardinality()I:76 - InsertUnaryOp IINC -1 count
   * 38 com.sleepycat.je.utilint.BitMap.cardinality()I: I31 Branch 7 IFNE L72 - false
   */
  @Test
  public void test7()  throws Throwable  {
      BitMap bitMap0 = new BitMap();
      bitMap0.set(526L);
      int int0 = bitMap0.cardinality();
      assertEquals(1, bitMap0.getNumSegments());
      assertEquals(1, int0);
  }

  //Test case number: 8
  /*
   * 38 covered goals:
   * 1 com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;: I24 Branch 6 IFNONNULL L53 - true
   * 2 Weak Mutation 0: com.sleepycat.je.utilint.BitMap.set(J)V:26 - InsertUnaryOp Negation of index
   * 3 Weak Mutation 1: com.sleepycat.je.utilint.BitMap.set(J)V:26 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 2: com.sleepycat.je.utilint.BitMap.set(J)V:26 - ReplaceConstant - 0 -> -1
   * 5 Weak Mutation 3: com.sleepycat.je.utilint.BitMap.set(J)V:26 - DeleteStatement: longSub(JJ)I
   * 6 Weak Mutation 4: com.sleepycat.je.utilint.BitMap.set(J)V:26 - ReplaceComparisonOperator >= -> ==
   * 7 Weak Mutation 12: com.sleepycat.je.utilint.BitMap.set(J)V:29 - InsertUnaryOp Negation of index
   * 8 Weak Mutation 13: com.sleepycat.je.utilint.BitMap.set(J)V:29 - ReplaceConstant - 1 -> 0
   * 9 Weak Mutation 14: com.sleepycat.je.utilint.BitMap.set(J)V:30 - ReplaceComparisonOperator != null -> = null
   * 10 Weak Mutation 21: com.sleepycat.je.utilint.BitMap.set(J)V:34 - InsertUnaryOp Negation of useIndex
   * 11 Weak Mutation 20: com.sleepycat.je.utilint.BitMap.set(J)V:33 - InsertUnaryOp Negation of index
   * 12 Weak Mutation 23: com.sleepycat.je.utilint.BitMap.set(J)V:34 - InsertUnaryOp IINC -1 useIndex
   * 13 Weak Mutation 22: com.sleepycat.je.utilint.BitMap.set(J)V:34 - InsertUnaryOp IINC 1 useIndex
   * 14 Weak Mutation 24: com.sleepycat.je.utilint.BitMap.set(J)V:34 - DeleteStatement: set(I)V
   * 15 Weak Mutation 46: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - InsertUnaryOp Negation of index
   * 16 Weak Mutation 47: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceConstant - 16 -> 0
   * 17 Weak Mutation 51: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceConstant - 16 -> 17
   * 18 Weak Mutation 50: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceConstant - 16 -> 15
   * 19 Weak Mutation 49: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceConstant - 16 -> -1
   * 20 Weak Mutation 48: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceConstant - 16 -> 1
   * 21 Weak Mutation 55: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:51 - DeleteStatement: get(Ljava/lang/Object;)Ljava/lang/Object;
   * 22 Weak Mutation 54: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:51 - DeleteField: bitSegmentsLjava/util/Map;
   * 23 Weak Mutation 53: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:50 - ReplaceBitwiseOperator >> -> <<
   * 24 Weak Mutation 59: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:52 - ReplaceComparisonOperator == -> !=
   * 25 Weak Mutation 58: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:52 - InsertUnaryOp IINC -1 allowCreate
   * 26 Weak Mutation 57: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:52 - InsertUnaryOp IINC 1 allowCreate
   * 27 Weak Mutation 56: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:52 - InsertUnaryOp Negation of allowCreate
   * 28 Weak Mutation 63: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - InsertUnaryOp Negation of index
   * 29 Weak Mutation 62: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:55 - DeleteStatement: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   * 30 Weak Mutation 61: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:55 - DeleteField: bitSegmentsLjava/util/Map;
   * 31 Weak Mutation 60: com.sleepycat.je.utilint.BitMap.getBitSet(JZ)Ljava/util/BitSet;:53 - ReplaceComparisonOperator != null -> = null
   * 32 Weak Mutation 68: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceConstant - 65535 -> 65536
   * 33 Weak Mutation 69: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceBitwiseOperator & -> |
   * 34 Weak Mutation 70: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceBitwiseOperator & -> ^
   * 35 Weak Mutation 64: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceConstant - 65535 -> 0
   * 36 Weak Mutation 65: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceConstant - 65535 -> 1
   * 37 Weak Mutation 66: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceConstant - 65535 -> -1
   * 38 Weak Mutation 67: com.sleepycat.je.utilint.BitMap.getIntIndex(J)I:62 - ReplaceConstant - 65535 -> 65534
   */
  @Test
  public void test8()  throws Throwable  {
      BitMap bitMap0 = new BitMap();
      bitMap0.set(526L);
      bitMap0.set(526L);
      assertEquals(1, bitMap0.cardinality());
      assertEquals(1, bitMap0.getNumSegments());
  }
}
