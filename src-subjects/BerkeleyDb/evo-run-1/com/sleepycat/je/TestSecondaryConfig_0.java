/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.Environment;
import com.sleepycat.je.SecondaryConfig;

@RunWith(EvoSuiteRunner.class)
public class TestSecondaryConfig_0 {


  //Test case number: 0
  /*
   * 64 covered goals:
   * 1 Weak Mutation 8: com.sleepycat.je.SecondaryConfig.getForeignKeyDatabase()Lcom/sleepycat/je/Database;:76 - DeleteField: foreignKeyDatabaseLcom/sleepycat/je/Database;
   * 2 Weak Mutation 11: com.sleepycat.je.SecondaryConfig.getForeignKeyDeleteAction()Lcom/sleepycat/je/ForeignKeyDeleteAction;:91 - DeleteField: foreignKeyDeleteActionLcom/sleepycat/je/ForeignKeyDeleteAction;
   * 3 Weak Mutation 17: com.sleepycat.je.SecondaryConfig.getImmutableSecondaryKey()Z:133 - InsertUnaryOp Negation
   * 4 Weak Mutation 19: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:137 - ReplaceComparisonOperator = null -> != null
   * 5 Weak Mutation 20: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:137 - ReplaceComparisonOperator != -> ==
   * 6 Weak Mutation 22: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:141 - DeleteStatement: getKeyCreator()Lcom/sleepycat/je/SecondaryKeyCreator;
   * 7 Weak Mutation 24: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:142 - DeleteStatement: getMultiKeyCreator()Lcom/sleepycat/je/SecondaryMultiKeyCreator;
   * 8 Weak Mutation 27: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:143 - DeleteField: foreignKeyDatabaseLcom/sleepycat/je/Database;
   * 9 Weak Mutation 26: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:143 - DeleteStatement: getForeignKeyDatabase()Lcom/sleepycat/je/Database;
   * 10 Weak Mutation 29: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:143 - ReplaceConstant - 1 -> 0
   * 11 Weak Mutation 28: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:143 - ReplaceComparisonOperator != -> ==
   * 12 Weak Mutation 31: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:144 - DeleteStatement: getForeignKeyDeleteAction()Lcom/sleepycat/je/ForeignKeyDeleteAction;
   * 13 Weak Mutation 34: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:144 - ReplaceConstant - 1 -> 0
   * 14 Weak Mutation 32: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:144 - DeleteField: foreignKeyDeleteActionLcom/sleepycat/je/ForeignKeyDeleteAction;
   * 15 Weak Mutation 33: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:144 - ReplaceComparisonOperator != -> ==
   * 16 Weak Mutation 36: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:145 - DeleteStatement: getForeignKeyNullifier()Lcom/sleepycat/je/ForeignKeyNullifier;
   * 17 Weak Mutation 38: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:146 - DeleteStatement: getForeignMultiKeyNullifier()Lcom/sleepycat/je/ForeignMultiKeyNullifier;
   * 18 Weak Mutation 42: com.sleepycat.je.SecondaryConfig.equalOrBothNull(Ljava/lang/Object;Ljava/lang/Object;)Z:155 - ReplaceComparisonOperator != null -> = null
   * 19 Weak Mutation 43: com.sleepycat.je.SecondaryConfig.equalOrBothNull(Ljava/lang/Object;Ljava/lang/Object;)Z:155 - ReplaceConstant - 1 -> 0
   * 20 Weak Mutation 40: com.sleepycat.je.SecondaryConfig.equalOrBothNull(Ljava/lang/Object;Ljava/lang/Object;)Z:155 - ReplaceComparisonOperator = null -> != null
   * 21 com.sleepycat.je.SecondaryConfig.getKeyCreator()Lcom/sleepycat/je/SecondaryKeyCreator;: root-Branch
   * 22 com.sleepycat.je.SecondaryConfig.getForeignMultiKeyNullifier()Lcom/sleepycat/je/ForeignMultiKeyNullifier;: root-Branch
   * 23 com.sleepycat.je.SecondaryConfig.setForeignKeyDatabase(Lcom/sleepycat/je/Database;)V: root-Branch
   * 24 com.sleepycat.je.SecondaryConfig.getForeignKeyNullifier()Lcom/sleepycat/je/ForeignKeyNullifier;: root-Branch
   * 25 com.sleepycat.je.SecondaryConfig.getForeignKeyDeleteAction()Lcom/sleepycat/je/ForeignKeyDeleteAction;: root-Branch
   * 26 com.sleepycat.je.SecondaryConfig.getForeignKeyDatabase()Lcom/sleepycat/je/Database;: root-Branch
   * 27 com.sleepycat.je.SecondaryConfig.getImmutableSecondaryKey()Z: root-Branch
   * 28 com.sleepycat.je.SecondaryConfig.getMultiKeyCreator()Lcom/sleepycat/je/SecondaryMultiKeyCreator;: root-Branch
   * 29 com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V: I8 Branch 1 IFNULL L137 - false
   * 30 com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V: I11 Branch 2 IFNE L137 - true
   * 31 com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V: I48 Branch 3 IF_ACMPNE L143 - false
   * 32 com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V: I61 Branch 4 IF_ACMPNE L144 - false
   * 33 com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V: I92 Branch 5 IF_ICMPNE L147 - false
   * 34 com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V: I102 Branch 6 IFEQ L148 - false
   * 35 com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V: I104 Branch 7 IFEQ L148 - false
   * 36 com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V: I106 Branch 8 IFEQ L148 - false
   * 37 com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V: I108 Branch 9 IFEQ L148 - false
   * 38 com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V: I110 Branch 10 IFEQ L148 - false
   * 39 com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V: I112 Branch 11 IFEQ L148 - false
   * 40 com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V: I114 Branch 12 IFEQ L148 - false
   * 41 com.sleepycat.je.SecondaryConfig.equalOrBothNull(Ljava/lang/Object;Ljava/lang/Object;)Z: I3 Branch 13 IFNULL L155 - true
   * 42 com.sleepycat.je.SecondaryConfig.equalOrBothNull(Ljava/lang/Object;Ljava/lang/Object;)Z: I10 Branch 14 IFNONNULL L155 - false
   * 43 Weak Mutation 0: com.sleepycat.je.SecondaryConfig.<init>()V:12 - DeleteField: ABORTLcom/sleepycat/je/ForeignKeyDeleteAction;
   * 44 Weak Mutation 8: com.sleepycat.je.SecondaryConfig.getForeignKeyDatabase()Lcom/sleepycat/je/Database;:76 - DeleteField: foreignKeyDatabaseLcom/sleepycat/je/Database;
   * 45 Weak Mutation 11: com.sleepycat.je.SecondaryConfig.getForeignKeyDeleteAction()Lcom/sleepycat/je/ForeignKeyDeleteAction;:91 - DeleteField: foreignKeyDeleteActionLcom/sleepycat/je/ForeignKeyDeleteAction;
   * 46 Weak Mutation 17: com.sleepycat.je.SecondaryConfig.getImmutableSecondaryKey()Z:133 - InsertUnaryOp Negation
   * 47 Weak Mutation 19: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:137 - ReplaceComparisonOperator = null -> != null
   * 48 Weak Mutation 20: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:137 - ReplaceComparisonOperator != -> ==
   * 49 Weak Mutation 22: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:141 - DeleteStatement: getKeyCreator()Lcom/sleepycat/je/SecondaryKeyCreator;
   * 50 Weak Mutation 24: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:142 - DeleteStatement: getMultiKeyCreator()Lcom/sleepycat/je/SecondaryMultiKeyCreator;
   * 51 Weak Mutation 27: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:143 - DeleteField: foreignKeyDatabaseLcom/sleepycat/je/Database;
   * 52 Weak Mutation 26: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:143 - DeleteStatement: getForeignKeyDatabase()Lcom/sleepycat/je/Database;
   * 53 Weak Mutation 29: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:143 - ReplaceConstant - 1 -> 0
   * 54 Weak Mutation 28: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:143 - ReplaceComparisonOperator != -> ==
   * 55 Weak Mutation 31: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:144 - DeleteStatement: getForeignKeyDeleteAction()Lcom/sleepycat/je/ForeignKeyDeleteAction;
   * 56 Weak Mutation 34: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:144 - ReplaceConstant - 1 -> 0
   * 57 Weak Mutation 32: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:144 - DeleteField: foreignKeyDeleteActionLcom/sleepycat/je/ForeignKeyDeleteAction;
   * 58 Weak Mutation 33: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:144 - ReplaceComparisonOperator != -> ==
   * 59 Weak Mutation 38: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:146 - DeleteStatement: getForeignMultiKeyNullifier()Lcom/sleepycat/je/ForeignMultiKeyNullifier;
   * 60 Weak Mutation 36: com.sleepycat.je.SecondaryConfig.validate(Lcom/sleepycat/je/DatabaseConfig;)V:145 - DeleteStatement: getForeignKeyNullifier()Lcom/sleepycat/je/ForeignKeyNullifier;
   * 61 Weak Mutation 42: com.sleepycat.je.SecondaryConfig.equalOrBothNull(Ljava/lang/Object;Ljava/lang/Object;)Z:155 - ReplaceComparisonOperator != null -> = null
   * 62 Weak Mutation 43: com.sleepycat.je.SecondaryConfig.equalOrBothNull(Ljava/lang/Object;Ljava/lang/Object;)Z:155 - ReplaceConstant - 1 -> 0
   * 63 Weak Mutation 40: com.sleepycat.je.SecondaryConfig.equalOrBothNull(Ljava/lang/Object;Ljava/lang/Object;)Z:155 - ReplaceComparisonOperator = null -> != null
   * 64 com.sleepycat.je.SecondaryConfig.<init>()V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      Database database0 = new Database((Environment) null);
      secondaryConfig0.setForeignKeyDatabase(database0);
      secondaryConfig0.validate((DatabaseConfig) secondaryConfig0);
      assertEquals(false, secondaryConfig0.getImmutableSecondaryKey());
  }
}
