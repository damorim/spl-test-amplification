/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.tree.ChildReference;
import com.sleepycat.je.tree.DupCountLN;
import com.sleepycat.je.tree.Node;

@RunWith(EvoSuiteRunner.class)
public class TestChildReference_1 {


  //Test case number: 1
  /*
   * 24 covered goals:
   * 1 Weak Mutation 129: com.sleepycat.je.tree.ChildReference.getMigrate()Z:175 - ReplaceComparisonOperator == -> >=
   * 2 Weak Mutation 132: com.sleepycat.je.tree.ChildReference.getMigrate()Z:175 - ReplaceConstant - 1 -> 0
   * 3 com.sleepycat.je.tree.ChildReference.getMigrate()Z: I6 Branch 9 IFEQ L175 - false
   * 4 Weak Mutation 10: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:42 - InsertUnaryOp Negation
   * 5 Weak Mutation 11: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:42 - InsertUnaryOp Negation
   * 6 Weak Mutation 12: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:42 - InsertUnaryOp IINC 1
   * 7 Weak Mutation 13: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:42 - InsertUnaryOp IINC -1
   * 8 Weak Mutation 14: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:42 - ReplaceConstant - 2 -> 0
   * 9 Weak Mutation 15: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:42 - ReplaceConstant - 2 -> 1
   * 10 Weak Mutation 17: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:42 - ReplaceConstant - 2 -> 3
   * 11 Weak Mutation 16: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:42 - ReplaceConstant - 2 -> -1
   * 12 Weak Mutation 18: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:42 - ReplaceBitwiseOperator | -> &
   * 13 Weak Mutation 127: com.sleepycat.je.tree.ChildReference.getMigrate()Z:175 - ReplaceBitwiseOperator & -> |
   * 14 Weak Mutation 126: com.sleepycat.je.tree.ChildReference.getMigrate()Z:175 - ReplaceConstant - 4 -> 5
   * 15 Weak Mutation 125: com.sleepycat.je.tree.ChildReference.getMigrate()Z:175 - ReplaceConstant - 4 -> 3
   * 16 Weak Mutation 124: com.sleepycat.je.tree.ChildReference.getMigrate()Z:175 - ReplaceConstant - 4 -> -1
   * 17 Weak Mutation 123: com.sleepycat.je.tree.ChildReference.getMigrate()Z:175 - ReplaceConstant - 4 -> 1
   * 18 Weak Mutation 122: com.sleepycat.je.tree.ChildReference.getMigrate()Z:175 - ReplaceConstant - 4 -> 0
   * 19 Weak Mutation 121: com.sleepycat.je.tree.ChildReference.getMigrate()Z:175 - DeleteField: stateB
   * 20 Weak Mutation 120: com.sleepycat.je.tree.ChildReference.getMigrate()Z:175 - InsertUnaryOp Negation
   * 21 Weak Mutation 129: com.sleepycat.je.tree.ChildReference.getMigrate()Z:175 - ReplaceComparisonOperator == -> >=
   * 22 Weak Mutation 128: com.sleepycat.je.tree.ChildReference.getMigrate()Z:175 - ReplaceBitwiseOperator & -> ^
   * 23 Weak Mutation 132: com.sleepycat.je.tree.ChildReference.getMigrate()Z:175 - ReplaceConstant - 1 -> 0
   * 24 com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      byte[] byteArray0 = new byte[5];
      ChildReference childReference0 = new ChildReference((Node) dupCountLN0, byteArray0, (long) (byte)77, (byte)77);
      boolean boolean0 = childReference0.getMigrate();
      assertEquals(4294969416L, dupCountLN0.getNextNodeId());
      assertEquals(true, boolean0);
  }
}
