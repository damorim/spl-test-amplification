/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.cleaner.UtilizationTracker;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.tree.BIN;
import com.sleepycat.je.tree.BINBoundary;
import com.sleepycat.je.tree.ChildReference;
import com.sleepycat.je.tree.CursorsExistException;
import com.sleepycat.je.tree.DBIN;
import com.sleepycat.je.tree.DIN;
import com.sleepycat.je.tree.DupCountLN;
import com.sleepycat.je.tree.IN;
import com.sleepycat.je.tree.LN;
import com.sleepycat.je.tree.MapLN;
import com.sleepycat.je.tree.Node;
import com.sleepycat.je.tree.NodeNotEmptyException;
import com.sleepycat.je.tree.Tree;
import com.sleepycat.je.tree.TreeLocation;
import com.sleepycat.je.tree.TreeStats;
import com.sleepycat.je.tree.TreeWalkerStatsAccumulator;
import com.sleepycat.je.tree.WithRootLatched;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;

@RunWith(EvoSuiteRunner.class)
public class TestTree {


  //Test case number: 0
  /*
   * 18 covered goals:
   * 1 Weak Mutation 6: com.sleepycat.je.tree.Tree.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;)V:101 - DeleteStatement: setDatabase(Lcom/sleepycat/je/dbi/DatabaseImpl;)V
   * 2 Weak Mutation 7: com.sleepycat.je.tree.Tree.<init>()V:109 - ReplaceConstant - 0 -> 1
   * 3 Weak Mutation 8: com.sleepycat.je.tree.Tree.<init>()V:110 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 9: com.sleepycat.je.tree.Tree.setDatabase(Lcom/sleepycat/je/dbi/DatabaseImpl;)V:132 - DeleteStatement: getNodeMaxEntries()I
   * 5 Weak Mutation 10: com.sleepycat.je.tree.Tree.setDatabase(Lcom/sleepycat/je/dbi/DatabaseImpl;)V:133 - DeleteStatement: getNodeMaxDupTreeEntries()I
   * 6 Weak Mutation 11: com.sleepycat.je.tree.Tree.setDatabase(Lcom/sleepycat/je/dbi/DatabaseImpl;)V:134 - DeleteStatement: getDbEnvironment()Lcom/sleepycat/je/dbi/EnvironmentImpl;
   * 7 Weak Mutation 12: com.sleepycat.je.tree.Tree.setDatabase(Lcom/sleepycat/je/dbi/DatabaseImpl;)V:135 - DeleteStatement: getConfigManager()Lcom/sleepycat/je/dbi/DbConfigManager;
   * 8 com.sleepycat.je.tree.Tree.<init>()V: root-Branch
   * 9 com.sleepycat.je.tree.Tree.init(Lcom/sleepycat/je/dbi/DatabaseImpl;)V: root-Branch
   * 10 com.sleepycat.je.tree.Tree.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;)V: root-Branch
   * 11 com.sleepycat.je.tree.Tree.setDatabase(Lcom/sleepycat/je/dbi/DatabaseImpl;)V: root-Branch
   * 12 Weak Mutation 6: com.sleepycat.je.tree.Tree.<init>(Lcom/sleepycat/je/dbi/DatabaseImpl;)V:101 - DeleteStatement: setDatabase(Lcom/sleepycat/je/dbi/DatabaseImpl;)V
   * 13 Weak Mutation 7: com.sleepycat.je.tree.Tree.<init>()V:109 - ReplaceConstant - 0 -> 1
   * 14 Weak Mutation 8: com.sleepycat.je.tree.Tree.<init>()V:110 - ReplaceConstant - 0 -> 1
   * 15 Weak Mutation 9: com.sleepycat.je.tree.Tree.setDatabase(Lcom/sleepycat/je/dbi/DatabaseImpl;)V:132 - DeleteStatement: getNodeMaxEntries()I
   * 16 Weak Mutation 10: com.sleepycat.je.tree.Tree.setDatabase(Lcom/sleepycat/je/dbi/DatabaseImpl;)V:133 - DeleteStatement: getNodeMaxDupTreeEntries()I
   * 17 Weak Mutation 11: com.sleepycat.je.tree.Tree.setDatabase(Lcom/sleepycat/je/dbi/DatabaseImpl;)V:134 - DeleteStatement: getDbEnvironment()Lcom/sleepycat/je/dbi/EnvironmentImpl;
   * 18 Weak Mutation 12: com.sleepycat.je.tree.Tree.setDatabase(Lcom/sleepycat/je/dbi/DatabaseImpl;)V:135 - DeleteStatement: getConfigManager()Lcom/sleepycat/je/dbi/DbConfigManager;
   */
  @Test
  public void test0()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = null;
      try {
        tree0 = new Tree(databaseImpl0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 1
  /*
   * 10 covered goals:
   * 1 Weak Mutation 17: com.sleepycat.je.tree.Tree.getRootLsn()J:222 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 2 Weak Mutation 18: com.sleepycat.je.tree.Tree.getRootLsn()J:222 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 23: com.sleepycat.je.tree.Tree.getRootLsn()J:225 - DeleteStatement: getLsn()J
   * 4 Weak Mutation 22: com.sleepycat.je.tree.Tree.getRootLsn()J:225 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 5 com.sleepycat.je.tree.Tree.setRoot(Lcom/sleepycat/je/tree/ChildReference;Z)V: root-Branch
   * 6 com.sleepycat.je.tree.Tree.getRootLsn()J: I4 Branch 2 IFNONNULL L222 - true
   * 7 Weak Mutation 17: com.sleepycat.je.tree.Tree.getRootLsn()J:222 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 8 Weak Mutation 18: com.sleepycat.je.tree.Tree.getRootLsn()J:222 - ReplaceComparisonOperator != null -> = null
   * 9 Weak Mutation 23: com.sleepycat.je.tree.Tree.getRootLsn()J:225 - DeleteStatement: getLsn()J
   * 10 Weak Mutation 22: com.sleepycat.je.tree.Tree.getRootLsn()J:225 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   */
  @Test
  public void test1()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[7];
      ChildReference childReference0 = new ChildReference((Node) dIN0, byteArray0, (long) (byte)104, (byte)0);
      tree0.setRoot(childReference0, false);
      long long0 = tree0.getRootLsn();
      assertEquals(104L, tree0.getRootLsn());
      assertEquals(104L, long0);
  }

  //Test case number: 2
  /*
   * 8 covered goals:
   * 1 Weak Mutation 19: com.sleepycat.je.tree.Tree.getRootLsn()J:223 - ReplaceConstant - -1 -> 0
   * 2 Weak Mutation 21: com.sleepycat.je.tree.Tree.getRootLsn()J:223 - ReplaceConstant - -1 -> -2
   * 3 Weak Mutation 20: com.sleepycat.je.tree.Tree.getRootLsn()J:223 - ReplaceConstant - -1 -> 1
   * 4 com.sleepycat.je.tree.Tree.getRootLsn()J: I4 Branch 2 IFNONNULL L222 - false
   * 5 Weak Mutation 18: com.sleepycat.je.tree.Tree.getRootLsn()J:222 - ReplaceComparisonOperator != null -> = null
   * 6 Weak Mutation 19: com.sleepycat.je.tree.Tree.getRootLsn()J:223 - ReplaceConstant - -1 -> 0
   * 7 Weak Mutation 21: com.sleepycat.je.tree.Tree.getRootLsn()J:223 - ReplaceConstant - -1 -> -2
   * 8 Weak Mutation 20: com.sleepycat.je.tree.Tree.getRootLsn()J:223 - ReplaceConstant - -1 -> 1
   */
  @Test
  public void test2()  throws Throwable  {
      Tree tree0 = new Tree();
      long long0 = tree0.getRootLsn();
      assertEquals((-1L), long0);
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 Weak Mutation 24: com.sleepycat.je.tree.Tree.getTreeStats()Lcom/sleepycat/je/tree/TreeStats;:233 - DeleteField: treeStatsLcom/sleepycat/je/tree/TreeStats;
   * 2 com.sleepycat.je.tree.Tree.getTreeStats()Lcom/sleepycat/je/tree/TreeStats;: root-Branch
   * 3 Weak Mutation 24: com.sleepycat.je.tree.Tree.getTreeStats()Lcom/sleepycat/je/tree/TreeStats;:233 - DeleteField: treeStatsLcom/sleepycat/je/tree/TreeStats;
   */
  @Test
  public void test3()  throws Throwable  {
      Tree tree0 = new Tree();
      TreeStats treeStats0 = tree0.getTreeStats();
      assertEquals(0, treeStats0.nRootSplits);
  }

  //Test case number: 4
  /*
   * 46 covered goals:
   * 1 Weak Mutation 25: com.sleepycat.je.tree.Tree.getTreeStatsAccumulator()Lcom/sleepycat/je/tree/TreeWalkerStatsAccumulator;:237 - DeleteStatement: getThreadLocalReferenceCount()I
   * 2 Weak Mutation 27: com.sleepycat.je.tree.Tree.getTreeStatsAccumulator()Lcom/sleepycat/je/tree/TreeWalkerStatsAccumulator;:237 - ReplaceComparisonOperator <= -> <
   * 3 Weak Mutation 408: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1284 - ReplaceComparisonOperator != null -> = null
   * 4 Weak Mutation 410: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1287 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 411: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1287 - DeleteField: RIGHTLcom/sleepycat/je/tree/Tree$SearchType;
   * 6 Weak Mutation 409: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1287 - DeleteField: LEFTLcom/sleepycat/je/tree/Tree$SearchType;
   * 7 Weak Mutation 412: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1287 - ReplaceComparisonOperator != -> ==
   * 8 Weak Mutation 415: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - DeleteStatement: getNodeId()J
   * 9 Weak Mutation 417: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - DeleteStatement: longSub(JJ)I
   * 10 Weak Mutation 416: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - InsertUnaryOp Negation of nid
   * 11 Weak Mutation 419: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - ReplaceComparisonOperator != -> >
   * 12 Weak Mutation 421: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1301 - ReplaceComparisonOperator = null -> != null
   * 13 Weak Mutation 422: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1302 - ReplaceConstant - 1 -> 0
   * 14 Weak Mutation 423: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1303 - ReplaceConstant - 1 -> 0
   * 15 Weak Mutation 424: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1310 - ReplaceComparisonOperator = null -> != null
   * 16 Weak Mutation 427: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1313 - ReplaceVariable parent -> child
   * 17 Weak Mutation 428: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1313 - DeleteStatement: getNEntries()I
   * 18 Weak Mutation 431: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1313 - ReplaceComparisonOperator != -> -1
   * 19 Weak Mutation 432: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1314 - ReplaceVariable parent -> child
   * 20 com.sleepycat.je.tree.Tree.getTreeStatsAccumulator()Lcom/sleepycat/je/tree/TreeWalkerStatsAccumulator;: I3 Branch 3 IFLE L237 - true
   * 21 com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;: I3 Branch 54 IFNONNULL L1284 - true
   * 22 com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;: I12 Branch 55 IF_ACMPEQ L1287 - false
   * 23 com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;: I15 Branch 56 IF_ACMPNE L1287 - true
   * 24 com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;: I37 Branch 58 IFNE L1295 - true
   * 25 com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;: I45 Branch 59 IFNULL L1301 - false
   * 26 com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;: I68 Branch 60 IFNULL L1310 - true
   * 27 com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;: I78 Branch 61 IFNE L1313 - false
   * 28 Weak Mutation 25: com.sleepycat.je.tree.Tree.getTreeStatsAccumulator()Lcom/sleepycat/je/tree/TreeWalkerStatsAccumulator;:237 - DeleteStatement: getThreadLocalReferenceCount()I
   * 29 Weak Mutation 27: com.sleepycat.je.tree.Tree.getTreeStatsAccumulator()Lcom/sleepycat/je/tree/TreeWalkerStatsAccumulator;:237 - ReplaceComparisonOperator <= -> <
   * 30 Weak Mutation 410: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1287 - ReplaceComparisonOperator == -> !=
   * 31 Weak Mutation 411: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1287 - DeleteField: RIGHTLcom/sleepycat/je/tree/Tree$SearchType;
   * 32 Weak Mutation 408: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1284 - ReplaceComparisonOperator != null -> = null
   * 33 Weak Mutation 409: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1287 - DeleteField: LEFTLcom/sleepycat/je/tree/Tree$SearchType;
   * 34 Weak Mutation 415: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - DeleteStatement: getNodeId()J
   * 35 Weak Mutation 412: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1287 - ReplaceComparisonOperator != -> ==
   * 36 Weak Mutation 432: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1314 - ReplaceVariable parent -> child
   * 37 Weak Mutation 424: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1310 - ReplaceComparisonOperator = null -> != null
   * 38 Weak Mutation 427: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1313 - ReplaceVariable parent -> child
   * 39 Weak Mutation 428: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1313 - DeleteStatement: getNEntries()I
   * 40 Weak Mutation 431: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1313 - ReplaceComparisonOperator != -> -1
   * 41 Weak Mutation 417: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - DeleteStatement: longSub(JJ)I
   * 42 Weak Mutation 416: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - InsertUnaryOp Negation of nid
   * 43 Weak Mutation 419: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - ReplaceComparisonOperator != -> >
   * 44 Weak Mutation 421: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1301 - ReplaceComparisonOperator = null -> != null
   * 45 Weak Mutation 423: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1303 - ReplaceConstant - 1 -> 0
   * 46 Weak Mutation 422: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1302 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test4()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[5];
      Tree.SearchType tree_SearchType0 = Tree.SearchType.NORMAL;
      BINBoundary bINBoundary0 = new BINBoundary();
      DIN dIN1 = (DIN)tree0.searchSubTree((IN) dIN0, byteArray0, tree_SearchType0, (long) (byte)46, bINBoundary0, false);
      assertEquals(true, bINBoundary0.isLastBin);
      assertEquals(3903L, dIN1.getLastId());
  }

  //Test case number: 5
  /*
   * 5 covered goals:
   * 1 Weak Mutation 31: com.sleepycat.je.tree.Tree.setTreeStatsAccumulator(Lcom/sleepycat/je/tree/TreeWalkerStatsAccumulator;)V:245 - DeleteField: treeStatsAccumulatorTLLjava/lang/ThreadLocal;
   * 2 Weak Mutation 32: com.sleepycat.je.tree.Tree.setTreeStatsAccumulator(Lcom/sleepycat/je/tree/TreeWalkerStatsAccumulator;)V:245 - DeleteStatement: set(Ljava/lang/Object;)V
   * 3 com.sleepycat.je.tree.Tree.setTreeStatsAccumulator(Lcom/sleepycat/je/tree/TreeWalkerStatsAccumulator;)V: root-Branch
   * 4 Weak Mutation 31: com.sleepycat.je.tree.Tree.setTreeStatsAccumulator(Lcom/sleepycat/je/tree/TreeWalkerStatsAccumulator;)V:245 - DeleteField: treeStatsAccumulatorTLLjava/lang/ThreadLocal;
   * 5 Weak Mutation 32: com.sleepycat.je.tree.Tree.setTreeStatsAccumulator(Lcom/sleepycat/je/tree/TreeWalkerStatsAccumulator;)V:245 - DeleteStatement: set(Ljava/lang/Object;)V
   */
  @Test
  public void test5()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.setTreeStatsAccumulator((TreeWalkerStatsAccumulator) null);
      assertEquals((-1L), tree0.getRootLsn());
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * 1 Weak Mutation 34: com.sleepycat.je.tree.Tree.withRootLatchedShared(Lcom/sleepycat/je/tree/WithRootLatched;)Lcom/sleepycat/je/tree/IN;:272 - ReplaceConstant - TYPE ERROR? -> 
   * 2 com.sleepycat.je.tree.Tree.withRootLatchedShared(Lcom/sleepycat/je/tree/WithRootLatched;)Lcom/sleepycat/je/tree/IN;: root-Branch
   * 3 Weak Mutation 34: com.sleepycat.je.tree.Tree.withRootLatchedShared(Lcom/sleepycat/je/tree/WithRootLatched;)Lcom/sleepycat/je/tree/IN;:272 - ReplaceConstant - TYPE ERROR? -> 
   */
  @Test
  public void test6()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try {
        tree0.withRootLatchedShared((WithRootLatched) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * TYPE ERROR?
         */
      }
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 Weak Mutation 35: com.sleepycat.je.tree.Tree.delete([BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:293 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 37: com.sleepycat.je.tree.Tree.delete([BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:333 - ReplaceComparisonOperator = null -> != null
   * 3 com.sleepycat.je.tree.Tree.delete([BLcom/sleepycat/je/cleaner/UtilizationTracker;)V: I21 Branch 4 IFNULL L333 - true
   * 4 Weak Mutation 35: com.sleepycat.je.tree.Tree.delete([BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:293 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 37: com.sleepycat.je.tree.Tree.delete([BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:333 - ReplaceComparisonOperator = null -> != null
   */
  @Test
  public void test7()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[7];
      tree0.delete(byteArray0, (UtilizationTracker) null);
      assertEquals(3977L, databaseImpl0.getEofNodeId());
  }

  //Test case number: 8
  /*
   * 19 covered goals:
   * 1 Weak Mutation 110: com.sleepycat.je.tree.Tree.deleteDup([B[BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:445 - ReplaceConstant - -1 -> -2
   * 2 Weak Mutation 111: com.sleepycat.je.tree.Tree.deleteDup([B[BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:445 - ReplaceConstant - 0 -> 1
   * 3 Weak Mutation 108: com.sleepycat.je.tree.Tree.deleteDup([B[BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:445 - ReplaceConstant - -1 -> 0
   * 4 Weak Mutation 109: com.sleepycat.je.tree.Tree.deleteDup([B[BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:445 - ReplaceConstant - -1 -> 1
   * 5 Weak Mutation 107: com.sleepycat.je.tree.Tree.deleteDup([B[BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:445 - DeleteField: NORMALLcom/sleepycat/je/tree/Tree$SearchType;
   * 6 Weak Mutation 112: com.sleepycat.je.tree.Tree.deleteDup([B[BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:445 - DeleteStatement: search([BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;
   * 7 Weak Mutation 393: com.sleepycat.je.tree.Tree.search([BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1163 - DeleteStatement: getRootIN(Z)Lcom/sleepycat/je/tree/IN;
   * 8 Weak Mutation 392: com.sleepycat.je.tree.Tree.search([BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1163 - ReplaceConstant - 1 -> 0
   * 9 Weak Mutation 558: com.sleepycat.je.tree.Tree.getRootIN(Z)Lcom/sleepycat/je/tree/IN;:1690 - ReplaceConstant - TYPE ERROR? -> 
   * 10 com.sleepycat.je.tree.Tree.getRootIN(Z)Lcom/sleepycat/je/tree/IN;: root-Branch
   * 11 Weak Mutation 110: com.sleepycat.je.tree.Tree.deleteDup([B[BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:445 - ReplaceConstant - -1 -> -2
   * 12 Weak Mutation 111: com.sleepycat.je.tree.Tree.deleteDup([B[BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:445 - ReplaceConstant - 0 -> 1
   * 13 Weak Mutation 108: com.sleepycat.je.tree.Tree.deleteDup([B[BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:445 - ReplaceConstant - -1 -> 0
   * 14 Weak Mutation 109: com.sleepycat.je.tree.Tree.deleteDup([B[BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:445 - ReplaceConstant - -1 -> 1
   * 15 Weak Mutation 107: com.sleepycat.je.tree.Tree.deleteDup([B[BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:445 - DeleteField: NORMALLcom/sleepycat/je/tree/Tree$SearchType;
   * 16 Weak Mutation 112: com.sleepycat.je.tree.Tree.deleteDup([B[BLcom/sleepycat/je/cleaner/UtilizationTracker;)V:445 - DeleteStatement: search([BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;
   * 17 Weak Mutation 393: com.sleepycat.je.tree.Tree.search([BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1163 - DeleteStatement: getRootIN(Z)Lcom/sleepycat/je/tree/IN;
   * 18 Weak Mutation 392: com.sleepycat.je.tree.Tree.search([BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1163 - ReplaceConstant - 1 -> 0
   * 19 Weak Mutation 558: com.sleepycat.je.tree.Tree.getRootIN(Z)Lcom/sleepycat/je/tree/IN;:1690 - ReplaceConstant - TYPE ERROR? -> 
   */
  @Test
  public void test8()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try {
        tree0.deleteDup(byteArray0, byteArray0, (UtilizationTracker) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * TYPE ERROR?
         */
      }
  }

  //Test case number: 9
  /*
   * 13 covered goals:
   * 1 Weak Mutation 141: com.sleepycat.je.tree.Tree.getFirstNode()Lcom/sleepycat/je/tree/IN;:554 - ReplaceConstant - -1 -> 0
   * 2 Weak Mutation 140: com.sleepycat.je.tree.Tree.getFirstNode()Lcom/sleepycat/je/tree/IN;:554 - DeleteField: LEFTLcom/sleepycat/je/tree/Tree$SearchType;
   * 3 Weak Mutation 143: com.sleepycat.je.tree.Tree.getFirstNode()Lcom/sleepycat/je/tree/IN;:554 - ReplaceConstant - -1 -> -2
   * 4 Weak Mutation 142: com.sleepycat.je.tree.Tree.getFirstNode()Lcom/sleepycat/je/tree/IN;:554 - ReplaceConstant - -1 -> 1
   * 5 Weak Mutation 144: com.sleepycat.je.tree.Tree.getFirstNode()Lcom/sleepycat/je/tree/IN;:554 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 145: com.sleepycat.je.tree.Tree.getFirstNode()Lcom/sleepycat/je/tree/IN;:554 - DeleteStatement: search([BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;
   * 7 com.sleepycat.je.tree.Tree.getFirstNode()Lcom/sleepycat/je/tree/IN;: root-Branch
   * 8 Weak Mutation 141: com.sleepycat.je.tree.Tree.getFirstNode()Lcom/sleepycat/je/tree/IN;:554 - ReplaceConstant - -1 -> 0
   * 9 Weak Mutation 140: com.sleepycat.je.tree.Tree.getFirstNode()Lcom/sleepycat/je/tree/IN;:554 - DeleteField: LEFTLcom/sleepycat/je/tree/Tree$SearchType;
   * 10 Weak Mutation 143: com.sleepycat.je.tree.Tree.getFirstNode()Lcom/sleepycat/je/tree/IN;:554 - ReplaceConstant - -1 -> -2
   * 11 Weak Mutation 142: com.sleepycat.je.tree.Tree.getFirstNode()Lcom/sleepycat/je/tree/IN;:554 - ReplaceConstant - -1 -> 1
   * 12 Weak Mutation 144: com.sleepycat.je.tree.Tree.getFirstNode()Lcom/sleepycat/je/tree/IN;:554 - ReplaceConstant - 1 -> 0
   * 13 Weak Mutation 145: com.sleepycat.je.tree.Tree.getFirstNode()Lcom/sleepycat/je/tree/IN;:554 - DeleteStatement: search([BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;
   */
  @Test
  public void test9()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try {
        tree0.getFirstNode();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * TYPE ERROR?
         */
      }
  }

  //Test case number: 10
  /*
   * 13 covered goals:
   * 1 Weak Mutation 146: com.sleepycat.je.tree.Tree.getLastNode()Lcom/sleepycat/je/tree/IN;:565 - DeleteField: RIGHTLcom/sleepycat/je/tree/Tree$SearchType;
   * 2 Weak Mutation 147: com.sleepycat.je.tree.Tree.getLastNode()Lcom/sleepycat/je/tree/IN;:565 - ReplaceConstant - -1 -> 0
   * 3 Weak Mutation 148: com.sleepycat.je.tree.Tree.getLastNode()Lcom/sleepycat/je/tree/IN;:565 - ReplaceConstant - -1 -> 1
   * 4 Weak Mutation 149: com.sleepycat.je.tree.Tree.getLastNode()Lcom/sleepycat/je/tree/IN;:565 - ReplaceConstant - -1 -> -2
   * 5 Weak Mutation 150: com.sleepycat.je.tree.Tree.getLastNode()Lcom/sleepycat/je/tree/IN;:565 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 151: com.sleepycat.je.tree.Tree.getLastNode()Lcom/sleepycat/je/tree/IN;:565 - DeleteStatement: search([BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;
   * 7 com.sleepycat.je.tree.Tree.getLastNode()Lcom/sleepycat/je/tree/IN;: root-Branch
   * 8 Weak Mutation 146: com.sleepycat.je.tree.Tree.getLastNode()Lcom/sleepycat/je/tree/IN;:565 - DeleteField: RIGHTLcom/sleepycat/je/tree/Tree$SearchType;
   * 9 Weak Mutation 147: com.sleepycat.je.tree.Tree.getLastNode()Lcom/sleepycat/je/tree/IN;:565 - ReplaceConstant - -1 -> 0
   * 10 Weak Mutation 148: com.sleepycat.je.tree.Tree.getLastNode()Lcom/sleepycat/je/tree/IN;:565 - ReplaceConstant - -1 -> 1
   * 11 Weak Mutation 149: com.sleepycat.je.tree.Tree.getLastNode()Lcom/sleepycat/je/tree/IN;:565 - ReplaceConstant - -1 -> -2
   * 12 Weak Mutation 150: com.sleepycat.je.tree.Tree.getLastNode()Lcom/sleepycat/je/tree/IN;:565 - ReplaceConstant - 1 -> 0
   * 13 Weak Mutation 151: com.sleepycat.je.tree.Tree.getLastNode()Lcom/sleepycat/je/tree/IN;:565 - DeleteStatement: search([BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;
   */
  @Test
  public void test10()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try {
        tree0.getLastNode();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * TYPE ERROR?
         */
      }
  }

  //Test case number: 11
  /*
   * 5 covered goals:
   * 1 Weak Mutation 152: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:575 - ReplaceComparisonOperator != null -> = null
   * 2 Weak Mutation 153: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:576 - ReplaceConstant - getFirstNode passed null root -> 
   * 3 com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;: I3 Branch 25 IFNONNULL L575 - false
   * 4 Weak Mutation 152: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:575 - ReplaceComparisonOperator != null -> = null
   * 5 Weak Mutation 153: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:576 - ReplaceConstant - getFirstNode passed null root -> 
   */
  @Test
  public void test11()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try {
        tree0.getFirstNode((DIN) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * getFirstNode passed null root
         */
      }
  }

  //Test case number: 12
  /*
   * 21 covered goals:
   * 1 Weak Mutation 154: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:581 - DeleteField: LEFTLcom/sleepycat/je/tree/Tree$SearchType;
   * 2 Weak Mutation 155: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:581 - ReplaceConstant - -1 -> 0
   * 3 Weak Mutation 156: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:581 - ReplaceConstant - -1 -> 1
   * 4 Weak Mutation 157: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:581 - ReplaceConstant - -1 -> -2
   * 5 Weak Mutation 158: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:581 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 159: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:581 - DeleteStatement: searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;
   * 7 Weak Mutation 413: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1288 - ReplaceComparisonOperator = null -> != null
   * 8 Weak Mutation 418: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - ReplaceComparisonOperator != -> <
   * 9 com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;: I3 Branch 25 IFNONNULL L575 - true
   * 10 com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;: I12 Branch 55 IF_ACMPEQ L1287 - true
   * 11 com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;: I19 Branch 57 IFNULL L1288 - true
   * 12 com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;: I45 Branch 59 IFNULL L1301 - true
   * 13 Weak Mutation 152: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:575 - ReplaceComparisonOperator != null -> = null
   * 14 Weak Mutation 154: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:581 - DeleteField: LEFTLcom/sleepycat/je/tree/Tree$SearchType;
   * 15 Weak Mutation 155: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:581 - ReplaceConstant - -1 -> 0
   * 16 Weak Mutation 156: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:581 - ReplaceConstant - -1 -> 1
   * 17 Weak Mutation 157: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:581 - ReplaceConstant - -1 -> -2
   * 18 Weak Mutation 158: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:581 - ReplaceConstant - 1 -> 0
   * 19 Weak Mutation 159: com.sleepycat.je.tree.Tree.getFirstNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:581 - DeleteStatement: searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;
   * 20 Weak Mutation 413: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1288 - ReplaceComparisonOperator = null -> != null
   * 21 Weak Mutation 418: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - ReplaceComparisonOperator != -> <
   */
  @Test
  public void test12()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try {
        tree0.getFirstNode(dIN0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * com.sleepycat.je.tree.DIN cannot be cast to com.sleepycat.je.tree.DBIN
         */
      }
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 Weak Mutation 160: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:592 - ReplaceComparisonOperator != null -> = null
   * 2 Weak Mutation 161: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:593 - ReplaceConstant - getLastNode passed null root -> 
   * 3 com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;: I3 Branch 26 IFNONNULL L592 - false
   * 4 Weak Mutation 161: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:593 - ReplaceConstant - getLastNode passed null root -> 
   * 5 Weak Mutation 160: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:592 - ReplaceComparisonOperator != null -> = null
   */
  @Test
  public void test13()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try {
        tree0.getLastNode((DIN) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * getLastNode passed null root
         */
      }
  }

  //Test case number: 14
  /*
   * 25 covered goals:
   * 1 Weak Mutation 163: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:598 - ReplaceConstant - -1 -> 0
   * 2 Weak Mutation 162: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:598 - DeleteField: RIGHTLcom/sleepycat/je/tree/Tree$SearchType;
   * 3 Weak Mutation 167: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:598 - DeleteStatement: searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;
   * 4 Weak Mutation 166: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:598 - ReplaceConstant - 1 -> 0
   * 5 Weak Mutation 165: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:598 - ReplaceConstant - -1 -> -2
   * 6 Weak Mutation 164: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:598 - ReplaceConstant - -1 -> 1
   * 7 com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;: I3 Branch 26 IFNONNULL L592 - true
   * 8 com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;: I15 Branch 56 IF_ACMPNE L1287 - false
   * 9 Weak Mutation 25: com.sleepycat.je.tree.Tree.getTreeStatsAccumulator()Lcom/sleepycat/je/tree/TreeWalkerStatsAccumulator;:237 - DeleteStatement: getThreadLocalReferenceCount()I
   * 10 Weak Mutation 27: com.sleepycat.je.tree.Tree.getTreeStatsAccumulator()Lcom/sleepycat/je/tree/TreeWalkerStatsAccumulator;:237 - ReplaceComparisonOperator <= -> <
   * 11 Weak Mutation 160: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:592 - ReplaceComparisonOperator != null -> = null
   * 12 Weak Mutation 413: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1288 - ReplaceComparisonOperator = null -> != null
   * 13 Weak Mutation 432: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1314 - ReplaceVariable parent -> child
   * 14 Weak Mutation 424: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1310 - ReplaceComparisonOperator = null -> != null
   * 15 Weak Mutation 427: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1313 - ReplaceVariable parent -> child
   * 16 Weak Mutation 428: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1313 - DeleteStatement: getNEntries()I
   * 17 Weak Mutation 431: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1313 - ReplaceComparisonOperator != -> -1
   * 18 Weak Mutation 418: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - ReplaceComparisonOperator != -> <
   * 19 Weak Mutation 421: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1301 - ReplaceComparisonOperator = null -> != null
   * 20 Weak Mutation 163: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:598 - ReplaceConstant - -1 -> 0
   * 21 Weak Mutation 162: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:598 - DeleteField: RIGHTLcom/sleepycat/je/tree/Tree$SearchType;
   * 22 Weak Mutation 167: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:598 - DeleteStatement: searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;
   * 23 Weak Mutation 166: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:598 - ReplaceConstant - 1 -> 0
   * 24 Weak Mutation 165: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:598 - ReplaceConstant - -1 -> -2
   * 25 Weak Mutation 164: com.sleepycat.je.tree.Tree.getLastNode(Lcom/sleepycat/je/tree/DIN;)Lcom/sleepycat/je/tree/DBIN;:598 - ReplaceConstant - -1 -> 1
   */
  @Test
  public void test14()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try {
        tree0.getLastNode(dIN0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * com.sleepycat.je.tree.DIN cannot be cast to com.sleepycat.je.tree.DBIN
         */
      }
  }

  //Test case number: 15
  /*
   * 74 covered goals:
   * 1 Weak Mutation 171: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:608 - InsertUnaryOp IINC -1 requireExactMatch
   * 2 Weak Mutation 170: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:608 - InsertUnaryOp IINC 1 requireExactMatch
   * 3 Weak Mutation 169: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:608 - InsertUnaryOp Negation of requireExactMatch
   * 4 Weak Mutation 168: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:608 - ReplaceVariable requireExactMatch -> updateGeneration
   * 5 Weak Mutation 177: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:608 - DeleteStatement: getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;
   * 6 Weak Mutation 175: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:609 - ReplaceConstant - -1 -> 1
   * 7 Weak Mutation 174: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:609 - ReplaceConstant - -1 -> 0
   * 8 Weak Mutation 173: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:609 - InsertUnaryOp Negation of updateGeneration
   * 9 Weak Mutation 172: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:609 - ReplaceVariable updateGeneration -> requireExactMatch
   * 10 Weak Mutation 176: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:609 - ReplaceConstant - -1 -> -2
   * 11 Weak Mutation 178: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:639 - ReplaceComparisonOperator != null -> = null
   * 12 Weak Mutation 180: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:645 - DeleteStatement: getMainTreeKey()[B
   * 13 Weak Mutation 181: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:646 - DeleteStatement: getDupTreeKey()[B
   * 14 Weak Mutation 182: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:647 - DeleteStatement: isRoot()Z
   * 15 Weak Mutation 183: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:651 - DeleteStatement: getNodeId()J
   * 16 Weak Mutation 200: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:651 - DeleteStatement: getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;
   * 17 Weak Mutation 187: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - InsertUnaryOp Negation of isRoot
   * 18 Weak Mutation 184: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - DeleteStatement: containsDuplicates()Z
   * 19 Weak Mutation 185: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - ReplaceVariable isRoot -> updateGeneration
   * 20 Weak Mutation 188: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - ReplaceVariable mainTreeKey -> dupTreeKey
   * 21 Weak Mutation 189: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - ReplaceVariable dupTreeKey -> mainTreeKey
   * 22 Weak Mutation 190: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - ReplaceVariable requireExactMatch -> updateGeneration
   * 23 Weak Mutation 197: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - InsertUnaryOp Negation of updateGeneration
   * 24 Weak Mutation 196: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - ReplaceVariable updateGeneration -> isRoot
   * 25 Weak Mutation 198: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - InsertUnaryOp Negation of targetLevel
   * 26 Weak Mutation 193: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - InsertUnaryOp IINC 1 requireExactMatch
   * 27 Weak Mutation 192: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - InsertUnaryOp Negation of requireExactMatch
   * 28 Weak Mutation 195: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - ReplaceVariable updateGeneration -> requireExactMatch
   * 29 Weak Mutation 194: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - InsertUnaryOp IINC -1 requireExactMatch
   * 30 Weak Mutation 199: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:654 - ReplaceConstant - 1 -> 0
   * 31 Weak Mutation 205: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - InsertUnaryOp Negation of updateGeneration
   * 32 Weak Mutation 207: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - InsertUnaryOp IINC -1 updateGeneration
   * 33 Weak Mutation 206: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - InsertUnaryOp IINC 1 updateGeneration
   * 34 Weak Mutation 201: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - ReplaceVariable updateGeneration -> targetIsRoot
   * 35 Weak Mutation 202: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - ReplaceVariable updateGeneration -> requireExactMatch
   * 36 Weak Mutation 208: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - DeleteStatement: getRootIN(Z)Lcom/sleepycat/je/tree/IN;
   * 37 com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;: root-Branch
   * 38 com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;: I3 Branch 27 IFNONNULL L639 - true
   * 39 Weak Mutation 171: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:608 - InsertUnaryOp IINC -1 requireExactMatch
   * 40 Weak Mutation 170: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:608 - InsertUnaryOp IINC 1 requireExactMatch
   * 41 Weak Mutation 169: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:608 - InsertUnaryOp Negation of requireExactMatch
   * 42 Weak Mutation 168: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:608 - ReplaceVariable requireExactMatch -> updateGeneration
   * 43 Weak Mutation 175: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:609 - ReplaceConstant - -1 -> 1
   * 44 Weak Mutation 174: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:609 - ReplaceConstant - -1 -> 0
   * 45 Weak Mutation 173: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:609 - InsertUnaryOp Negation of updateGeneration
   * 46 Weak Mutation 172: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:609 - ReplaceVariable updateGeneration -> requireExactMatch
   * 47 Weak Mutation 187: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - InsertUnaryOp Negation of isRoot
   * 48 Weak Mutation 184: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - DeleteStatement: containsDuplicates()Z
   * 49 Weak Mutation 185: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - ReplaceVariable isRoot -> updateGeneration
   * 50 Weak Mutation 190: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - ReplaceVariable requireExactMatch -> updateGeneration
   * 51 Weak Mutation 188: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - ReplaceVariable mainTreeKey -> dupTreeKey
   * 52 Weak Mutation 189: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - ReplaceVariable dupTreeKey -> mainTreeKey
   * 53 Weak Mutation 178: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:639 - ReplaceComparisonOperator != null -> = null
   * 54 Weak Mutation 176: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:609 - ReplaceConstant - -1 -> -2
   * 55 Weak Mutation 177: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:608 - DeleteStatement: getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;
   * 56 Weak Mutation 182: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:647 - DeleteStatement: isRoot()Z
   * 57 Weak Mutation 183: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:651 - DeleteStatement: getNodeId()J
   * 58 Weak Mutation 180: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:645 - DeleteStatement: getMainTreeKey()[B
   * 59 Weak Mutation 181: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:646 - DeleteStatement: getDupTreeKey()[B
   * 60 Weak Mutation 205: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - InsertUnaryOp Negation of updateGeneration
   * 61 Weak Mutation 207: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - InsertUnaryOp IINC -1 updateGeneration
   * 62 Weak Mutation 206: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - InsertUnaryOp IINC 1 updateGeneration
   * 63 Weak Mutation 201: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - ReplaceVariable updateGeneration -> targetIsRoot
   * 64 Weak Mutation 200: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:651 - DeleteStatement: getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;
   * 65 Weak Mutation 202: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - ReplaceVariable updateGeneration -> requireExactMatch
   * 66 Weak Mutation 197: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - InsertUnaryOp Negation of updateGeneration
   * 67 Weak Mutation 196: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - ReplaceVariable updateGeneration -> isRoot
   * 68 Weak Mutation 199: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:654 - ReplaceConstant - 1 -> 0
   * 69 Weak Mutation 198: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - InsertUnaryOp Negation of targetLevel
   * 70 Weak Mutation 193: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - InsertUnaryOp IINC 1 requireExactMatch
   * 71 Weak Mutation 192: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - InsertUnaryOp Negation of requireExactMatch
   * 72 Weak Mutation 195: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - ReplaceVariable updateGeneration -> requireExactMatch
   * 73 Weak Mutation 194: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - InsertUnaryOp IINC -1 requireExactMatch
   * 74 Weak Mutation 208: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - DeleteStatement: getRootIN(Z)Lcom/sleepycat/je/tree/IN;
   */
  @Test
  public void test15()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try {
        tree0.getParentINForChildIN((IN) dIN0, false, true);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * TYPE ERROR?
         */
      }
  }

  //Test case number: 16
  /*
   * 3 covered goals:
   * 1 Weak Mutation 179: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:640 - ReplaceConstant - getParentNode passed null -> 
   * 2 com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;: I3 Branch 27 IFNONNULL L639 - false
   * 3 Weak Mutation 179: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:640 - ReplaceConstant - getParentNode passed null -> 
   */
  @Test
  public void test16()  throws Throwable  {
      Tree tree0 = new Tree();
      ArrayList<DBIN> arrayList0 = new ArrayList<DBIN>();
      // Undeclared exception!
      try {
        tree0.getParentINForChildIN((IN) null, false, false, (int) (byte)0, (List) arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * getParentNode passed null
         */
      }
  }

  //Test case number: 17
  /*
   * 7 covered goals:
   * 1 Weak Mutation 186: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - ReplaceVariable isRoot -> requireExactMatch
   * 2 Weak Mutation 191: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - ReplaceVariable requireExactMatch -> isRoot
   * 3 Weak Mutation 185: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - ReplaceVariable isRoot -> updateGeneration
   * 4 Weak Mutation 201: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - ReplaceVariable updateGeneration -> targetIsRoot
   * 5 Weak Mutation 196: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - ReplaceVariable updateGeneration -> isRoot
   * 6 Weak Mutation 186: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - ReplaceVariable isRoot -> requireExactMatch
   * 7 Weak Mutation 191: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - ReplaceVariable requireExactMatch -> isRoot
   */
  @Test
  public void test17()  throws Throwable  {
      Tree tree0 = new Tree();
      MapLN mapLN0 = new MapLN();
      DatabaseImpl databaseImpl0 = mapLN0.getDatabase();
      byte[] byteArray0 = new byte[9];
      ChildReference childReference0 = new ChildReference((Node) mapLN0, byteArray0, (-1L));
      DIN dIN0 = new DIN(databaseImpl0, byteArray0, (int) (byte)60, byteArray0, childReference0, 1);
      // Undeclared exception!
      try {
        tree0.getParentINForChildIN((IN) dIN0, true, true);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * TYPE ERROR?
         */
      }
  }

  //Test case number: 18
  /*
   * 32 covered goals:
   * 1 Weak Mutation 204: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - ReplaceVariable updateGeneration -> doFetch
   * 2 Weak Mutation 203: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - ReplaceVariable updateGeneration -> targetContainsDuplicates
   * 3 Weak Mutation 171: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:608 - InsertUnaryOp IINC -1 requireExactMatch
   * 4 Weak Mutation 170: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:608 - InsertUnaryOp IINC 1 requireExactMatch
   * 5 Weak Mutation 169: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:608 - InsertUnaryOp Negation of requireExactMatch
   * 6 Weak Mutation 175: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:609 - ReplaceConstant - -1 -> 1
   * 7 Weak Mutation 174: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:609 - ReplaceConstant - -1 -> 0
   * 8 Weak Mutation 173: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:609 - InsertUnaryOp Negation of updateGeneration
   * 9 Weak Mutation 187: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - InsertUnaryOp Negation of isRoot
   * 10 Weak Mutation 184: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - DeleteStatement: containsDuplicates()Z
   * 11 Weak Mutation 188: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - ReplaceVariable mainTreeKey -> dupTreeKey
   * 12 Weak Mutation 189: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:652 - ReplaceVariable dupTreeKey -> mainTreeKey
   * 13 Weak Mutation 178: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:639 - ReplaceComparisonOperator != null -> = null
   * 14 Weak Mutation 176: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:609 - ReplaceConstant - -1 -> -2
   * 15 Weak Mutation 177: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZ)Lcom/sleepycat/je/tree/SearchResult;:608 - DeleteStatement: getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;
   * 16 Weak Mutation 182: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:647 - DeleteStatement: isRoot()Z
   * 17 Weak Mutation 183: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:651 - DeleteStatement: getNodeId()J
   * 18 Weak Mutation 180: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:645 - DeleteStatement: getMainTreeKey()[B
   * 19 Weak Mutation 181: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:646 - DeleteStatement: getDupTreeKey()[B
   * 20 Weak Mutation 205: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - InsertUnaryOp Negation of updateGeneration
   * 21 Weak Mutation 207: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - InsertUnaryOp IINC -1 updateGeneration
   * 22 Weak Mutation 206: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - InsertUnaryOp IINC 1 updateGeneration
   * 23 Weak Mutation 200: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:651 - DeleteStatement: getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;
   * 24 Weak Mutation 197: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - InsertUnaryOp Negation of updateGeneration
   * 25 Weak Mutation 199: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:654 - ReplaceConstant - 1 -> 0
   * 26 Weak Mutation 198: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - InsertUnaryOp Negation of targetLevel
   * 27 Weak Mutation 193: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - InsertUnaryOp IINC 1 requireExactMatch
   * 28 Weak Mutation 192: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - InsertUnaryOp Negation of requireExactMatch
   * 29 Weak Mutation 194: com.sleepycat.je.tree.Tree.getParentINForChildIN(Lcom/sleepycat/je/tree/IN;ZZILjava/util/List;)Lcom/sleepycat/je/tree/SearchResult;:653 - InsertUnaryOp IINC -1 requireExactMatch
   * 30 Weak Mutation 208: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - DeleteStatement: getRootIN(Z)Lcom/sleepycat/je/tree/IN;
   * 31 Weak Mutation 204: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - ReplaceVariable updateGeneration -> doFetch
   * 32 Weak Mutation 203: com.sleepycat.je.tree.Tree.getParentINForChildIN(JZZ[B[BZZILjava/util/List;Z)Lcom/sleepycat/je/tree/SearchResult;:691 - ReplaceVariable updateGeneration -> targetContainsDuplicates
   */
  @Test
  public void test18()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try {
        tree0.getParentINForChildIN((IN) dIN0, false, false);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * TYPE ERROR?
         */
      }
  }

  //Test case number: 19
  /*
   * 34 covered goals:
   * 1 Weak Mutation 262: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - ReplaceVariable splitsAllowed -> findDeletedEntries
   * 2 Weak Mutation 263: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - InsertUnaryOp Negation of splitsAllowed
   * 3 Weak Mutation 266: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - ReplaceComparisonOperator == -> !=
   * 4 Weak Mutation 264: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - InsertUnaryOp IINC 1 splitsAllowed
   * 5 Weak Mutation 265: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - InsertUnaryOp IINC -1 splitsAllowed
   * 6 Weak Mutation 279: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - DeleteField: NORMALLcom/sleepycat/je/tree/Tree$SearchType;
   * 7 Weak Mutation 278: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - ReplaceVariable mainKey -> dupKey
   * 8 Weak Mutation 282: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - ReplaceConstant - -1 -> -2
   * 9 Weak Mutation 281: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - ReplaceConstant - -1 -> 1
   * 10 Weak Mutation 280: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - ReplaceConstant - -1 -> 0
   * 11 Weak Mutation 289: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - DeleteStatement: search([BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;
   * 12 Weak Mutation 287: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:770 - InsertUnaryOp IINC 1 updateGeneration
   * 13 Weak Mutation 286: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:770 - InsertUnaryOp Negation of updateGeneration
   * 14 Weak Mutation 285: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:770 - ReplaceVariable updateGeneration -> findDeletedEntries
   * 15 Weak Mutation 288: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:770 - InsertUnaryOp IINC -1 updateGeneration
   * 16 Weak Mutation 290: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:775 - ReplaceComparisonOperator = null -> != null
   * 17 com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z: I7 Branch 33 IFEQ L765 - true
   * 18 com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z: I57 Branch 34 IFNULL L775 - true
   * 19 Weak Mutation 279: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - DeleteField: NORMALLcom/sleepycat/je/tree/Tree$SearchType;
   * 20 Weak Mutation 278: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - ReplaceVariable mainKey -> dupKey
   * 21 Weak Mutation 282: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - ReplaceConstant - -1 -> -2
   * 22 Weak Mutation 281: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - ReplaceConstant - -1 -> 1
   * 23 Weak Mutation 280: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - ReplaceConstant - -1 -> 0
   * 24 Weak Mutation 287: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:770 - InsertUnaryOp IINC 1 updateGeneration
   * 25 Weak Mutation 286: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:770 - InsertUnaryOp Negation of updateGeneration
   * 26 Weak Mutation 285: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:770 - ReplaceVariable updateGeneration -> findDeletedEntries
   * 27 Weak Mutation 262: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - ReplaceVariable splitsAllowed -> findDeletedEntries
   * 28 Weak Mutation 263: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - InsertUnaryOp Negation of splitsAllowed
   * 29 Weak Mutation 266: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - ReplaceComparisonOperator == -> !=
   * 30 Weak Mutation 264: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - InsertUnaryOp IINC 1 splitsAllowed
   * 31 Weak Mutation 265: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - InsertUnaryOp IINC -1 splitsAllowed
   * 32 Weak Mutation 288: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:770 - InsertUnaryOp IINC -1 updateGeneration
   * 33 Weak Mutation 289: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - DeleteStatement: search([BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;
   * 34 Weak Mutation 290: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:775 - ReplaceComparisonOperator = null -> != null
   */
  @Test
  public void test19()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[8];
      TreeLocation treeLocation0 = new TreeLocation();
      DupCountLN dupCountLN0 = new DupCountLN((int) (byte)0);
      try {
        tree0.getParentBINForChildLN(treeLocation0, byteArray0, (byte[]) null, (LN) dupCountLN0, false, true, false, false);
        fail("Expecting exception: DatabaseException");
      } catch(DatabaseException e) {
        /*
         * 
         */
      }
  }

  //Test case number: 20
  /*
   * 20 covered goals:
   * 1 Weak Mutation 260: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - ReplaceVariable splitsAllowed -> updateGeneration
   * 2 Weak Mutation 261: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - ReplaceVariable splitsAllowed -> searchDupTree
   * 3 Weak Mutation 283: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:770 - ReplaceVariable updateGeneration -> splitsAllowed
   * 4 Weak Mutation 279: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - DeleteField: NORMALLcom/sleepycat/je/tree/Tree$SearchType;
   * 5 Weak Mutation 278: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - ReplaceVariable mainKey -> dupKey
   * 6 Weak Mutation 282: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - ReplaceConstant - -1 -> -2
   * 7 Weak Mutation 281: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - ReplaceConstant - -1 -> 1
   * 8 Weak Mutation 280: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - ReplaceConstant - -1 -> 0
   * 9 Weak Mutation 287: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:770 - InsertUnaryOp IINC 1 updateGeneration
   * 10 Weak Mutation 286: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:770 - InsertUnaryOp Negation of updateGeneration
   * 11 Weak Mutation 262: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - ReplaceVariable splitsAllowed -> findDeletedEntries
   * 12 Weak Mutation 288: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:770 - InsertUnaryOp IINC -1 updateGeneration
   * 13 Weak Mutation 289: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:769 - DeleteStatement: search([BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;
   * 14 Weak Mutation 290: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:775 - ReplaceComparisonOperator = null -> != null
   * 15 Weak Mutation 393: com.sleepycat.je.tree.Tree.search([BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1163 - DeleteStatement: getRootIN(Z)Lcom/sleepycat/je/tree/IN;
   * 16 Weak Mutation 392: com.sleepycat.je.tree.Tree.search([BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1163 - ReplaceConstant - 1 -> 0
   * 17 Weak Mutation 558: com.sleepycat.je.tree.Tree.getRootIN(Z)Lcom/sleepycat/je/tree/IN;:1690 - ReplaceConstant - TYPE ERROR? -> 
   * 18 Weak Mutation 283: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:770 - ReplaceVariable updateGeneration -> splitsAllowed
   * 19 Weak Mutation 260: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - ReplaceVariable splitsAllowed -> updateGeneration
   * 20 Weak Mutation 261: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - ReplaceVariable splitsAllowed -> searchDupTree
   */
  @Test
  public void test20()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[8];
      TreeLocation treeLocation0 = new TreeLocation();
      DupCountLN dupCountLN0 = new DupCountLN((int) (byte)0);
      try {
        tree0.getParentBINForChildLN(treeLocation0, byteArray0, (byte[]) null, (LN) dupCountLN0, false, true, true, true);
        fail("Expecting exception: DatabaseException");
      } catch(DatabaseException e) {
        /*
         * 
         */
      }
  }

  //Test case number: 21
  /*
   * 24 covered goals:
   * 1 Weak Mutation 277: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:766 - DeleteStatement: searchSplitsAllowed([BJZ)Lcom/sleepycat/je/tree/IN;
   * 2 Weak Mutation 267: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:766 - ReplaceVariable mainKey -> dupKey
   * 3 Weak Mutation 270: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:766 - ReplaceConstant - -1 -> -2
   * 4 Weak Mutation 268: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:766 - ReplaceConstant - -1 -> 0
   * 5 Weak Mutation 269: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:766 - ReplaceConstant - -1 -> 1
   * 6 Weak Mutation 275: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:767 - InsertUnaryOp IINC 1 updateGeneration
   * 7 Weak Mutation 274: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:767 - InsertUnaryOp Negation of updateGeneration
   * 8 Weak Mutation 276: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:767 - InsertUnaryOp IINC -1 updateGeneration
   * 9 Weak Mutation 407: com.sleepycat.je.tree.Tree.searchSplitsAllowed([BJZ)Lcom/sleepycat/je/tree/IN;:1179 - ReplaceComparisonOperator = null -> != null
   * 10 Weak Mutation 401: com.sleepycat.je.tree.Tree.searchSplitsAllowed([BJZ)Lcom/sleepycat/je/tree/IN;:1237 - ReplaceComparisonOperator != null -> = null
   * 11 com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z: I7 Branch 33 IFEQ L765 - false
   * 12 com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z: I100 Branch 35 IFNONNULL L785 - false
   * 13 com.sleepycat.je.tree.Tree.searchSplitsAllowed([BJZ)Lcom/sleepycat/je/tree/IN;: I39 Branch 53 IFNULL L1179 - true
   * 14 com.sleepycat.je.tree.Tree.searchSplitsAllowed([BJZ)Lcom/sleepycat/je/tree/IN;: I14 Branch 52 IFNONNULL L1237 - false
   * 15 Weak Mutation 275: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:767 - InsertUnaryOp IINC 1 updateGeneration
   * 16 Weak Mutation 274: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:767 - InsertUnaryOp Negation of updateGeneration
   * 17 Weak Mutation 277: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:766 - DeleteStatement: searchSplitsAllowed([BJZ)Lcom/sleepycat/je/tree/IN;
   * 18 Weak Mutation 276: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:767 - InsertUnaryOp IINC -1 updateGeneration
   * 19 Weak Mutation 267: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:766 - ReplaceVariable mainKey -> dupKey
   * 20 Weak Mutation 270: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:766 - ReplaceConstant - -1 -> -2
   * 21 Weak Mutation 268: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:766 - ReplaceConstant - -1 -> 0
   * 22 Weak Mutation 269: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:766 - ReplaceConstant - -1 -> 1
   * 23 Weak Mutation 401: com.sleepycat.je.tree.Tree.searchSplitsAllowed([BJZ)Lcom/sleepycat/je/tree/IN;:1237 - ReplaceComparisonOperator != null -> = null
   * 24 Weak Mutation 407: com.sleepycat.je.tree.Tree.searchSplitsAllowed([BJZ)Lcom/sleepycat/je/tree/IN;:1179 - ReplaceComparisonOperator = null -> != null
   */
  @Test
  public void test21()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[8];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      LN lN0 = new LN(databaseEntry0);
      TreeLocation treeLocation0 = new TreeLocation();
      tree0.getParentBINForChildLN(treeLocation0, (byte[]) null, byteArray0, lN0, true, true, true, true);
      assertEquals("<ln>\n  <node>4843</node>\n  <data>0 0 0 0 0 0 0 0 </data>\n</ln>", lN0.toString());
      assertEquals("<com.sleepycat.je.tree.LN/4843", lN0.shortDescription());
  }

  //Test case number: 22
  /*
   * 20 covered goals:
   * 1 Weak Mutation 273: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:767 - ReplaceVariable updateGeneration -> findDeletedEntries
   * 2 Weak Mutation 272: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:767 - ReplaceVariable updateGeneration -> searchDupTree
   * 3 Weak Mutation 271: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:767 - ReplaceVariable updateGeneration -> splitsAllowed
   * 4 Weak Mutation 275: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:767 - InsertUnaryOp IINC 1 updateGeneration
   * 5 Weak Mutation 274: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:767 - InsertUnaryOp Negation of updateGeneration
   * 6 Weak Mutation 277: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:766 - DeleteStatement: searchSplitsAllowed([BJZ)Lcom/sleepycat/je/tree/IN;
   * 7 Weak Mutation 276: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:767 - InsertUnaryOp IINC -1 updateGeneration
   * 8 Weak Mutation 263: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - InsertUnaryOp Negation of splitsAllowed
   * 9 Weak Mutation 260: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - ReplaceVariable splitsAllowed -> updateGeneration
   * 10 Weak Mutation 266: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - ReplaceComparisonOperator == -> !=
   * 11 Weak Mutation 264: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - InsertUnaryOp IINC 1 splitsAllowed
   * 12 Weak Mutation 265: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:765 - InsertUnaryOp IINC -1 splitsAllowed
   * 13 Weak Mutation 270: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:766 - ReplaceConstant - -1 -> -2
   * 14 Weak Mutation 268: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:766 - ReplaceConstant - -1 -> 0
   * 15 Weak Mutation 269: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:766 - ReplaceConstant - -1 -> 1
   * 16 Weak Mutation 401: com.sleepycat.je.tree.Tree.searchSplitsAllowed([BJZ)Lcom/sleepycat/je/tree/IN;:1237 - ReplaceComparisonOperator != null -> = null
   * 17 Weak Mutation 407: com.sleepycat.je.tree.Tree.searchSplitsAllowed([BJZ)Lcom/sleepycat/je/tree/IN;:1179 - ReplaceComparisonOperator = null -> != null
   * 18 Weak Mutation 273: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:767 - ReplaceVariable updateGeneration -> findDeletedEntries
   * 19 Weak Mutation 272: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:767 - ReplaceVariable updateGeneration -> searchDupTree
   * 20 Weak Mutation 271: com.sleepycat.je.tree.Tree.getParentBINForChildLN(Lcom/sleepycat/je/tree/TreeLocation;[B[BLcom/sleepycat/je/tree/LN;ZZZZ)Z:767 - ReplaceVariable updateGeneration -> splitsAllowed
   */
  @Test
  public void test22()  throws Throwable  {
      Tree tree0 = new Tree();
      TreeLocation treeLocation0 = new TreeLocation();
      LN lN0 = new LN();
      tree0.getParentBINForChildLN(treeLocation0, (byte[]) null, (byte[]) null, lN0, true, true, true, false);
      assertEquals(4915L, lN0.getLastId());
      assertEquals(4915L, lN0.getNextNodeId());
  }

  //Test case number: 23
  /*
   * 18 covered goals:
   * 1 Weak Mutation 343: com.sleepycat.je.tree.Tree.getNextBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:956 - InsertUnaryOp Negation of traverseWithinDupTree
   * 2 Weak Mutation 346: com.sleepycat.je.tree.Tree.getNextBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:956 - ReplaceConstant - 1 -> 0
   * 3 Weak Mutation 345: com.sleepycat.je.tree.Tree.getNextBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:956 - InsertUnaryOp IINC -1 traverseWithinDupTree
   * 4 Weak Mutation 344: com.sleepycat.je.tree.Tree.getNextBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:956 - InsertUnaryOp IINC 1 traverseWithinDupTree
   * 5 Weak Mutation 351: com.sleepycat.je.tree.Tree.getNextBinInternal(ZLcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:982 - DeleteStatement: getNEntries()I
   * 6 Weak Mutation 354: com.sleepycat.je.tree.Tree.getNextBinInternal(ZLcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:982 - ReplaceComparisonOperator != -> -1
   * 7 Weak Mutation 355: com.sleepycat.je.tree.Tree.getNextBinInternal(ZLcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:983 - DeleteStatement: getIdentifierKey()[B
   * 8 Weak Mutation 370: com.sleepycat.je.tree.Tree.getNextBinInternal(ZLcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:1077 - ReplaceConstant - TYPE ERROR? -> 
   * 9 com.sleepycat.je.tree.Tree.getNextBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;: root-Branch
   * 10 com.sleepycat.je.tree.Tree.getNextBinInternal(ZLcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;: I8 Branch 49 IFNE L982 - false
   * 11 Weak Mutation 343: com.sleepycat.je.tree.Tree.getNextBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:956 - InsertUnaryOp Negation of traverseWithinDupTree
   * 12 Weak Mutation 351: com.sleepycat.je.tree.Tree.getNextBinInternal(ZLcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:982 - DeleteStatement: getNEntries()I
   * 13 Weak Mutation 346: com.sleepycat.je.tree.Tree.getNextBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:956 - ReplaceConstant - 1 -> 0
   * 14 Weak Mutation 345: com.sleepycat.je.tree.Tree.getNextBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:956 - InsertUnaryOp IINC -1 traverseWithinDupTree
   * 15 Weak Mutation 344: com.sleepycat.je.tree.Tree.getNextBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:956 - InsertUnaryOp IINC 1 traverseWithinDupTree
   * 16 Weak Mutation 370: com.sleepycat.je.tree.Tree.getNextBinInternal(ZLcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:1077 - ReplaceConstant - TYPE ERROR? -> 
   * 17 Weak Mutation 354: com.sleepycat.je.tree.Tree.getNextBinInternal(ZLcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:982 - ReplaceComparisonOperator != -> -1
   * 18 Weak Mutation 355: com.sleepycat.je.tree.Tree.getNextBinInternal(ZLcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:983 - DeleteStatement: getIdentifierKey()[B
   */
  @Test
  public void test23()  throws Throwable  {
      Tree tree0 = new Tree();
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try {
        tree0.getNextBin(bIN0, true);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * TYPE ERROR?
         */
      }
  }

  //Test case number: 24
  /*
   * 13 covered goals:
   * 1 Weak Mutation 350: com.sleepycat.je.tree.Tree.getPrevBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:973 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 349: com.sleepycat.je.tree.Tree.getPrevBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:973 - InsertUnaryOp IINC -1 traverseWithinDupTree
   * 3 Weak Mutation 348: com.sleepycat.je.tree.Tree.getPrevBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:973 - InsertUnaryOp IINC 1 traverseWithinDupTree
   * 4 Weak Mutation 347: com.sleepycat.je.tree.Tree.getPrevBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:973 - InsertUnaryOp Negation of traverseWithinDupTree
   * 5 com.sleepycat.je.tree.Tree.getPrevBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;: root-Branch
   * 6 Weak Mutation 351: com.sleepycat.je.tree.Tree.getNextBinInternal(ZLcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:982 - DeleteStatement: getNEntries()I
   * 7 Weak Mutation 370: com.sleepycat.je.tree.Tree.getNextBinInternal(ZLcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:1077 - ReplaceConstant - TYPE ERROR? -> 
   * 8 Weak Mutation 354: com.sleepycat.je.tree.Tree.getNextBinInternal(ZLcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:982 - ReplaceComparisonOperator != -> -1
   * 9 Weak Mutation 355: com.sleepycat.je.tree.Tree.getNextBinInternal(ZLcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:983 - DeleteStatement: getIdentifierKey()[B
   * 10 Weak Mutation 350: com.sleepycat.je.tree.Tree.getPrevBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:973 - ReplaceConstant - 0 -> 1
   * 11 Weak Mutation 349: com.sleepycat.je.tree.Tree.getPrevBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:973 - InsertUnaryOp IINC -1 traverseWithinDupTree
   * 12 Weak Mutation 348: com.sleepycat.je.tree.Tree.getPrevBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:973 - InsertUnaryOp IINC 1 traverseWithinDupTree
   * 13 Weak Mutation 347: com.sleepycat.je.tree.Tree.getPrevBin(Lcom/sleepycat/je/tree/BIN;Z)Lcom/sleepycat/je/tree/BIN;:973 - InsertUnaryOp Negation of traverseWithinDupTree
   */
  @Test
  public void test24()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try {
        tree0.getPrevBin((BIN) dBIN0, false);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * TYPE ERROR?
         */
      }
  }

  //Test case number: 25
  /*
   * 10 covered goals:
   * 1 Weak Mutation 420: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - ReplaceComparisonOperator != -> -1
   * 2 com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;: I37 Branch 58 IFNE L1295 - false
   * 3 Weak Mutation 410: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1287 - ReplaceComparisonOperator == -> !=
   * 4 Weak Mutation 411: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1287 - DeleteField: RIGHTLcom/sleepycat/je/tree/Tree$SearchType;
   * 5 Weak Mutation 409: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1287 - DeleteField: LEFTLcom/sleepycat/je/tree/Tree$SearchType;
   * 6 Weak Mutation 415: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - DeleteStatement: getNodeId()J
   * 7 Weak Mutation 412: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1287 - ReplaceComparisonOperator != -> ==
   * 8 Weak Mutation 417: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - DeleteStatement: longSub(JJ)I
   * 9 Weak Mutation 416: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - InsertUnaryOp Negation of nid
   * 10 Weak Mutation 420: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1295 - ReplaceComparisonOperator != -> -1
   */
  @Test
  public void test25()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[7];
      BINBoundary bINBoundary0 = new BINBoundary();
      tree0.searchSubTree((IN) dIN0, byteArray0, (Tree.SearchType) null, (long) (byte)0, bINBoundary0, false);
      assertEquals(5027L, dIN0.getNextNodeId());
      assertEquals(5027L, dIN0.getLastId());
  }

  //Test case number: 26
  /*
   * 27 covered goals:
   * 1 Weak Mutation 433: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1390 - InsertUnaryOp Negation
   * 2 Weak Mutation 435: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1390 - ReplaceComparisonOperator != -> ==
   * 3 Weak Mutation 436: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1390 - ReplaceComparisonOperator != null -> = null
   * 4 Weak Mutation 440: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1391 - ReplaceComparisonOperator != null -> = null
   * 5 Weak Mutation 437: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1391 - InsertUnaryOp Negation
   * 6 Weak Mutation 439: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1391 - ReplaceComparisonOperator != -> ==
   * 7 Weak Mutation 441: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1399 - ReplaceVariable parent -> child
   * 8 Weak Mutation 442: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1399 - ReplaceVariable parent -> lowestMultipleEntryIN
   * 9 Weak Mutation 443: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1399 - DeleteStatement: getNEntries()I
   * 10 Weak Mutation 446: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1399 - ReplaceComparisonOperator != -> -1
   * 11 com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V: I3 Branch 74 IFNE L1390 - false
   * 12 com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V: I5 Branch 75 IFNONNULL L1390 - true
   * 13 com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V: I13 Branch 76 IFNE L1391 - false
   * 14 com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V: I15 Branch 77 IFNONNULL L1391 - true
   * 15 com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V: I32 Branch 78 IFNE L1399 - false
   * 16 com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V: I99 Branch 83 IFNULL L1412 - true
   * 17 com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V: I125 Branch 87 IFNULL L1420 - true
   * 18 Weak Mutation 440: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1391 - ReplaceComparisonOperator != null -> = null
   * 19 Weak Mutation 441: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1399 - ReplaceVariable parent -> child
   * 20 Weak Mutation 442: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1399 - ReplaceVariable parent -> lowestMultipleEntryIN
   * 21 Weak Mutation 443: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1399 - DeleteStatement: getNEntries()I
   * 22 Weak Mutation 446: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1399 - ReplaceComparisonOperator != -> -1
   * 23 Weak Mutation 433: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1390 - InsertUnaryOp Negation
   * 24 Weak Mutation 435: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1390 - ReplaceComparisonOperator != -> ==
   * 25 Weak Mutation 436: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1390 - ReplaceComparisonOperator != null -> = null
   * 26 Weak Mutation 437: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1391 - InsertUnaryOp Negation
   * 27 Weak Mutation 439: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1391 - ReplaceComparisonOperator != -> ==
   */
  @Test
  public void test26()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[5];
      ArrayList<TreeWalkerStatsAccumulator> arrayList0 = new ArrayList<TreeWalkerStatsAccumulator>();
      tree0.searchDeletableSubTree((IN) dIN0, byteArray0, (ArrayList) arrayList0);
      assertEquals(5056L, dIN0.getLastId());
      assertEquals(5056L, dIN0.getNextNodeId());
  }

  //Test case number: 27
  /*
   * 31 covered goals:
   * 1 Weak Mutation 680: com.sleepycat.je.tree.Tree.getLogSize()I:2255 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 2 Weak Mutation 687: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - ReplaceArithmeticOperator + -> -
   * 3 Weak Mutation 686: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - DeleteStatement: getLogSize()I
   * 4 Weak Mutation 685: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 5 Weak Mutation 684: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - InsertUnaryOp IINC -1 size
   * 6 Weak Mutation 683: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - InsertUnaryOp IINC 1 size
   * 7 Weak Mutation 682: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - InsertUnaryOp Negation of size
   * 8 Weak Mutation 690: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - ReplaceArithmeticOperator + -> *
   * 9 Weak Mutation 688: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - ReplaceArithmeticOperator + -> %
   * 10 Weak Mutation 689: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - ReplaceArithmeticOperator + -> /
   * 11 com.sleepycat.je.tree.Tree.getLogSize()I: I8 Branch 134 IFNULL L2255 - false
   * 12 Weak Mutation 681: com.sleepycat.je.tree.Tree.getLogSize()I:2255 - ReplaceComparisonOperator = null -> != null
   * 13 Weak Mutation 679: com.sleepycat.je.tree.Tree.getLogSize()I:2254 - DeleteStatement: getBooleanLogSize()I
   * 14 Weak Mutation 692: com.sleepycat.je.tree.Tree.getLogSize()I:2258 - InsertUnaryOp IINC 1 size
   * 15 Weak Mutation 693: com.sleepycat.je.tree.Tree.getLogSize()I:2258 - InsertUnaryOp IINC -1 size
   * 16 Weak Mutation 691: com.sleepycat.je.tree.Tree.getLogSize()I:2258 - InsertUnaryOp Negation of size
   * 17 Weak Mutation 687: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - ReplaceArithmeticOperator + -> -
   * 18 Weak Mutation 686: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - DeleteStatement: getLogSize()I
   * 19 Weak Mutation 685: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 20 Weak Mutation 684: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - InsertUnaryOp IINC -1 size
   * 21 Weak Mutation 683: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - InsertUnaryOp IINC 1 size
   * 22 Weak Mutation 682: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - InsertUnaryOp Negation of size
   * 23 Weak Mutation 681: com.sleepycat.je.tree.Tree.getLogSize()I:2255 - ReplaceComparisonOperator = null -> != null
   * 24 Weak Mutation 680: com.sleepycat.je.tree.Tree.getLogSize()I:2255 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 25 Weak Mutation 679: com.sleepycat.je.tree.Tree.getLogSize()I:2254 - DeleteStatement: getBooleanLogSize()I
   * 26 Weak Mutation 692: com.sleepycat.je.tree.Tree.getLogSize()I:2258 - InsertUnaryOp IINC 1 size
   * 27 Weak Mutation 693: com.sleepycat.je.tree.Tree.getLogSize()I:2258 - InsertUnaryOp IINC -1 size
   * 28 Weak Mutation 690: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - ReplaceArithmeticOperator + -> *
   * 29 Weak Mutation 691: com.sleepycat.je.tree.Tree.getLogSize()I:2258 - InsertUnaryOp Negation of size
   * 30 Weak Mutation 688: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - ReplaceArithmeticOperator + -> %
   * 31 Weak Mutation 689: com.sleepycat.je.tree.Tree.getLogSize()I:2256 - ReplaceArithmeticOperator + -> /
   */
  @Test
  public void test27()  throws Throwable  {
      Tree tree0 = new Tree();
      ChildReference childReference0 = new ChildReference();
      tree0.setRoot(childReference0, true);
      int int0 = tree0.getLogSize();
      assertEquals(14, tree0.getLogSize());
      assertEquals(14, int0);
  }

  //Test case number: 28
  /*
   * 7 covered goals:
   * 1 Weak Mutation 698: com.sleepycat.je.tree.Tree.writeToLog(Ljava/nio/ByteBuffer;)V:2265 - DeleteStatement: writeBoolean(Ljava/nio/ByteBuffer;Z)V
   * 2 Weak Mutation 697: com.sleepycat.je.tree.Tree.writeToLog(Ljava/nio/ByteBuffer;)V:2265 - ReplaceConstant - 0 -> 1
   * 3 Weak Mutation 695: com.sleepycat.je.tree.Tree.writeToLog(Ljava/nio/ByteBuffer;)V:2265 - ReplaceComparisonOperator = null -> != null
   * 4 com.sleepycat.je.tree.Tree.writeToLog(Ljava/nio/ByteBuffer;)V: I5 Branch 135 IFNULL L2265 - true
   * 5 Weak Mutation 698: com.sleepycat.je.tree.Tree.writeToLog(Ljava/nio/ByteBuffer;)V:2265 - DeleteStatement: writeBoolean(Ljava/nio/ByteBuffer;Z)V
   * 6 Weak Mutation 697: com.sleepycat.je.tree.Tree.writeToLog(Ljava/nio/ByteBuffer;)V:2265 - ReplaceConstant - 0 -> 1
   * 7 Weak Mutation 695: com.sleepycat.je.tree.Tree.writeToLog(Ljava/nio/ByteBuffer;)V:2265 - ReplaceComparisonOperator = null -> != null
   */
  @Test
  public void test28()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try {
        tree0.writeToLog((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 Weak Mutation 703: com.sleepycat.je.tree.Tree.readFromLog(Ljava/nio/ByteBuffer;B)V:2275 - DeleteStatement: readBoolean(Ljava/nio/ByteBuffer;)Z
   * 2 Weak Mutation 703: com.sleepycat.je.tree.Tree.readFromLog(Ljava/nio/ByteBuffer;B)V:2275 - DeleteStatement: readBoolean(Ljava/nio/ByteBuffer;)Z
   */
  @Test
  public void test29()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try {
        tree0.readFromLog((ByteBuffer) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 30
  /*
   * 25 covered goals:
   * 1 Weak Mutation 713: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2287 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 2 Weak Mutation 715: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2288 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 3 Weak Mutation 717: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2288 - InsertUnaryOp IINC 1 verbose
   * 4 Weak Mutation 716: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2288 - InsertUnaryOp Negation of verbose
   * 5 Weak Mutation 719: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2288 - DeleteStatement: dumpLog(Ljava/lang/StringBuffer;Z)V
   * 6 Weak Mutation 718: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2288 - InsertUnaryOp IINC -1 verbose
   * 7 com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V: I10 Branch 138 IFNULL L2287 - false
   * 8 Weak Mutation 712: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2286 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 9 Weak Mutation 714: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2287 - ReplaceComparisonOperator = null -> != null
   * 10 Weak Mutation 711: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2286 - ReplaceConstant - <root> -> 
   * 11 Weak Mutation 720: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2290 - ReplaceConstant - </root> -> 
   * 12 Weak Mutation 721: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2290 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 13 Weak Mutation 16: com.sleepycat.je.tree.Tree.makeRootChildReference(Lcom/sleepycat/je/tree/Node;[BJ)Lcom/sleepycat/je/tree/ChildReference;:159 - InsertUnaryOp Negation of lsn
   * 14 Weak Mutation 713: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2287 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 15 Weak Mutation 712: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2286 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 16 Weak Mutation 715: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2288 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 17 Weak Mutation 714: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2287 - ReplaceComparisonOperator = null -> != null
   * 18 Weak Mutation 717: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2288 - InsertUnaryOp IINC 1 verbose
   * 19 Weak Mutation 716: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2288 - InsertUnaryOp Negation of verbose
   * 20 Weak Mutation 719: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2288 - DeleteStatement: dumpLog(Ljava/lang/StringBuffer;Z)V
   * 21 Weak Mutation 718: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2288 - InsertUnaryOp IINC -1 verbose
   * 22 Weak Mutation 711: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2286 - ReplaceConstant - <root> -> 
   * 23 Weak Mutation 720: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2290 - ReplaceConstant - </root> -> 
   * 24 Weak Mutation 721: com.sleepycat.je.tree.Tree.dumpLog(Ljava/lang/StringBuffer;Z)V:2290 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 25 com.sleepycat.je.tree.Tree.makeRootChildReference(Lcom/sleepycat/je/tree/Node;[BJ)Lcom/sleepycat/je/tree/ChildReference;: root-Branch
   */
  @Test
  public void test30()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[5];
      StringBuffer stringBuffer0 = new StringBuffer("]iUy/0[M^4yFH");
      ChildReference childReference0 = tree0.makeRootChildReference((Node) dIN0, byteArray0, 9223372036854775807L);
      tree0.setRoot(childReference0, false);
      tree0.dumpLog(stringBuffer0, true);
      assertEquals(9223372036854775807L, tree0.getRootLsn());
      assertEquals("]iUy/0[M^4yFH<root><ref knownDeleted=\"false\" pendingDeleted=\"false\"><key v=\"0 0 0 0 0 \"/><DbLsn val=\"0x7fffffff/0xffffffff\"/></ref></root>", stringBuffer0.toString());
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 Weak Mutation 722: com.sleepycat.je.tree.Tree.logEntryIsTransactional()Z:2297 - ReplaceConstant - 0 -> 1
   * 2 com.sleepycat.je.tree.Tree.logEntryIsTransactional()Z: root-Branch
   * 3 Weak Mutation 722: com.sleepycat.je.tree.Tree.logEntryIsTransactional()Z:2297 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test31()  throws Throwable  {
      Tree tree0 = new Tree();
      boolean boolean0 = tree0.logEntryIsTransactional();
      assertEquals(false, boolean0);
  }

  //Test case number: 32
  /*
   * 5 covered goals:
   * 1 Weak Mutation 723: com.sleepycat.je.tree.Tree.getTransactionId()J:2304 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 724: com.sleepycat.je.tree.Tree.getTransactionId()J:2304 - ReplaceConstant - 0 -> -1
   * 3 com.sleepycat.je.tree.Tree.getTransactionId()J: root-Branch
   * 4 Weak Mutation 723: com.sleepycat.je.tree.Tree.getTransactionId()J:2304 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 724: com.sleepycat.je.tree.Tree.getTransactionId()J:2304 - ReplaceConstant - 0 -> -1
   */
  @Test
  public void test32()  throws Throwable  {
      Tree tree0 = new Tree();
      long long0 = tree0.getTransactionId();
      assertEquals(0L, long0);
  }

  //Test case number: 33
  /*
   * 3 covered goals:
   * 1 Weak Mutation 726: com.sleepycat.je.tree.Tree.rebuildINList()V:2312 - DeleteStatement: getDbEnvironment()Lcom/sleepycat/je/dbi/EnvironmentImpl;
   * 2 com.sleepycat.je.tree.Tree.rebuildINList()V: root-Branch
   * 3 Weak Mutation 726: com.sleepycat.je.tree.Tree.rebuildINList()V:2312 - DeleteStatement: getDbEnvironment()Lcom/sleepycat/je/dbi/EnvironmentImpl;
   */
  @Test
  public void test33()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try {
        tree0.rebuildINList();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 34
  /*
   * 80 covered goals:
   * 1 Weak Mutation 745: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2339 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 2 Weak Mutation 747: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 3 Weak Mutation 751: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - InsertUnaryOp IINC -1 nSpaces
   * 4 Weak Mutation 750: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - InsertUnaryOp IINC 1 nSpaces
   * 5 Weak Mutation 749: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - InsertUnaryOp Negation of nSpaces
   * 6 Weak Mutation 748: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - DeleteStatement: getLsn()J
   * 7 Weak Mutation 752: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - DeleteStatement: dumpString(JI)Ljava/lang/String;
   * 8 Weak Mutation 753: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 9 Weak Mutation 754: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - ReplaceConstant - 10 -> 0
   * 10 Weak Mutation 755: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - ReplaceConstant - 10 -> 1
   * 11 Weak Mutation 758: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - ReplaceConstant - 10 -> 11
   * 12 Weak Mutation 759: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 13 Weak Mutation 756: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - ReplaceConstant - 10 -> -1
   * 14 Weak Mutation 757: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - ReplaceConstant - 10 -> 9
   * 15 Weak Mutation 760: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2342 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 16 Weak Mutation 761: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2342 - DeleteStatement: getTarget()Lcom/sleepycat/je/tree/Node;
   * 17 Weak Mutation 762: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2343 - ReplaceComparisonOperator != null -> = null
   * 18 Weak Mutation 766: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2346 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 19 Weak Mutation 765: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2346 - DeleteStatement: toString()Ljava/lang/String;
   * 20 Weak Mutation 767: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - ReplaceConstant - 10 -> 0
   * 21 Weak Mutation 772: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 22 Weak Mutation 770: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - ReplaceConstant - 10 -> 9
   * 23 Weak Mutation 771: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - ReplaceConstant - 10 -> 11
   * 24 Weak Mutation 768: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - ReplaceConstant - 10 -> 1
   * 25 Weak Mutation 769: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - ReplaceConstant - 10 -> -1
   * 26 com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;: I29 Branch 139 IFNULL L2339 - false
   * 27 com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;: I56 Branch 140 IFNONNULL L2343 - true
   * 28 Weak Mutation 728: com.sleepycat.je.tree.Tree.dump()V:2331 - DeleteField: outLjava/io/PrintStream;
   * 29 Weak Mutation 729: com.sleepycat.je.tree.Tree.dump()V:2331 - ReplaceConstant - 0 -> 1
   * 30 Weak Mutation 730: com.sleepycat.je.tree.Tree.dump()V:2331 - DeleteStatement: dumpString(I)Ljava/lang/String;
   * 31 Weak Mutation 731: com.sleepycat.je.tree.Tree.dump()V:2331 - DeleteStatement: println(Ljava/lang/String;)V
   * 32 Weak Mutation 747: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 33 Weak Mutation 746: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2339 - ReplaceComparisonOperator = null -> != null
   * 34 Weak Mutation 745: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2339 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 35 Weak Mutation 744: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2338 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 36 Weak Mutation 751: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - InsertUnaryOp IINC -1 nSpaces
   * 37 Weak Mutation 750: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - InsertUnaryOp IINC 1 nSpaces
   * 38 Weak Mutation 749: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - InsertUnaryOp Negation of nSpaces
   * 39 Weak Mutation 748: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - DeleteStatement: getLsn()J
   * 40 Weak Mutation 739: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2338 - ReplaceConstant - 10 -> 0
   * 41 Weak Mutation 738: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2337 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 42 Weak Mutation 737: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2337 - ReplaceConstant - <tree> -> 
   * 43 Weak Mutation 736: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2336 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 44 Weak Mutation 743: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2338 - ReplaceConstant - 10 -> 11
   * 45 Weak Mutation 742: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2338 - ReplaceConstant - 10 -> 9
   * 46 Weak Mutation 741: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2338 - ReplaceConstant - 10 -> -1
   * 47 Weak Mutation 740: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2338 - ReplaceConstant - 10 -> 1
   * 48 Weak Mutation 762: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2343 - ReplaceComparisonOperator != null -> = null
   * 49 Weak Mutation 760: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2342 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 50 Weak Mutation 761: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2342 - DeleteStatement: getTarget()Lcom/sleepycat/je/tree/Node;
   * 51 Weak Mutation 766: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2346 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 52 Weak Mutation 767: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - ReplaceConstant - 10 -> 0
   * 53 Weak Mutation 765: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2346 - DeleteStatement: toString()Ljava/lang/String;
   * 54 Weak Mutation 754: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - ReplaceConstant - 10 -> 0
   * 55 Weak Mutation 755: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - ReplaceConstant - 10 -> 1
   * 56 Weak Mutation 752: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - DeleteStatement: dumpString(JI)Ljava/lang/String;
   * 57 Weak Mutation 753: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 58 Weak Mutation 758: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - ReplaceConstant - 10 -> 11
   * 59 Weak Mutation 759: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 60 Weak Mutation 756: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - ReplaceConstant - 10 -> -1
   * 61 Weak Mutation 757: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - ReplaceConstant - 10 -> 9
   * 62 Weak Mutation 728: com.sleepycat.je.tree.Tree.dump()V:2331 - DeleteField: outLjava/io/PrintStream;
   * 63 Weak Mutation 729: com.sleepycat.je.tree.Tree.dump()V:2331 - ReplaceConstant - 0 -> 1
   * 64 Weak Mutation 730: com.sleepycat.je.tree.Tree.dump()V:2331 - DeleteStatement: dumpString(I)Ljava/lang/String;
   * 65 Weak Mutation 731: com.sleepycat.je.tree.Tree.dump()V:2331 - DeleteStatement: println(Ljava/lang/String;)V
   * 66 Weak Mutation 732: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2336 - InsertUnaryOp Negation of nSpaces
   * 67 Weak Mutation 733: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2336 - InsertUnaryOp IINC 1 nSpaces
   * 68 Weak Mutation 734: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2336 - InsertUnaryOp IINC -1 nSpaces
   * 69 Weak Mutation 735: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2336 - DeleteStatement: indent(I)Ljava/lang/String;
   * 70 Weak Mutation 774: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2350 - InsertUnaryOp IINC 1 nSpaces
   * 71 Weak Mutation 775: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2350 - InsertUnaryOp IINC -1 nSpaces
   * 72 Weak Mutation 772: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 73 Weak Mutation 773: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2350 - InsertUnaryOp Negation of nSpaces
   * 74 Weak Mutation 770: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - ReplaceConstant - 10 -> 9
   * 75 Weak Mutation 771: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - ReplaceConstant - 10 -> 11
   * 76 Weak Mutation 768: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - ReplaceConstant - 10 -> 1
   * 77 Weak Mutation 769: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - ReplaceConstant - 10 -> -1
   * 78 Weak Mutation 776: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2350 - DeleteStatement: indent(I)Ljava/lang/String;
   * 79 Weak Mutation 777: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2350 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 80 com.sleepycat.je.tree.Tree.dump()V: root-Branch
   */
  @Test
  public void test34()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[7];
      ChildReference childReference0 = new ChildReference((Node) dIN0, byteArray0, (long) (byte)104, (byte)0);
      tree0.setRoot(childReference0, false);
      tree0.dump();
      assertEquals(false, tree0.logEntryIsTransactional());
  }

  //Test case number: 35
  /*
   * 47 covered goals:
   * 1 Weak Mutation 763: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2344 - ReplaceConstant - <in/> -> 
   * 2 Weak Mutation 764: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2344 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 3 com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;: I56 Branch 140 IFNONNULL L2343 - false
   * 4 Weak Mutation 747: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 5 Weak Mutation 746: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2339 - ReplaceComparisonOperator = null -> != null
   * 6 Weak Mutation 745: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2339 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 7 Weak Mutation 744: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2338 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 8 Weak Mutation 751: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - InsertUnaryOp IINC -1 nSpaces
   * 9 Weak Mutation 750: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - InsertUnaryOp IINC 1 nSpaces
   * 10 Weak Mutation 749: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - InsertUnaryOp Negation of nSpaces
   * 11 Weak Mutation 748: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - DeleteStatement: getLsn()J
   * 12 Weak Mutation 739: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2338 - ReplaceConstant - 10 -> 0
   * 13 Weak Mutation 738: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2337 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 14 Weak Mutation 737: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2337 - ReplaceConstant - <tree> -> 
   * 15 Weak Mutation 736: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2336 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 16 Weak Mutation 743: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2338 - ReplaceConstant - 10 -> 11
   * 17 Weak Mutation 742: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2338 - ReplaceConstant - 10 -> 9
   * 18 Weak Mutation 741: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2338 - ReplaceConstant - 10 -> -1
   * 19 Weak Mutation 740: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2338 - ReplaceConstant - 10 -> 1
   * 20 Weak Mutation 762: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2343 - ReplaceComparisonOperator != null -> = null
   * 21 Weak Mutation 760: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2342 - DeleteField: rootLcom/sleepycat/je/tree/ChildReference;
   * 22 Weak Mutation 761: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2342 - DeleteStatement: getTarget()Lcom/sleepycat/je/tree/Node;
   * 23 Weak Mutation 767: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - ReplaceConstant - 10 -> 0
   * 24 Weak Mutation 754: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - ReplaceConstant - 10 -> 0
   * 25 Weak Mutation 755: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - ReplaceConstant - 10 -> 1
   * 26 Weak Mutation 752: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - DeleteStatement: dumpString(JI)Ljava/lang/String;
   * 27 Weak Mutation 753: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2340 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 28 Weak Mutation 758: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - ReplaceConstant - 10 -> 11
   * 29 Weak Mutation 759: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 30 Weak Mutation 756: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - ReplaceConstant - 10 -> -1
   * 31 Weak Mutation 757: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2341 - ReplaceConstant - 10 -> 9
   * 32 Weak Mutation 732: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2336 - InsertUnaryOp Negation of nSpaces
   * 33 Weak Mutation 733: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2336 - InsertUnaryOp IINC 1 nSpaces
   * 34 Weak Mutation 734: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2336 - InsertUnaryOp IINC -1 nSpaces
   * 35 Weak Mutation 735: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2336 - DeleteStatement: indent(I)Ljava/lang/String;
   * 36 Weak Mutation 774: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2350 - InsertUnaryOp IINC 1 nSpaces
   * 37 Weak Mutation 775: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2350 - InsertUnaryOp IINC -1 nSpaces
   * 38 Weak Mutation 772: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 39 Weak Mutation 773: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2350 - InsertUnaryOp Negation of nSpaces
   * 40 Weak Mutation 770: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - ReplaceConstant - 10 -> 9
   * 41 Weak Mutation 771: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - ReplaceConstant - 10 -> 11
   * 42 Weak Mutation 768: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - ReplaceConstant - 10 -> 1
   * 43 Weak Mutation 769: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2348 - ReplaceConstant - 10 -> -1
   * 44 Weak Mutation 776: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2350 - DeleteStatement: indent(I)Ljava/lang/String;
   * 45 Weak Mutation 777: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2350 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 46 Weak Mutation 763: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2344 - ReplaceConstant - <in/> -> 
   * 47 Weak Mutation 764: com.sleepycat.je.tree.Tree.dumpString(I)Ljava/lang/String;:2344 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   */
  @Test
  public void test35()  throws Throwable  {
      Tree tree0 = new Tree();
      ChildReference childReference0 = new ChildReference();
      tree0.setRoot(childReference0, true);
      String string0 = tree0.dumpString(12);
      assertNotNull(string0);
      assertEquals("            <tree>\n            <DbLsn val=\"0xffffffff/0xffffffff\"/>\n<in/>\n            </tree>", string0);
  }

  //Test case number: 36
  /*
   * 8 covered goals:
   * 1 Weak Mutation 778: com.sleepycat.je.tree.Tree.validateINList(Lcom/sleepycat/je/tree/IN;)V:2377 - ReplaceComparisonOperator != null -> = null
   * 2 Weak Mutation 781: com.sleepycat.je.tree.Tree.validateINList(Lcom/sleepycat/je/tree/IN;)V:2380 - ReplaceComparisonOperator = null -> != null
   * 3 Weak Mutation 783: com.sleepycat.je.tree.Tree.validateINList(Lcom/sleepycat/je/tree/IN;)V:2381 - DeleteStatement: getDbEnvironment()Lcom/sleepycat/je/dbi/EnvironmentImpl;
   * 4 com.sleepycat.je.tree.Tree.validateINList(Lcom/sleepycat/je/tree/IN;)V: I3 Branch 141 IFNONNULL L2377 - true
   * 5 com.sleepycat.je.tree.Tree.validateINList(Lcom/sleepycat/je/tree/IN;)V: I14 Branch 142 IFNULL L2380 - false
   * 6 Weak Mutation 783: com.sleepycat.je.tree.Tree.validateINList(Lcom/sleepycat/je/tree/IN;)V:2381 - DeleteStatement: getDbEnvironment()Lcom/sleepycat/je/dbi/EnvironmentImpl;
   * 7 Weak Mutation 781: com.sleepycat.je.tree.Tree.validateINList(Lcom/sleepycat/je/tree/IN;)V:2380 - ReplaceComparisonOperator = null -> != null
   * 8 Weak Mutation 778: com.sleepycat.je.tree.Tree.validateINList(Lcom/sleepycat/je/tree/IN;)V:2377 - ReplaceComparisonOperator != null -> = null
   */
  @Test
  public void test36()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try {
        tree0.validateINList((IN) dBIN0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 37
  /*
   * 4 covered goals:
   * 1 Weak Mutation 780: com.sleepycat.je.tree.Tree.validateINList(Lcom/sleepycat/je/tree/IN;)V:2378 - DeleteStatement: getTarget()Lcom/sleepycat/je/tree/Node;
   * 2 com.sleepycat.je.tree.Tree.validateINList(Lcom/sleepycat/je/tree/IN;)V: I3 Branch 141 IFNONNULL L2377 - false
   * 3 Weak Mutation 778: com.sleepycat.je.tree.Tree.validateINList(Lcom/sleepycat/je/tree/IN;)V:2377 - ReplaceComparisonOperator != null -> = null
   * 4 Weak Mutation 780: com.sleepycat.je.tree.Tree.validateINList(Lcom/sleepycat/je/tree/IN;)V:2378 - DeleteStatement: getTarget()Lcom/sleepycat/je/tree/Node;
   */
  @Test
  public void test37()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try {
        tree0.validateINList((IN) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 38
  /*
   * 2 covered goals:
   * 1 com.sleepycat.je.tree.Tree$RootChildReference.clearTarget()V: root-Branch
   * 2 Weak Mutation 16: com.sleepycat.je.tree.Tree.makeRootChildReference(Lcom/sleepycat/je/tree/Node;[BJ)Lcom/sleepycat/je/tree/ChildReference;:159 - InsertUnaryOp Negation of lsn
   */
  @Test
  public void test38()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[8];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      LN lN0 = new LN(databaseEntry0);
      ChildReference childReference0 = tree0.makeRootChildReference((Node) lN0, byteArray0, 634L);
      childReference0.clearTarget();
      assertEquals("<DbLsn val=\"0x0/0x27a\"/>\n<key v=\"0 0 0 0 0 0 0 0 \"/>\n<target/>\n<knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/><dirty val=\"true\"/>", childReference0.toString());
      assertEquals("<ln>\n  <node>5308</node>\n  <data>0 0 0 0 0 0 0 0 </data>\n</ln>", lN0.toString());
  }

  //Test case number: 39
  /*
   * 2 covered goals:
   * 1 com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;: I3 Branch 54 IFNONNULL L1284 - false
   * 2 Weak Mutation 408: com.sleepycat.je.tree.Tree.searchSubTree(Lcom/sleepycat/je/tree/IN;[BLcom/sleepycat/je/tree/Tree$SearchType;JLcom/sleepycat/je/tree/BINBoundary;Z)Lcom/sleepycat/je/tree/IN;:1284 - ReplaceComparisonOperator != null -> = null
   */
  @Test
  public void test39()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      TreeLocation treeLocation0 = new TreeLocation();
      Tree.SearchType tree_SearchType0 = Tree.SearchType.RIGHT;
      BINBoundary bINBoundary0 = new BINBoundary();
      tree0.searchSubTree((IN) null, treeLocation0.lnKey, tree_SearchType0, (long) 0, bINBoundary0, false);
      assertEquals(5324L, databaseImpl0.getEofNodeId());
  }

  //Test case number: 40
  /*
   * 6 covered goals:
   * 1 com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V: I5 Branch 75 IFNONNULL L1390 - false
   * 2 Weak Mutation 7: com.sleepycat.je.tree.Tree.<init>()V:109 - ReplaceConstant - 0 -> 1
   * 3 Weak Mutation 8: com.sleepycat.je.tree.Tree.<init>()V:110 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 433: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1390 - InsertUnaryOp Negation
   * 5 Weak Mutation 435: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1390 - ReplaceComparisonOperator != -> ==
   * 6 Weak Mutation 436: com.sleepycat.je.tree.Tree.searchDeletableSubTree(Lcom/sleepycat/je/tree/IN;[BLjava/util/ArrayList;)V:1390 - ReplaceComparisonOperator != null -> = null
   */
  @Test
  public void test40()  throws Throwable  {
      Tree tree0 = new Tree();
      ArrayList<TreeWalkerStatsAccumulator> arrayList0 = new ArrayList<TreeWalkerStatsAccumulator>();
      // Undeclared exception!
      try {
        tree0.searchDeletableSubTree((IN) null, (byte[]) null, (ArrayList) arrayList0);
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
      }
  }
}
