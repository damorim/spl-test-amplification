/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.tree.BIN;
import com.sleepycat.je.tree.ChildReference;
import com.sleepycat.je.tree.DIN;
import com.sleepycat.je.tree.IN;
import com.sleepycat.je.tree.MapLN;
import com.sleepycat.je.tree.Node;

@RunWith(EvoSuiteRunner.class)
public class TestIN_2 {


  //Test case number: 2
  /*
   * 31 covered goals:
   * 1 Weak Mutation 87: com.sleepycat.je.tree.IN.compareTo(Ljava/lang/Object;)I:177 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 89: com.sleepycat.je.tree.IN.compareTo(Ljava/lang/Object;)I:178 - ReplaceConstant - -1 -> 1
   * 3 Weak Mutation 88: com.sleepycat.je.tree.IN.compareTo(Ljava/lang/Object;)I:178 - ReplaceConstant - -1 -> 0
   * 4 Weak Mutation 90: com.sleepycat.je.tree.IN.compareTo(Ljava/lang/Object;)I:178 - ReplaceConstant - -1 -> -2
   * 5 com.sleepycat.je.tree.IN.compareTo(Ljava/lang/Object;)I: I30 Branch 5 IFGE L177 - false
   * 6 Weak Mutation 55: com.sleepycat.je.tree.IN.getEqualityKey()J:154 - InsertUnaryOp IINC 1
   * 7 Weak Mutation 54: com.sleepycat.je.tree.IN.getEqualityKey()J:154 - InsertUnaryOp Negation
   * 8 Weak Mutation 53: com.sleepycat.je.tree.IN.getEqualityKey()J:153 - DeleteStatement: identityHashCode(Ljava/lang/Object;)I
   * 9 Weak Mutation 59: com.sleepycat.je.tree.IN.getEqualityKey()J:154 - ReplaceConstant - 32 -> -1
   * 10 Weak Mutation 58: com.sleepycat.je.tree.IN.getEqualityKey()J:154 - ReplaceConstant - 32 -> 1
   * 11 Weak Mutation 57: com.sleepycat.je.tree.IN.getEqualityKey()J:154 - ReplaceConstant - 32 -> 0
   * 12 Weak Mutation 56: com.sleepycat.je.tree.IN.getEqualityKey()J:154 - InsertUnaryOp IINC -1
   * 13 Weak Mutation 63: com.sleepycat.je.tree.IN.getEqualityKey()J:154 - ReplaceBitwiseOperator << -> >>
   * 14 Weak Mutation 62: com.sleepycat.je.tree.IN.getEqualityKey()J:154 - ReplaceBitwiseOperator << -> >>>
   * 15 Weak Mutation 61: com.sleepycat.je.tree.IN.getEqualityKey()J:154 - ReplaceConstant - 32 -> 33
   * 16 Weak Mutation 60: com.sleepycat.je.tree.IN.getEqualityKey()J:154 - ReplaceConstant - 32 -> 31
   * 17 Weak Mutation 69: com.sleepycat.je.tree.IN.getEqualityKey()J:155 - InsertUnaryOp Negation
   * 18 Weak Mutation 70: com.sleepycat.je.tree.IN.getEqualityKey()J:155 - DeleteStatement: getNodeId()J
   * 19 Weak Mutation 71: com.sleepycat.je.tree.IN.getEqualityKey()J:155 - ReplaceBitwiseOperator ^ -> &
   * 20 Weak Mutation 64: com.sleepycat.je.tree.IN.getEqualityKey()J:154 - InsertUnaryOp Negation
   * 21 Weak Mutation 65: com.sleepycat.je.tree.IN.getEqualityKey()J:154 - InsertUnaryOp IINC 1
   * 22 Weak Mutation 66: com.sleepycat.je.tree.IN.getEqualityKey()J:154 - InsertUnaryOp IINC -1
   * 23 Weak Mutation 67: com.sleepycat.je.tree.IN.getEqualityKey()J:154 - ReplaceBitwiseOperator | -> &
   * 24 Weak Mutation 84: com.sleepycat.je.tree.IN.compareTo(Ljava/lang/Object;)I:177 - DeleteStatement: longSub(JJ)I
   * 25 Weak Mutation 81: com.sleepycat.je.tree.IN.compareTo(Ljava/lang/Object;)I:171 - ReplaceComparisonOperator != null -> = null
   * 26 Weak Mutation 83: com.sleepycat.je.tree.IN.compareTo(Ljava/lang/Object;)I:177 - InsertUnaryOp Negation
   * 27 Weak Mutation 82: com.sleepycat.je.tree.IN.compareTo(Ljava/lang/Object;)I:177 - InsertUnaryOp Negation
   * 28 Weak Mutation 87: com.sleepycat.je.tree.IN.compareTo(Ljava/lang/Object;)I:177 - ReplaceComparisonOperator >= -> -1
   * 29 Weak Mutation 89: com.sleepycat.je.tree.IN.compareTo(Ljava/lang/Object;)I:178 - ReplaceConstant - -1 -> 1
   * 30 Weak Mutation 88: com.sleepycat.je.tree.IN.compareTo(Ljava/lang/Object;)I:178 - ReplaceConstant - -1 -> 0
   * 31 Weak Mutation 90: com.sleepycat.je.tree.IN.compareTo(Ljava/lang/Object;)I:178 - ReplaceConstant - -1 -> -2
   */
  @Test
  public void test2()  throws Throwable  {
      BIN bIN0 = new BIN();
      assertNotNull(bIN0);
      
      bIN0.containsDuplicates();
      bIN0.getMemorySizeIncludedByParent();
      bIN0.setProhibitNextDelta();
      IN iN0 = new IN();
      int int0 = bIN0.compareTo((Object) iN0);
      assertEquals(102260L, iN0.getNextNodeId());
      assertEquals(1, int0);
  }
}
