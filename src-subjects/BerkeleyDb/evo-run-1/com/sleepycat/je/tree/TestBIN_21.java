/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.CursorImpl;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.tree.BIN;
import com.sleepycat.je.tree.DBIN;
import com.sleepycat.je.tree.IN;
import com.sleepycat.je.tree.Node;
import com.sleepycat.je.tree.SearchResult;

@RunWith(EvoSuiteRunner.class)
public class TestBIN_21 {


  //Test case number: 21
  /*
   * 25 covered goals:
   * 1 Weak Mutation 220: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - ReplaceArithmeticOperator - -> %
   * 2 Weak Mutation 221: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - ReplaceArithmeticOperator - -> /
   * 3 Weak Mutation 216: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - InsertUnaryOp Negation
   * 4 Weak Mutation 217: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - InsertUnaryOp IINC 1
   * 5 Weak Mutation 218: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - InsertUnaryOp IINC -1
   * 6 Weak Mutation 213: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - InsertUnaryOp Negation
   * 7 Weak Mutation 214: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - InsertUnaryOp IINC 1
   * 8 Weak Mutation 215: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - InsertUnaryOp IINC -1
   * 9 Weak Mutation 223: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:323 - DeleteField: cursorSetLcom/sleepycat/je/utilint/TinyHashSet;
   * 10 Weak Mutation 224: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:323 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 11 Weak Mutation 226: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:324 - ReplaceComparisonOperator == -> !=
   * 12 Weak Mutation 225: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:324 - DeleteStatement: hasNext()Z
   * 13 com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V: I16 Branch 19 IFEQ L324 - true
   * 14 Weak Mutation 220: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - ReplaceArithmeticOperator - -> %
   * 15 Weak Mutation 221: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - ReplaceArithmeticOperator - -> /
   * 16 Weak Mutation 223: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:323 - DeleteField: cursorSetLcom/sleepycat/je/utilint/TinyHashSet;
   * 17 Weak Mutation 216: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - InsertUnaryOp Negation
   * 18 Weak Mutation 217: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - InsertUnaryOp IINC 1
   * 19 Weak Mutation 218: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - InsertUnaryOp IINC -1
   * 20 Weak Mutation 213: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - InsertUnaryOp Negation
   * 21 Weak Mutation 214: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - InsertUnaryOp IINC 1
   * 22 Weak Mutation 215: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:322 - InsertUnaryOp IINC -1
   * 23 Weak Mutation 226: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:324 - ReplaceComparisonOperator == -> !=
   * 24 Weak Mutation 225: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:324 - DeleteStatement: hasNext()Z
   * 25 Weak Mutation 224: com.sleepycat.je.tree.BIN.adjustCursors(Lcom/sleepycat/je/tree/IN;II)V:323 - DeleteStatement: iterator()Ljava/util/Iterator;
   */
  @Test
  public void test21()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.adjustCursors((IN) bIN0, 0, (int) (byte)0);
      assertEquals(12221L, bIN0.getNextNodeId());
      assertEquals(12221L, bIN0.getLastId());
  }
}
