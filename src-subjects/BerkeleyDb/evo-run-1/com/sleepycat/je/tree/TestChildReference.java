/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.tree.ChildReference;
import com.sleepycat.je.tree.DIN;
import com.sleepycat.je.tree.FileSummaryLN;
import com.sleepycat.je.tree.IN;
import com.sleepycat.je.tree.Node;
import java.io.StringWriter;
import java.nio.ByteBuffer;

@RunWith(EvoSuiteRunner.class)
public class TestChildReference {


  //Test case number: 0
  /*
   * 15 covered goals:
   * 1 Weak Mutation 70: com.sleepycat.je.tree.ChildReference.getTarget()Lcom/sleepycat/je/tree/Node;:135 - DeleteField: targetLcom/sleepycat/je/tree/Node;
   * 2 com.sleepycat.je.tree.ChildReference.setTarget(Lcom/sleepycat/je/tree/Node;)V: root-Branch
   * 3 com.sleepycat.je.tree.ChildReference.getTarget()Lcom/sleepycat/je/tree/Node;: root-Branch
   * 4 Weak Mutation 0: com.sleepycat.je.tree.ChildReference.<init>()V:33 - DeleteField: EMPTY_KEY[B
   * 5 Weak Mutation 1: com.sleepycat.je.tree.ChildReference.<init>()V:33 - ReplaceConstant - -1 -> 0
   * 6 Weak Mutation 2: com.sleepycat.je.tree.ChildReference.<init>()V:33 - ReplaceConstant - -1 -> 1
   * 7 Weak Mutation 3: com.sleepycat.je.tree.ChildReference.<init>()V:33 - ReplaceConstant - -1 -> -2
   * 8 Weak Mutation 4: com.sleepycat.je.tree.ChildReference.<init>()V:33 - ReplaceConstant - 0 -> 1
   * 9 Weak Mutation 21: com.sleepycat.je.tree.ChildReference.init(Lcom/sleepycat/je/tree/Node;[BJI)V:54 - InsertUnaryOp Negation of state
   * 10 Weak Mutation 20: com.sleepycat.je.tree.ChildReference.init(Lcom/sleepycat/je/tree/Node;[BJI)V:53 - InsertUnaryOp Negation of lsn
   * 11 Weak Mutation 23: com.sleepycat.je.tree.ChildReference.init(Lcom/sleepycat/je/tree/Node;[BJI)V:54 - InsertUnaryOp IINC -1 state
   * 12 Weak Mutation 22: com.sleepycat.je.tree.ChildReference.init(Lcom/sleepycat/je/tree/Node;[BJI)V:54 - InsertUnaryOp IINC 1 state
   * 13 Weak Mutation 70: com.sleepycat.je.tree.ChildReference.getTarget()Lcom/sleepycat/je/tree/Node;:135 - DeleteField: targetLcom/sleepycat/je/tree/Node;
   * 14 com.sleepycat.je.tree.ChildReference.<init>()V: root-Branch
   * 15 com.sleepycat.je.tree.ChildReference.init(Lcom/sleepycat/je/tree/Node;[BJI)V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      DIN dIN0 = new DIN();
      childReference0.setTarget((Node) dIN0);
      DIN dIN1 = (DIN)childReference0.getTarget();
      assertEquals("<lsn/>\n<key v=\"\"/>\n<din>\n  <dupkey></dupkey>\n    <lsn/>\n    <key v=\"\"/>\n    <target/>\n    <knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/><dirty val=\"false\"/>\n  <node>0</node>\n  <idkey><key v=\"\"/></idkey>\n  <dirty val=\"false\"/>\n  <generation val=\"0\"/>\n  <level val=\"0\"/>\n  <isRoot val=\"false\"/>\n  <entries nEntries=\"0\">\n  </entries>\n</din>\n<knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/><dirty val=\"false\"/>", childReference0.toString());
      assertEquals(6725L, dIN1.getLastId());
  }

  //Test case number: 1
  /*
   * 11 covered goals:
   * 1 Weak Mutation 5: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V:40 - InsertUnaryOp Negation of lsn
   * 2 Weak Mutation 6: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V:40 - ReplaceConstant - 2 -> 0
   * 3 Weak Mutation 7: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V:40 - ReplaceConstant - 2 -> 1
   * 4 Weak Mutation 8: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V:40 - ReplaceConstant - 2 -> -1
   * 5 Weak Mutation 9: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V:40 - ReplaceConstant - 2 -> 3
   * 6 com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V: root-Branch
   * 7 Weak Mutation 5: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V:40 - InsertUnaryOp Negation of lsn
   * 8 Weak Mutation 6: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V:40 - ReplaceConstant - 2 -> 0
   * 9 Weak Mutation 7: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V:40 - ReplaceConstant - 2 -> 1
   * 10 Weak Mutation 8: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V:40 - ReplaceConstant - 2 -> -1
   * 11 Weak Mutation 9: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V:40 - ReplaceConstant - 2 -> 3
   */
  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (long) (-1));
      assertEquals("<lsn/>\n<key v=\"0 0 0 0 0 0 0 \"/>\n<target/>\n<knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/><dirty val=\"true\"/>", childReference0.toString());
  }

  //Test case number: 2
  /*
   * 15 covered goals:
   * 1 Weak Mutation 33: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:93 - DeleteField: targetLcom/sleepycat/je/tree/Node;
   * 2 com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;: I4 Branch 2 IFNONNULL L93 - true
   * 3 Weak Mutation 10: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - InsertUnaryOp Negation of lsn
   * 4 Weak Mutation 11: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - InsertUnaryOp Negation of existingState
   * 5 Weak Mutation 12: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - InsertUnaryOp IINC 1 existingState
   * 6 Weak Mutation 13: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - InsertUnaryOp IINC -1 existingState
   * 7 Weak Mutation 14: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - ReplaceConstant - 2 -> 0
   * 8 Weak Mutation 15: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - ReplaceConstant - 2 -> 1
   * 9 Weak Mutation 17: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - ReplaceConstant - 2 -> 3
   * 10 Weak Mutation 16: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - ReplaceConstant - 2 -> -1
   * 11 Weak Mutation 19: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - ReplaceBitwiseOperator | -> ^
   * 12 Weak Mutation 18: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - ReplaceBitwiseOperator | -> &
   * 13 Weak Mutation 34: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:93 - ReplaceComparisonOperator != null -> = null
   * 14 Weak Mutation 33: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:93 - DeleteField: targetLcom/sleepycat/je/tree/Node;
   * 15 com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference((Node) dIN0, byteArray0, (long) 1996, (byte)22);
      childReference0.fetchTarget((DatabaseImpl) null, (IN) dIN0);
      assertEquals(6758L, dIN0.getLastId());
      assertEquals(6758L, dIN0.getNextNodeId());
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 Weak Mutation 24: com.sleepycat.je.tree.ChildReference.getKey()[B:61 - DeleteField: key[B
   * 2 com.sleepycat.je.tree.ChildReference.getKey()[B: root-Branch
   * 3 Weak Mutation 24: com.sleepycat.je.tree.ChildReference.getKey()[B:61 - DeleteField: key[B
   */
  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (long) (byte)101, (byte)101);
      byte[] byteArray1 = childReference0.getKey();
      assertNotNull(byteArray1);
      assertEquals("<DbLsn val=\"0x0/0x65\"/>\n<key v=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \"/>\n<target/>\n<knownDeleted val=\"true\"/><pendingDeleted val=\"false\"/><dirty val=\"true\"/>", childReference0.toString());
  }

  //Test case number: 4
  /*
   * 17 covered goals:
   * 1 Weak Mutation 25: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - InsertUnaryOp Negation
   * 2 Weak Mutation 27: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - ReplaceConstant - 2 -> 0
   * 3 Weak Mutation 26: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - DeleteField: stateB
   * 4 Weak Mutation 29: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - ReplaceConstant - 2 -> -1
   * 5 Weak Mutation 28: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - ReplaceConstant - 2 -> 1
   * 6 Weak Mutation 31: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - ReplaceBitwiseOperator | -> &
   * 7 Weak Mutation 30: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - ReplaceConstant - 2 -> 3
   * 8 Weak Mutation 32: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - ReplaceBitwiseOperator | -> ^
   * 9 com.sleepycat.je.tree.ChildReference.setKey([B)V: root-Branch
   * 10 Weak Mutation 25: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - InsertUnaryOp Negation
   * 11 Weak Mutation 27: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - ReplaceConstant - 2 -> 0
   * 12 Weak Mutation 26: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - DeleteField: stateB
   * 13 Weak Mutation 29: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - ReplaceConstant - 2 -> -1
   * 14 Weak Mutation 28: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - ReplaceConstant - 2 -> 1
   * 15 Weak Mutation 31: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - ReplaceBitwiseOperator | -> &
   * 16 Weak Mutation 30: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - ReplaceConstant - 2 -> 3
   * 17 Weak Mutation 32: com.sleepycat.je.tree.ChildReference.setKey([B)V:69 - ReplaceBitwiseOperator | -> ^
   */
  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (long) (byte)76, (byte)76);
      byte[] byteArray1 = new byte[6];
      childReference0.setKey(byteArray1);
      assertEquals("<DbLsn val=\"0x0/0x4c\"/>\n<key v=\"0 0 0 0 0 0 \"/>\n<target/>\n<knownDeleted val=\"false\"/><pendingDeleted val=\"true\"/><dirty val=\"true\"/>", childReference0.toString());
  }

  //Test case number: 5
  /*
   * 13 covered goals:
   * 1 Weak Mutation 41: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - ReplaceComparisonOperator != -> <
   * 2 Weak Mutation 52: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:101 - DeleteStatement: getDbEnvironment()Lcom/sleepycat/je/dbi/EnvironmentImpl;
   * 3 Weak Mutation 53: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:102 - DeleteStatement: getLogManager()Lcom/sleepycat/je/log/LogManager;
   * 4 com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;: I11 Branch 3 IFNE L94 - true
   * 5 Weak Mutation 35: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - InsertUnaryOp Negation
   * 6 Weak Mutation 38: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - ReplaceConstant - -1 -> 1
   * 7 Weak Mutation 39: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - ReplaceConstant - -1 -> -2
   * 8 Weak Mutation 37: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - ReplaceConstant - -1 -> 0
   * 9 Weak Mutation 40: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - DeleteStatement: longSub(JJ)I
   * 10 Weak Mutation 41: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - ReplaceComparisonOperator != -> <
   * 11 Weak Mutation 53: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:102 - DeleteStatement: getLogManager()Lcom/sleepycat/je/log/LogManager;
   * 12 Weak Mutation 52: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:101 - DeleteStatement: getDbEnvironment()Lcom/sleepycat/je/dbi/EnvironmentImpl;
   * 13 com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;: I4 Branch 2 IFNONNULL L93 - false
   */
  @Test
  public void test5()  throws Throwable  {
      ChildReference childReference0 = new ChildReference((Node) null, (byte[]) null, (long) 0, (byte)63);
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      try {
        childReference0.fetchTarget(databaseImpl0, (IN) null);
        fail("Expecting exception: DatabaseException");
      } catch(DatabaseException e) {
        /*
         * fetchTarget of 0x0/0x0 state=63 java.lang.NullPointerException
         */
      }
  }

  //Test case number: 6
  /*
   * 56 covered goals:
   * 1 Weak Mutation 50: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:97 - DeleteField: stateB
   * 2 Weak Mutation 97: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - DeleteField: stateB
   * 3 Weak Mutation 133: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:208 - InsertUnaryOp Negation of migrate
   * 4 Weak Mutation 134: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:208 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 137: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceConstant - 4 -> 0
   * 6 Weak Mutation 139: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceConstant - 4 -> -1
   * 7 Weak Mutation 138: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceConstant - 4 -> 1
   * 8 Weak Mutation 141: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceConstant - 4 -> 5
   * 9 Weak Mutation 140: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceConstant - 4 -> 3
   * 10 Weak Mutation 142: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceBitwiseOperator | -> &
   * 11 Weak Mutation 135: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - InsertUnaryOp Negation
   * 12 com.sleepycat.je.tree.ChildReference.setMigrate(Z)V: I3 Branch 11 IFEQ L208 - false
   * 13 Weak Mutation 34: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:93 - ReplaceComparisonOperator != null -> = null
   * 14 Weak Mutation 35: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - InsertUnaryOp Negation
   * 15 Weak Mutation 38: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - ReplaceConstant - -1 -> 1
   * 16 Weak Mutation 39: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - ReplaceConstant - -1 -> -2
   * 17 Weak Mutation 36: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - DeleteField: lsnJ
   * 18 Weak Mutation 37: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - ReplaceConstant - -1 -> 0
   * 19 Weak Mutation 43: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - ReplaceComparisonOperator != -> -1
   * 20 Weak Mutation 40: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - DeleteStatement: longSub(JJ)I
   * 21 Weak Mutation 46: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:97 - ReplaceConstant - NULL_LSN without KnownDeleted -> 
   * 22 Weak Mutation 47: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:97 - InsertUnaryOp Negation
   * 23 Weak Mutation 44: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:95 - DeleteStatement: isKnownDeleted()Z
   * 24 Weak Mutation 45: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:95 - ReplaceComparisonOperator != -> ==
   * 25 Weak Mutation 51: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:96 - DeleteStatement: makeFetchErrorMsg(Ljava/lang/String;Lcom/sleepycat/je/tree/IN;JB)Ljava/lang/String;
   * 26 Weak Mutation 49: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:97 - InsertUnaryOp Negation
   * 27 Weak Mutation 48: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:97 - DeleteField: lsnJ
   * 28 Weak Mutation 36: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - DeleteField: lsnJ
   * 29 Weak Mutation 43: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:94 - ReplaceComparisonOperator != -> -1
   * 30 Weak Mutation 46: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:97 - ReplaceConstant - NULL_LSN without KnownDeleted -> 
   * 31 Weak Mutation 47: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:97 - InsertUnaryOp Negation
   * 32 Weak Mutation 44: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:95 - DeleteStatement: isKnownDeleted()Z
   * 33 Weak Mutation 45: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:95 - ReplaceComparisonOperator != -> ==
   * 34 Weak Mutation 51: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:96 - DeleteStatement: makeFetchErrorMsg(Ljava/lang/String;Lcom/sleepycat/je/tree/IN;JB)Ljava/lang/String;
   * 35 Weak Mutation 50: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:97 - DeleteField: stateB
   * 36 Weak Mutation 49: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:97 - InsertUnaryOp Negation
   * 37 Weak Mutation 48: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:97 - DeleteField: lsnJ
   * 38 Weak Mutation 103: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceComparisonOperator == -> -2
   * 39 Weak Mutation 100: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceBitwiseOperator & -> ^
   * 40 Weak Mutation 98: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceConstant - 1 -> 0
   * 41 Weak Mutation 99: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceBitwiseOperator & -> |
   * 42 Weak Mutation 96: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - InsertUnaryOp Negation
   * 43 Weak Mutation 97: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - DeleteField: stateB
   * 44 Weak Mutation 105: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceConstant - 0 -> 1
   * 45 Weak Mutation 137: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceConstant - 4 -> 0
   * 46 Weak Mutation 139: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceConstant - 4 -> -1
   * 47 Weak Mutation 138: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceConstant - 4 -> 1
   * 48 Weak Mutation 141: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceConstant - 4 -> 5
   * 49 Weak Mutation 140: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceConstant - 4 -> 3
   * 50 Weak Mutation 142: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceBitwiseOperator | -> &
   * 51 Weak Mutation 133: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:208 - InsertUnaryOp Negation of migrate
   * 52 Weak Mutation 135: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - InsertUnaryOp Negation
   * 53 Weak Mutation 134: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:208 - ReplaceComparisonOperator == -> !=
   * 54 com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z: I6 Branch 8 IFEQ L187 - true
   * 55 com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;: I11 Branch 3 IFNE L94 - false
   * 56 com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;: I16 Branch 4 IFNE L95 - false
   */
  @Test
  public void test6()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference();
      childReference0.setMigrate(true);
      DIN dIN0 = new DIN(databaseImpl0, byteArray0, (int) (byte)125, byteArray0, childReference0, (int) (byte)0);
      try {
        childReference0.fetchTarget(databaseImpl0, (IN) dIN0);
        fail("Expecting exception: DatabaseException");
      } catch(DatabaseException e) {
        /*
         * fetchTarget of null lsn IN=7542 state=4 NULL_LSN without KnownDeleted
         */
      }
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 Weak Mutation 68: com.sleepycat.je.tree.ChildReference.getState()B:128 - InsertUnaryOp Negation
   * 2 Weak Mutation 69: com.sleepycat.je.tree.ChildReference.getState()B:128 - DeleteField: stateB
   * 3 com.sleepycat.je.tree.ChildReference.getState()B: root-Branch
   * 4 Weak Mutation 68: com.sleepycat.je.tree.ChildReference.getState()B:128 - InsertUnaryOp Negation
   * 5 Weak Mutation 69: com.sleepycat.je.tree.ChildReference.getState()B:128 - DeleteField: stateB
   */
  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (long) (byte)101, (byte)101);
      byte byte0 = childReference0.getState();
      assertEquals((byte)103, byte0);
      assertEquals(101L, childReference0.getLsn());
  }

  //Test case number: 8
  /*
   * 5 covered goals:
   * 1 Weak Mutation 71: com.sleepycat.je.tree.ChildReference.getLsn()J:161 - InsertUnaryOp Negation
   * 2 Weak Mutation 72: com.sleepycat.je.tree.ChildReference.getLsn()J:161 - DeleteField: lsnJ
   * 3 com.sleepycat.je.tree.ChildReference.getLsn()J: root-Branch
   * 4 Weak Mutation 71: com.sleepycat.je.tree.ChildReference.getLsn()J:161 - InsertUnaryOp Negation
   * 5 Weak Mutation 72: com.sleepycat.je.tree.ChildReference.getLsn()J:161 - DeleteField: lsnJ
   */
  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (long) (byte)101, (byte)101);
      long long0 = childReference0.getLsn();
      assertEquals(101L, long0);
      assertEquals("<DbLsn val=\"0x0/0x65\"/>\n<key v=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \"/>\n<target/>\n<knownDeleted val=\"true\"/><pendingDeleted val=\"false\"/><dirty val=\"true\"/>", childReference0.toString());
  }

  //Test case number: 9
  /*
   * 19 covered goals:
   * 1 Weak Mutation 145: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - DeleteField: stateB
   * 2 Weak Mutation 76: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - ReplaceConstant - 2 -> 0
   * 3 Weak Mutation 77: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - ReplaceConstant - 2 -> 1
   * 4 Weak Mutation 78: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - ReplaceConstant - 2 -> -1
   * 5 Weak Mutation 79: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - ReplaceConstant - 2 -> 3
   * 6 Weak Mutation 73: com.sleepycat.je.tree.ChildReference.setLsn(J)V:171 - InsertUnaryOp Negation of lsn
   * 7 Weak Mutation 74: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - InsertUnaryOp Negation
   * 8 Weak Mutation 80: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - ReplaceBitwiseOperator | -> &
   * 9 Weak Mutation 152: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - ReplaceBitwiseOperator & -> ^
   * 10 Weak Mutation 144: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - InsertUnaryOp Negation
   * 11 Weak Mutation 145: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - DeleteField: stateB
   * 12 Weak Mutation 146: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - ReplaceConstant - -5 -> 0
   * 13 Weak Mutation 147: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - ReplaceConstant - -5 -> 1
   * 14 Weak Mutation 148: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - ReplaceConstant - -5 -> -1
   * 15 Weak Mutation 149: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - ReplaceConstant - -5 -> -6
   * 16 Weak Mutation 150: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - ReplaceConstant - -5 -> -4
   * 17 Weak Mutation 151: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - ReplaceBitwiseOperator & -> |
   * 18 com.sleepycat.je.tree.ChildReference.setLsn(J)V: root-Branch
   * 19 com.sleepycat.je.tree.ChildReference.setMigrate(Z)V: I3 Branch 11 IFEQ L208 - true
   */
  @Test
  public void test9()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.setLsn(51L);
      childReference0.setMigrate(false);
      assertEquals(51L, childReference0.getLsn());
      assertEquals(2, childReference0.getState());
  }

  //Test case number: 10
  /*
   * 4 covered goals:
   * 1 Weak Mutation 75: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - DeleteField: stateB
   * 2 Weak Mutation 81: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - ReplaceBitwiseOperator | -> ^
   * 3 Weak Mutation 75: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - DeleteField: stateB
   * 4 Weak Mutation 81: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - ReplaceBitwiseOperator | -> ^
   */
  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (long) (byte)101, (byte)101);
      childReference0.setLsn((long) (byte)101);
      assertEquals("<DbLsn val=\"0x0/0x65\"/>\n<key v=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \"/>\n<target/>\n<knownDeleted val=\"true\"/><pendingDeleted val=\"false\"/><dirty val=\"true\"/>", childReference0.toString());
  }

  //Test case number: 11
  /*
   * 60 covered goals:
   * 1 Weak Mutation 85: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 8 -> 1
   * 2 Weak Mutation 84: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 8 -> 0
   * 3 Weak Mutation 87: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 8 -> 7
   * 4 Weak Mutation 86: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 8 -> -1
   * 5 Weak Mutation 82: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - InsertUnaryOp Negation
   * 6 Weak Mutation 93: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceComparisonOperator == -> -2
   * 7 Weak Mutation 95: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 0 -> 1
   * 8 Weak Mutation 89: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceBitwiseOperator & -> |
   * 9 Weak Mutation 88: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 8 -> 9
   * 10 Weak Mutation 90: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceBitwiseOperator & -> ^
   * 11 Weak Mutation 207: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:248 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 12 Weak Mutation 206: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:248 - ReplaceConstant - <ref knownDeleted=" -> 
   * 13 Weak Mutation 208: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:248 - DeleteStatement: isKnownDeleted()Z
   * 14 Weak Mutation 209: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:248 - DeleteStatement: append(Z)Ljava/lang/StringBuffer;
   * 15 Weak Mutation 212: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:249 - DeleteStatement: append(Z)Ljava/lang/StringBuffer;
   * 16 Weak Mutation 210: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:249 - ReplaceConstant - " pendingDeleted=" -> 
   * 17 Weak Mutation 211: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:249 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 18 Weak Mutation 213: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:250 - ReplaceConstant - "> -> 
   * 19 Weak Mutation 214: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:250 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 20 Weak Mutation 216: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:251 - ReplaceConstant - 0 -> 1
   * 21 Weak Mutation 217: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:251 - DeleteStatement: dumpString([BI)Ljava/lang/String;
   * 22 Weak Mutation 218: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:251 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 23 Weak Mutation 215: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:251 - DeleteField: key[B
   * 24 Weak Mutation 220: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:252 - DeleteField: lsnJ
   * 25 Weak Mutation 221: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:252 - DeleteStatement: toString(J)Ljava/lang/String;
   * 26 Weak Mutation 222: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:252 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 27 Weak Mutation 219: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:252 - InsertUnaryOp Negation
   * 28 Weak Mutation 223: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:253 - ReplaceConstant - </ref> -> 
   * 29 Weak Mutation 224: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:253 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 30 com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V: root-Branch
   * 31 com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z: I6 Branch 7 IFEQ L180 - true
   * 32 Weak Mutation 85: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 8 -> 1
   * 33 Weak Mutation 84: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 8 -> 0
   * 34 Weak Mutation 87: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 8 -> 7
   * 35 Weak Mutation 86: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 8 -> -1
   * 36 Weak Mutation 82: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - InsertUnaryOp Negation
   * 37 Weak Mutation 93: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceComparisonOperator == -> -2
   * 38 Weak Mutation 95: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 0 -> 1
   * 39 Weak Mutation 89: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceBitwiseOperator & -> |
   * 40 Weak Mutation 88: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 8 -> 9
   * 41 Weak Mutation 90: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceBitwiseOperator & -> ^
   * 42 Weak Mutation 207: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:248 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 43 Weak Mutation 206: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:248 - ReplaceConstant - <ref knownDeleted=" -> 
   * 44 Weak Mutation 220: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:252 - DeleteField: lsnJ
   * 45 Weak Mutation 221: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:252 - DeleteStatement: toString(J)Ljava/lang/String;
   * 46 Weak Mutation 222: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:252 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 47 Weak Mutation 223: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:253 - ReplaceConstant - </ref> -> 
   * 48 Weak Mutation 216: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:251 - ReplaceConstant - 0 -> 1
   * 49 Weak Mutation 217: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:251 - DeleteStatement: dumpString([BI)Ljava/lang/String;
   * 50 Weak Mutation 218: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:251 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 51 Weak Mutation 219: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:252 - InsertUnaryOp Negation
   * 52 Weak Mutation 212: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:249 - DeleteStatement: append(Z)Ljava/lang/StringBuffer;
   * 53 Weak Mutation 213: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:250 - ReplaceConstant - "> -> 
   * 54 Weak Mutation 214: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:250 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 55 Weak Mutation 215: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:251 - DeleteField: key[B
   * 56 Weak Mutation 208: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:248 - DeleteStatement: isKnownDeleted()Z
   * 57 Weak Mutation 209: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:248 - DeleteStatement: append(Z)Ljava/lang/StringBuffer;
   * 58 Weak Mutation 210: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:249 - ReplaceConstant - " pendingDeleted=" -> 
   * 59 Weak Mutation 211: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:249 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 60 Weak Mutation 224: com.sleepycat.je.tree.ChildReference.dumpLog(Ljava/lang/StringBuffer;Z)V:253 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   */
  @Test
  public void test11()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      childReference0.dumpLog(stringBuffer0, true);
      assertEquals(142, stringBuffer0.capacity());
      assertEquals("<ref knownDeleted=\"false\" pendingDeleted=\"false\"><key v=\"\"/><DbLsn val=\"0xffffffff/0xffffffff\"/></ref>", stringBuffer0.toString());
  }

  //Test case number: 12
  /*
   * 105 covered goals:
   * 1 Weak Mutation 83: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - DeleteField: stateB
   * 2 Weak Mutation 110: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 2 -> -1
   * 3 Weak Mutation 111: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 2 -> 3
   * 4 Weak Mutation 108: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 2 -> 0
   * 5 Weak Mutation 109: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 2 -> 1
   * 6 Weak Mutation 106: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - InsertUnaryOp Negation
   * 7 Weak Mutation 107: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - DeleteField: stateB
   * 8 Weak Mutation 118: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 0 -> 1
   * 9 Weak Mutation 116: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceComparisonOperator == -> -2
   * 10 Weak Mutation 113: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceBitwiseOperator & -> ^
   * 11 Weak Mutation 112: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceBitwiseOperator & -> |
   * 12 Weak Mutation 236: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceComparisonOperator != -> -1
   * 13 Weak Mutation 233: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - DeleteStatement: longSub(JJ)I
   * 14 Weak Mutation 232: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceConstant - -1 -> -2
   * 15 Weak Mutation 231: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceConstant - -1 -> 1
   * 16 Weak Mutation 230: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceConstant - -1 -> 0
   * 17 Weak Mutation 229: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - DeleteField: lsnJ
   * 18 Weak Mutation 228: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - InsertUnaryOp Negation
   * 19 Weak Mutation 239: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:273 - InsertUnaryOp IINC -1 nspaces
   * 20 Weak Mutation 238: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:273 - InsertUnaryOp IINC 1 nspaces
   * 21 Weak Mutation 237: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:273 - InsertUnaryOp Negation of nspaces
   * 22 Weak Mutation 240: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:273 - DeleteStatement: indent(I)Ljava/lang/String;
   * 23 Weak Mutation 241: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:273 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 24 Weak Mutation 242: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:274 - ReplaceConstant - <lsn/> -> 
   * 25 Weak Mutation 243: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:274 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 26 Weak Mutation 254: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - ReplaceConstant - 10 -> 9
   * 27 Weak Mutation 255: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - ReplaceConstant - 10 -> 11
   * 28 Weak Mutation 252: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - ReplaceConstant - 10 -> 1
   * 29 Weak Mutation 253: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - ReplaceConstant - 10 -> -1
   * 30 Weak Mutation 251: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - ReplaceConstant - 10 -> 0
   * 31 Weak Mutation 256: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 32 Weak Mutation 258: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:279 - ReplaceComparisonOperator != null -> = null
   * 33 Weak Mutation 257: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:279 - DeleteField: key[B
   * 34 Weak Mutation 266: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - DeleteField: key[B
   * 35 Weak Mutation 267: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - InsertUnaryOp Negation of nspaces
   * 36 Weak Mutation 270: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - DeleteStatement: dumpString([BI)Ljava/lang/String;
   * 37 Weak Mutation 271: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 38 Weak Mutation 268: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - InsertUnaryOp IINC 1 nspaces
   * 39 Weak Mutation 269: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - InsertUnaryOp IINC -1 nspaces
   * 40 Weak Mutation 275: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - ReplaceConstant - 10 -> 9
   * 41 Weak Mutation 274: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - ReplaceConstant - 10 -> -1
   * 42 Weak Mutation 273: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - ReplaceConstant - 10 -> 1
   * 43 Weak Mutation 272: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - ReplaceConstant - 10 -> 0
   * 44 Weak Mutation 277: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 45 Weak Mutation 276: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - ReplaceConstant - 10 -> 11
   * 46 Weak Mutation 279: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:286 - ReplaceComparisonOperator != null -> = null
   * 47 Weak Mutation 282: com.sleepycat.je.tree.ChildReference.toString()Ljava/lang/String;:303 - DeleteStatement: dumpString(IZ)Ljava/lang/String;
   * 48 Weak Mutation 281: com.sleepycat.je.tree.ChildReference.toString()Ljava/lang/String;:303 - ReplaceConstant - 0 -> 1
   * 49 Weak Mutation 280: com.sleepycat.je.tree.ChildReference.toString()Ljava/lang/String;:303 - ReplaceConstant - 0 -> 1
   * 50 com.sleepycat.je.tree.ChildReference.toString()Ljava/lang/String;: root-Branch
   * 51 com.sleepycat.je.tree.ChildReference.isDirty()Z: I6 Branch 9 IFEQ L194 - true
   * 52 com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;: I12 Branch 14 IFNE L272 - false
   * 53 com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;: I48 Branch 15 IFNONNULL L279 - true
   * 54 com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;: I84 Branch 16 IFNONNULL L286 - false
   * 55 Weak Mutation 103: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceComparisonOperator == -> -2
   * 56 Weak Mutation 105: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceConstant - 0 -> 1
   * 57 Weak Mutation 83: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - DeleteField: stateB
   * 58 Weak Mutation 110: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 2 -> -1
   * 59 Weak Mutation 111: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 2 -> 3
   * 60 Weak Mutation 108: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 2 -> 0
   * 61 Weak Mutation 109: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 2 -> 1
   * 62 Weak Mutation 106: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - InsertUnaryOp Negation
   * 63 Weak Mutation 107: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - DeleteField: stateB
   * 64 Weak Mutation 118: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 0 -> 1
   * 65 Weak Mutation 116: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceComparisonOperator == -> -2
   * 66 Weak Mutation 113: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceBitwiseOperator & -> ^
   * 67 Weak Mutation 112: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceBitwiseOperator & -> |
   * 68 Weak Mutation 239: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:273 - InsertUnaryOp IINC -1 nspaces
   * 69 Weak Mutation 238: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:273 - InsertUnaryOp IINC 1 nspaces
   * 70 Weak Mutation 237: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:273 - InsertUnaryOp Negation of nspaces
   * 71 Weak Mutation 236: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceComparisonOperator != -> -1
   * 72 Weak Mutation 233: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - DeleteStatement: longSub(JJ)I
   * 73 Weak Mutation 232: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceConstant - -1 -> -2
   * 74 Weak Mutation 231: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceConstant - -1 -> 1
   * 75 Weak Mutation 230: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceConstant - -1 -> 0
   * 76 Weak Mutation 229: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - DeleteField: lsnJ
   * 77 Weak Mutation 228: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - InsertUnaryOp Negation
   * 78 Weak Mutation 254: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - ReplaceConstant - 10 -> 9
   * 79 Weak Mutation 255: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - ReplaceConstant - 10 -> 11
   * 80 Weak Mutation 252: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - ReplaceConstant - 10 -> 1
   * 81 Weak Mutation 253: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - ReplaceConstant - 10 -> -1
   * 82 Weak Mutation 251: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - ReplaceConstant - 10 -> 0
   * 83 Weak Mutation 242: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:274 - ReplaceConstant - <lsn/> -> 
   * 84 Weak Mutation 243: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:274 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 85 Weak Mutation 240: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:273 - DeleteStatement: indent(I)Ljava/lang/String;
   * 86 Weak Mutation 241: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:273 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 87 Weak Mutation 275: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - ReplaceConstant - 10 -> 9
   * 88 Weak Mutation 274: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - ReplaceConstant - 10 -> -1
   * 89 Weak Mutation 273: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - ReplaceConstant - 10 -> 1
   * 90 Weak Mutation 272: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - ReplaceConstant - 10 -> 0
   * 91 Weak Mutation 279: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:286 - ReplaceComparisonOperator != null -> = null
   * 92 Weak Mutation 277: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 93 Weak Mutation 276: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - ReplaceConstant - 10 -> 11
   * 94 Weak Mutation 282: com.sleepycat.je.tree.ChildReference.toString()Ljava/lang/String;:303 - DeleteStatement: dumpString(IZ)Ljava/lang/String;
   * 95 Weak Mutation 281: com.sleepycat.je.tree.ChildReference.toString()Ljava/lang/String;:303 - ReplaceConstant - 0 -> 1
   * 96 Weak Mutation 280: com.sleepycat.je.tree.ChildReference.toString()Ljava/lang/String;:303 - ReplaceConstant - 0 -> 1
   * 97 Weak Mutation 258: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:279 - ReplaceComparisonOperator != null -> = null
   * 98 Weak Mutation 256: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 99 Weak Mutation 257: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:279 - DeleteField: key[B
   * 100 Weak Mutation 266: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - DeleteField: key[B
   * 101 Weak Mutation 267: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - InsertUnaryOp Negation of nspaces
   * 102 Weak Mutation 270: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - DeleteStatement: dumpString([BI)Ljava/lang/String;
   * 103 Weak Mutation 271: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 104 Weak Mutation 268: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - InsertUnaryOp IINC 1 nspaces
   * 105 Weak Mutation 269: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - InsertUnaryOp IINC -1 nspaces
   */
  @Test
  public void test12()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.setMigrate(true);
      String string0 = childReference0.toString();
      assertEquals(4, childReference0.getState());
      assertEquals("<lsn/>\n<key v=\"\"/>\n<target/>\n<knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/><dirty val=\"false\"/>", string0);
  }

  //Test case number: 13
  /*
   * 46 covered goals:
   * 1 Weak Mutation 94: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 1 -> 0
   * 2 Weak Mutation 91: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceComparisonOperator == -> >=
   * 3 Weak Mutation 101: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceComparisonOperator == -> >=
   * 4 Weak Mutation 104: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceConstant - 1 -> 0
   * 5 Weak Mutation 117: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 114: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceComparisonOperator == -> >=
   * 7 Weak Mutation 234: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceComparisonOperator != -> <
   * 8 Weak Mutation 250: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 9 Weak Mutation 248: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - InsertUnaryOp IINC -1 nspaces
   * 10 Weak Mutation 249: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - DeleteStatement: dumpString(JI)Ljava/lang/String;
   * 11 Weak Mutation 246: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - InsertUnaryOp Negation of nspaces
   * 12 Weak Mutation 247: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - InsertUnaryOp IINC 1 nspaces
   * 13 Weak Mutation 244: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - InsertUnaryOp Negation
   * 14 Weak Mutation 259: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:280 - InsertUnaryOp Negation of nspaces
   * 15 Weak Mutation 262: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:280 - DeleteStatement: indent(I)Ljava/lang/String;
   * 16 Weak Mutation 263: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:280 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 17 Weak Mutation 260: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:280 - InsertUnaryOp IINC 1 nspaces
   * 18 Weak Mutation 261: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:280 - InsertUnaryOp IINC -1 nspaces
   * 19 Weak Mutation 264: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:281 - ReplaceConstant - <key/> -> 
   * 20 Weak Mutation 265: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:281 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 21 com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z: I6 Branch 7 IFEQ L180 - false
   * 22 com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z: I6 Branch 8 IFEQ L187 - false
   * 23 com.sleepycat.je.tree.ChildReference.isDirty()Z: I6 Branch 9 IFEQ L194 - false
   * 24 com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;: I12 Branch 14 IFNE L272 - true
   * 25 com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;: I48 Branch 15 IFNONNULL L279 - false
   * 26 Weak Mutation 19: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - ReplaceBitwiseOperator | -> ^
   * 27 Weak Mutation 94: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 1 -> 0
   * 28 Weak Mutation 91: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceComparisonOperator == -> >=
   * 29 Weak Mutation 101: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceComparisonOperator == -> >=
   * 30 Weak Mutation 104: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceConstant - 1 -> 0
   * 31 Weak Mutation 117: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 1 -> 0
   * 32 Weak Mutation 114: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceComparisonOperator == -> >=
   * 33 Weak Mutation 234: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceComparisonOperator != -> <
   * 34 Weak Mutation 250: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 35 Weak Mutation 248: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - InsertUnaryOp IINC -1 nspaces
   * 36 Weak Mutation 249: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - DeleteStatement: dumpString(JI)Ljava/lang/String;
   * 37 Weak Mutation 246: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - InsertUnaryOp Negation of nspaces
   * 38 Weak Mutation 247: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - InsertUnaryOp IINC 1 nspaces
   * 39 Weak Mutation 244: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - InsertUnaryOp Negation
   * 40 Weak Mutation 259: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:280 - InsertUnaryOp Negation of nspaces
   * 41 Weak Mutation 262: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:280 - DeleteStatement: indent(I)Ljava/lang/String;
   * 42 Weak Mutation 263: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:280 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 43 Weak Mutation 260: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:280 - InsertUnaryOp IINC 1 nspaces
   * 44 Weak Mutation 261: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:280 - InsertUnaryOp IINC -1 nspaces
   * 45 Weak Mutation 264: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:281 - ReplaceConstant - <key/> -> 
   * 46 Weak Mutation 265: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:281 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   */
  @Test
  public void test13()  throws Throwable  {
      ChildReference childReference0 = new ChildReference((Node) null, (byte[]) null, (long) 0, (byte)63);
      String string0 = childReference0.toString();
      assertEquals("<DbLsn val=\"0x0/0x0\"/>\n<key/>\n<target/>\n<knownDeleted val=\"true\"/><pendingDeleted val=\"true\"/><dirty val=\"true\"/>", string0);
      assertNotNull(string0);
      assertEquals(63, childReference0.getState());
  }

  //Test case number: 14
  /*
   * 21 covered goals:
   * 1 Weak Mutation 119: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - InsertUnaryOp Negation
   * 2 Weak Mutation 127: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceBitwiseOperator & -> ^
   * 3 Weak Mutation 126: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceBitwiseOperator & -> |
   * 4 Weak Mutation 125: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 4 -> 5
   * 5 Weak Mutation 124: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 4 -> 3
   * 6 Weak Mutation 123: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 4 -> -1
   * 7 Weak Mutation 122: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 4 -> 1
   * 8 Weak Mutation 121: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 4 -> 0
   * 9 Weak Mutation 130: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceComparisonOperator == -> -2
   * 10 Weak Mutation 132: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 0 -> 1
   * 11 com.sleepycat.je.tree.ChildReference.getMigrate()Z: I6 Branch 10 IFEQ L201 - true
   * 12 Weak Mutation 119: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - InsertUnaryOp Negation
   * 13 Weak Mutation 127: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceBitwiseOperator & -> ^
   * 14 Weak Mutation 126: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceBitwiseOperator & -> |
   * 15 Weak Mutation 125: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 4 -> 5
   * 16 Weak Mutation 124: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 4 -> 3
   * 17 Weak Mutation 123: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 4 -> -1
   * 18 Weak Mutation 122: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 4 -> 1
   * 19 Weak Mutation 121: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 4 -> 0
   * 20 Weak Mutation 130: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceComparisonOperator == -> -2
   * 21 Weak Mutation 132: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test14()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      boolean boolean0 = childReference0.getMigrate();
      assertEquals("<lsn/>\n<key v=\"\"/>\n<target/>\n<knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/><dirty val=\"false\"/>", childReference0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 15
  /*
   * 15 covered goals:
   * 1 Weak Mutation 120: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - DeleteField: stateB
   * 2 Weak Mutation 128: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceComparisonOperator == -> >=
   * 3 Weak Mutation 131: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 1 -> 0
   * 4 com.sleepycat.je.tree.ChildReference.getMigrate()Z: I6 Branch 10 IFEQ L201 - false
   * 5 Weak Mutation 119: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - InsertUnaryOp Negation
   * 6 Weak Mutation 127: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceBitwiseOperator & -> ^
   * 7 Weak Mutation 126: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceBitwiseOperator & -> |
   * 8 Weak Mutation 125: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 4 -> 5
   * 9 Weak Mutation 124: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 4 -> 3
   * 10 Weak Mutation 123: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 4 -> -1
   * 11 Weak Mutation 122: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 4 -> 1
   * 12 Weak Mutation 121: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 4 -> 0
   * 13 Weak Mutation 120: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - DeleteField: stateB
   * 14 Weak Mutation 128: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceComparisonOperator == -> >=
   * 15 Weak Mutation 131: com.sleepycat.je.tree.ChildReference.getMigrate()Z:201 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (long) (byte)101, (byte)101);
      boolean boolean0 = childReference0.getMigrate();
      assertEquals("<DbLsn val=\"0x0/0x65\"/>\n<key v=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \"/>\n<target/>\n<knownDeleted val=\"true\"/><pendingDeleted val=\"false\"/><dirty val=\"true\"/>", childReference0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 11 covered goals:
   * 1 Weak Mutation 136: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - DeleteField: stateB
   * 2 Weak Mutation 143: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceBitwiseOperator | -> ^
   * 3 Weak Mutation 137: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceConstant - 4 -> 0
   * 4 Weak Mutation 139: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceConstant - 4 -> -1
   * 5 Weak Mutation 138: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceConstant - 4 -> 1
   * 6 Weak Mutation 141: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceConstant - 4 -> 5
   * 7 Weak Mutation 140: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceConstant - 4 -> 3
   * 8 Weak Mutation 142: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceBitwiseOperator | -> &
   * 9 Weak Mutation 135: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - InsertUnaryOp Negation
   * 10 Weak Mutation 136: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - DeleteField: stateB
   * 11 Weak Mutation 143: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:209 - ReplaceBitwiseOperator | -> ^
   */
  @Test
  public void test16()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.setMigrate(true);
      childReference0.setMigrate(true);
      assertEquals(4, childReference0.getState());
  }

  //Test case number: 17
  /*
   * 11 covered goals:
   * 1 Weak Mutation 152: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - ReplaceBitwiseOperator & -> ^
   * 2 Weak Mutation 144: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - InsertUnaryOp Negation
   * 3 Weak Mutation 146: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - ReplaceConstant - -5 -> 0
   * 4 Weak Mutation 147: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - ReplaceConstant - -5 -> 1
   * 5 Weak Mutation 148: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - ReplaceConstant - -5 -> -1
   * 6 Weak Mutation 149: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - ReplaceConstant - -5 -> -6
   * 7 Weak Mutation 150: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - ReplaceConstant - -5 -> -4
   * 8 Weak Mutation 151: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:211 - ReplaceBitwiseOperator & -> |
   * 9 com.sleepycat.je.tree.ChildReference.setMigrate(Z)V: I3 Branch 11 IFEQ L208 - true
   * 10 Weak Mutation 133: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:208 - InsertUnaryOp Negation of migrate
   * 11 Weak Mutation 134: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:208 - ReplaceComparisonOperator == -> !=
   */
  @Test
  public void test17()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.setMigrate(false);
      assertEquals(false, childReference0.getMigrate());
      assertEquals("<lsn/>\n<key v=\"\"/>\n<target/>\n<knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/><dirty val=\"false\"/>", childReference0.toString());
      assertEquals(false, childReference0.isKnownDeleted());
  }

  //Test case number: 18
  /*
   * 25 covered goals:
   * 1 Weak Mutation 153: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - DeleteField: key[B
   * 2 Weak Mutation 154: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - DeleteStatement: getByteArrayLogSize([B)I
   * 3 Weak Mutation 155: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - DeleteStatement: getLongLogSize()I
   * 4 Weak Mutation 156: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> -
   * 5 Weak Mutation 157: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> %
   * 6 Weak Mutation 158: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> /
   * 7 Weak Mutation 159: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> *
   * 8 Weak Mutation 163: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> /
   * 9 Weak Mutation 162: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> %
   * 10 Weak Mutation 161: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> -
   * 11 Weak Mutation 164: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> *
   * 12 Weak Mutation 160: com.sleepycat.je.tree.ChildReference.getLogSize()I:220 - ReplaceConstant - 1 -> 0
   * 13 com.sleepycat.je.tree.ChildReference.getLogSize()I: root-Branch
   * 14 Weak Mutation 153: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - DeleteField: key[B
   * 15 Weak Mutation 154: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - DeleteStatement: getByteArrayLogSize([B)I
   * 16 Weak Mutation 155: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - DeleteStatement: getLongLogSize()I
   * 17 Weak Mutation 156: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> -
   * 18 Weak Mutation 157: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> %
   * 19 Weak Mutation 158: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> /
   * 20 Weak Mutation 159: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> *
   * 21 Weak Mutation 163: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> /
   * 22 Weak Mutation 162: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> %
   * 23 Weak Mutation 161: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> -
   * 24 Weak Mutation 160: com.sleepycat.je.tree.ChildReference.getLogSize()I:220 - ReplaceConstant - 1 -> 0
   * 25 Weak Mutation 164: com.sleepycat.je.tree.ChildReference.getLogSize()I:219 - ReplaceArithmeticOperator + -> *
   */
  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (long) (byte)101, (byte)101);
      int int0 = childReference0.getLogSize();
      assertEquals(36, int0);
      assertEquals("<DbLsn val=\"0x0/0x65\"/>\n<key v=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \"/>\n<target/>\n<knownDeleted val=\"true\"/><pendingDeleted val=\"false\"/><dirty val=\"true\"/>", childReference0.toString());
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 Weak Mutation 166: com.sleepycat.je.tree.ChildReference.writeToLog(Ljava/nio/ByteBuffer;)V:227 - DeleteStatement: writeByteArray(Ljava/nio/ByteBuffer;[B)V
   * 2 Weak Mutation 165: com.sleepycat.je.tree.ChildReference.writeToLog(Ljava/nio/ByteBuffer;)V:227 - DeleteField: key[B
   * 3 Weak Mutation 166: com.sleepycat.je.tree.ChildReference.writeToLog(Ljava/nio/ByteBuffer;)V:227 - DeleteStatement: writeByteArray(Ljava/nio/ByteBuffer;[B)V
   * 4 Weak Mutation 165: com.sleepycat.je.tree.ChildReference.writeToLog(Ljava/nio/ByteBuffer;)V:227 - DeleteField: key[B
   */
  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (long) (byte)76, (byte)76);
      // Undeclared exception!
      try {
        childReference0.writeToLog((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 20
  /*
   * 3 covered goals:
   * 1 Weak Mutation 194: com.sleepycat.je.tree.ChildReference.readFromLog(Ljava/nio/ByteBuffer;B)V:238 - DeleteStatement: readByteArray(Ljava/nio/ByteBuffer;)[B
   * 2 com.sleepycat.je.tree.ChildReference.readFromLog(Ljava/nio/ByteBuffer;B)V: root-Branch
   * 3 Weak Mutation 194: com.sleepycat.je.tree.ChildReference.readFromLog(Ljava/nio/ByteBuffer;B)V:238 - DeleteStatement: readByteArray(Ljava/nio/ByteBuffer;)[B
   */
  @Test
  public void test20()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      // Undeclared exception!
      try {
        childReference0.readFromLog((ByteBuffer) null, (byte)101);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 21
  /*
   * 3 covered goals:
   * 1 Weak Mutation 225: com.sleepycat.je.tree.ChildReference.logEntryIsTransactional()Z:260 - ReplaceConstant - 0 -> 1
   * 2 com.sleepycat.je.tree.ChildReference.logEntryIsTransactional()Z: root-Branch
   * 3 Weak Mutation 225: com.sleepycat.je.tree.ChildReference.logEntryIsTransactional()Z:260 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test21()  throws Throwable  {
      DIN dIN0 = new DIN();
      ChildReference childReference0 = dIN0.getDupCountLNRef();
      boolean boolean0 = childReference0.logEntryIsTransactional();
      assertEquals(7067L, dIN0.getNextNodeId());
      assertEquals(false, boolean0);
  }

  //Test case number: 22
  /*
   * 5 covered goals:
   * 1 Weak Mutation 227: com.sleepycat.je.tree.ChildReference.getTransactionId()J:267 - ReplaceConstant - 0 -> -1
   * 2 Weak Mutation 226: com.sleepycat.je.tree.ChildReference.getTransactionId()J:267 - ReplaceConstant - 0 -> 1
   * 3 com.sleepycat.je.tree.ChildReference.getTransactionId()J: root-Branch
   * 4 Weak Mutation 227: com.sleepycat.je.tree.ChildReference.getTransactionId()J:267 - ReplaceConstant - 0 -> -1
   * 5 Weak Mutation 226: com.sleepycat.je.tree.ChildReference.getTransactionId()J:267 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test22()  throws Throwable  {
      DIN dIN0 = new DIN();
      ChildReference childReference0 = dIN0.getDupCountLNRef();
      long long0 = childReference0.getTransactionId();
      assertEquals(7100L, dIN0.getNextNodeId());
      assertEquals(0L, long0);
  }

  //Test case number: 23
  /*
   * 17 covered goals:
   * 1 Weak Mutation 235: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceComparisonOperator != -> >
   * 2 Weak Mutation 245: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - DeleteField: lsnJ
   * 3 Weak Mutation 0: com.sleepycat.je.tree.ChildReference.<init>()V:33 - DeleteField: EMPTY_KEY[B
   * 4 Weak Mutation 1: com.sleepycat.je.tree.ChildReference.<init>()V:33 - ReplaceConstant - -1 -> 0
   * 5 Weak Mutation 2: com.sleepycat.je.tree.ChildReference.<init>()V:33 - ReplaceConstant - -1 -> 1
   * 6 Weak Mutation 3: com.sleepycat.je.tree.ChildReference.<init>()V:33 - ReplaceConstant - -1 -> -2
   * 7 Weak Mutation 4: com.sleepycat.je.tree.ChildReference.<init>()V:33 - ReplaceConstant - 0 -> 1
   * 8 Weak Mutation 76: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - ReplaceConstant - 2 -> 0
   * 9 Weak Mutation 77: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - ReplaceConstant - 2 -> 1
   * 10 Weak Mutation 78: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - ReplaceConstant - 2 -> -1
   * 11 Weak Mutation 79: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - ReplaceConstant - 2 -> 3
   * 12 Weak Mutation 73: com.sleepycat.je.tree.ChildReference.setLsn(J)V:171 - InsertUnaryOp Negation of lsn
   * 13 Weak Mutation 74: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - InsertUnaryOp Negation
   * 14 Weak Mutation 80: com.sleepycat.je.tree.ChildReference.setLsn(J)V:172 - ReplaceBitwiseOperator | -> &
   * 15 Weak Mutation 229: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - DeleteField: lsnJ
   * 16 Weak Mutation 235: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceComparisonOperator != -> >
   * 17 Weak Mutation 245: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - DeleteField: lsnJ
   */
  @Test
  public void test23()  throws Throwable  {
      DIN dIN0 = new DIN();
      ChildReference childReference0 = dIN0.getDupCountLNRef();
      childReference0.setLsn((-1238L));
      // Undeclared exception!
      try {
        childReference0.dumpString(1996, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: 1996
         */
      }
  }

  //Test case number: 24
  /*
   * 67 covered goals:
   * 1 Weak Mutation 278: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:286 - DeleteField: targetLcom/sleepycat/je/tree/Node;
   * 2 com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;: I84 Branch 16 IFNONNULL L286 - true
   * 3 Weak Mutation 85: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 8 -> 1
   * 4 Weak Mutation 84: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 8 -> 0
   * 5 Weak Mutation 87: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 8 -> 7
   * 6 Weak Mutation 86: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 8 -> -1
   * 7 Weak Mutation 83: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - DeleteField: stateB
   * 8 Weak Mutation 82: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - InsertUnaryOp Negation
   * 9 Weak Mutation 93: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceComparisonOperator == -> -2
   * 10 Weak Mutation 95: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 0 -> 1
   * 11 Weak Mutation 89: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceBitwiseOperator & -> |
   * 12 Weak Mutation 88: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceConstant - 8 -> 9
   * 13 Weak Mutation 90: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:180 - ReplaceBitwiseOperator & -> ^
   * 14 Weak Mutation 100: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceBitwiseOperator & -> ^
   * 15 Weak Mutation 101: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceComparisonOperator == -> >=
   * 16 Weak Mutation 98: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceConstant - 1 -> 0
   * 17 Weak Mutation 99: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceBitwiseOperator & -> |
   * 18 Weak Mutation 96: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - InsertUnaryOp Negation
   * 19 Weak Mutation 97: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - DeleteField: stateB
   * 20 Weak Mutation 110: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 2 -> -1
   * 21 Weak Mutation 111: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 2 -> 3
   * 22 Weak Mutation 108: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 2 -> 0
   * 23 Weak Mutation 109: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 2 -> 1
   * 24 Weak Mutation 106: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - InsertUnaryOp Negation
   * 25 Weak Mutation 107: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - DeleteField: stateB
   * 26 Weak Mutation 104: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:187 - ReplaceConstant - 1 -> 0
   * 27 Weak Mutation 117: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceConstant - 1 -> 0
   * 28 Weak Mutation 114: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceComparisonOperator == -> >=
   * 29 Weak Mutation 113: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceBitwiseOperator & -> ^
   * 30 Weak Mutation 112: com.sleepycat.je.tree.ChildReference.isDirty()Z:194 - ReplaceBitwiseOperator & -> |
   * 31 Weak Mutation 234: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceComparisonOperator != -> <
   * 32 Weak Mutation 233: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - DeleteStatement: longSub(JJ)I
   * 33 Weak Mutation 232: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceConstant - -1 -> -2
   * 34 Weak Mutation 231: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceConstant - -1 -> 1
   * 35 Weak Mutation 230: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - ReplaceConstant - -1 -> 0
   * 36 Weak Mutation 228: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:272 - InsertUnaryOp Negation
   * 37 Weak Mutation 254: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - ReplaceConstant - 10 -> 9
   * 38 Weak Mutation 255: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - ReplaceConstant - 10 -> 11
   * 39 Weak Mutation 252: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - ReplaceConstant - 10 -> 1
   * 40 Weak Mutation 253: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - ReplaceConstant - 10 -> -1
   * 41 Weak Mutation 250: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 42 Weak Mutation 251: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - ReplaceConstant - 10 -> 0
   * 43 Weak Mutation 248: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - InsertUnaryOp IINC -1 nspaces
   * 44 Weak Mutation 249: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - DeleteStatement: dumpString(JI)Ljava/lang/String;
   * 45 Weak Mutation 246: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - InsertUnaryOp Negation of nspaces
   * 46 Weak Mutation 247: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - InsertUnaryOp IINC 1 nspaces
   * 47 Weak Mutation 244: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:276 - InsertUnaryOp Negation
   * 48 Weak Mutation 275: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - ReplaceConstant - 10 -> 9
   * 49 Weak Mutation 274: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - ReplaceConstant - 10 -> -1
   * 50 Weak Mutation 273: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - ReplaceConstant - 10 -> 1
   * 51 Weak Mutation 272: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - ReplaceConstant - 10 -> 0
   * 52 Weak Mutation 279: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:286 - ReplaceComparisonOperator != null -> = null
   * 53 Weak Mutation 277: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 54 Weak Mutation 276: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:285 - ReplaceConstant - 10 -> 11
   * 55 Weak Mutation 282: com.sleepycat.je.tree.ChildReference.toString()Ljava/lang/String;:303 - DeleteStatement: dumpString(IZ)Ljava/lang/String;
   * 56 Weak Mutation 281: com.sleepycat.je.tree.ChildReference.toString()Ljava/lang/String;:303 - ReplaceConstant - 0 -> 1
   * 57 Weak Mutation 280: com.sleepycat.je.tree.ChildReference.toString()Ljava/lang/String;:303 - ReplaceConstant - 0 -> 1
   * 58 Weak Mutation 258: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:279 - ReplaceComparisonOperator != null -> = null
   * 59 Weak Mutation 256: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:278 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 60 Weak Mutation 257: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:279 - DeleteField: key[B
   * 61 Weak Mutation 266: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - DeleteField: key[B
   * 62 Weak Mutation 267: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - InsertUnaryOp Negation of nspaces
   * 63 Weak Mutation 270: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - DeleteStatement: dumpString([BI)Ljava/lang/String;
   * 64 Weak Mutation 271: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 65 Weak Mutation 268: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - InsertUnaryOp IINC 1 nspaces
   * 66 Weak Mutation 269: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:283 - InsertUnaryOp IINC -1 nspaces
   * 67 Weak Mutation 278: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:286 - DeleteField: targetLcom/sleepycat/je/tree/Node;
   */
  @Test
  public void test24()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      byte[] byteArray0 = new byte[7];
      ChildReference childReference0 = new ChildReference((Node) fileSummaryLN0, byteArray0, (long) (byte)0, (byte)1);
      String string0 = childReference0.toString();
      assertEquals(7272L, fileSummaryLN0.getNextNodeId());
      assertEquals("<DbLsn val=\"0x0/0x0\"/>\n<key v=\"0 0 0 0 0 0 0 \"/>\n<fileSummaryLN>\n  <node>0</node>\n</fileSummaryLN>\n\n<knownDeleted val=\"true\"/><pendingDeleted val=\"false\"/><dirty val=\"true\"/>", string0);
  }

  //Test case number: 25
  /*
   * 14 covered goals:
   * 1 com.sleepycat.je.tree.ChildReference.clearTarget()V: root-Branch
   * 2 Weak Mutation 10: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - InsertUnaryOp Negation of lsn
   * 3 Weak Mutation 11: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - InsertUnaryOp Negation of existingState
   * 4 Weak Mutation 12: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - InsertUnaryOp IINC 1 existingState
   * 5 Weak Mutation 13: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - InsertUnaryOp IINC -1 existingState
   * 6 Weak Mutation 14: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - ReplaceConstant - 2 -> 0
   * 7 Weak Mutation 15: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - ReplaceConstant - 2 -> 1
   * 8 Weak Mutation 17: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - ReplaceConstant - 2 -> 3
   * 9 Weak Mutation 16: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - ReplaceConstant - 2 -> -1
   * 10 Weak Mutation 18: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJB)V:47 - ReplaceBitwiseOperator | -> &
   * 11 Weak Mutation 21: com.sleepycat.je.tree.ChildReference.init(Lcom/sleepycat/je/tree/Node;[BJI)V:54 - InsertUnaryOp Negation of state
   * 12 Weak Mutation 20: com.sleepycat.je.tree.ChildReference.init(Lcom/sleepycat/je/tree/Node;[BJI)V:53 - InsertUnaryOp Negation of lsn
   * 13 Weak Mutation 23: com.sleepycat.je.tree.ChildReference.init(Lcom/sleepycat/je/tree/Node;[BJI)V:54 - InsertUnaryOp IINC -1 state
   * 14 Weak Mutation 22: com.sleepycat.je.tree.ChildReference.init(Lcom/sleepycat/je/tree/Node;[BJI)V:54 - InsertUnaryOp IINC 1 state
   */
  @Test
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (long) (byte)101, (byte)101);
      childReference0.clearTarget();
      assertEquals("<DbLsn val=\"0x0/0x65\"/>\n<key v=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \"/>\n<target/>\n<knownDeleted val=\"true\"/><pendingDeleted val=\"false\"/><dirty val=\"true\"/>", childReference0.toString());
  }
}
