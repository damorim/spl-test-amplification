/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.tree.ChildReference;
import com.sleepycat.je.tree.DIN;
import com.sleepycat.je.tree.DupCountLN;
import com.sleepycat.je.tree.IN;
import com.sleepycat.je.tree.LN;
import com.sleepycat.je.tree.NameLN;
import com.sleepycat.je.tree.Node;

@RunWith(EvoSuiteRunner.class)
public class TestChildReference_16 {


  //Test case number: 16
  /*
   * 21 covered goals:
   * 1 Weak Mutation 152: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - ReplaceBitwiseOperator & -> |
   * 2 Weak Mutation 153: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - ReplaceBitwiseOperator & -> ^
   * 3 Weak Mutation 145: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - InsertUnaryOp Negation
   * 4 Weak Mutation 146: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - DeleteField: stateB
   * 5 Weak Mutation 147: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - ReplaceConstant - -5 -> 0
   * 6 Weak Mutation 148: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - ReplaceConstant - -5 -> 1
   * 7 Weak Mutation 149: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - ReplaceConstant - -5 -> -1
   * 8 Weak Mutation 150: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - ReplaceConstant - -5 -> -6
   * 9 Weak Mutation 151: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - ReplaceConstant - -5 -> -4
   * 10 com.sleepycat.je.tree.ChildReference.setMigrate(Z)V: I3 Branch 10 IFEQ L181 - true
   * 11 Weak Mutation 135: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:181 - ReplaceComparisonOperator == -> !=
   * 12 Weak Mutation 134: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:181 - InsertUnaryOp Negation
   * 13 Weak Mutation 152: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - ReplaceBitwiseOperator & -> |
   * 14 Weak Mutation 153: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - ReplaceBitwiseOperator & -> ^
   * 15 Weak Mutation 145: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - InsertUnaryOp Negation
   * 16 Weak Mutation 146: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - DeleteField: stateB
   * 17 Weak Mutation 147: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - ReplaceConstant - -5 -> 0
   * 18 Weak Mutation 148: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - ReplaceConstant - -5 -> 1
   * 19 Weak Mutation 149: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - ReplaceConstant - -5 -> -1
   * 20 Weak Mutation 150: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - ReplaceConstant - -5 -> -6
   * 21 Weak Mutation 151: com.sleepycat.je.tree.ChildReference.setMigrate(Z)V:185 - ReplaceConstant - -5 -> -4
   */
  @Test
  public void test16()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      byte[] byteArray0 = new byte[1];
      ChildReference childReference0 = new ChildReference((Node) nameLN0, byteArray0, 0L, (byte)0);
      childReference0.setMigrate(false);
      assertEquals(4294970943L, nameLN0.getLastId());
      assertEquals(2, childReference0.getState());
  }
}
