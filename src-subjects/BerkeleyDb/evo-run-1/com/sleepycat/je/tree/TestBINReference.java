/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.tree.BINReference;
import com.sleepycat.je.tree.Key;
import java.util.Iterator;

@RunWith(EvoSuiteRunner.class)
public class TestBINReference {


  //Test case number: 0
  /*
   * 5 covered goals:
   * 1 Weak Mutation 3: com.sleepycat.je.tree.BINReference.getDatabaseId()Lcom/sleepycat/je/dbi/DatabaseId;:24 - DeleteField: databaseIdLcom/sleepycat/je/dbi/DatabaseId;
   * 2 com.sleepycat.je.tree.BINReference.getDatabaseId()Lcom/sleepycat/je/dbi/DatabaseId;: root-Branch
   * 3 Weak Mutation 0: com.sleepycat.je.tree.BINReference.<init>(JLcom/sleepycat/je/dbi/DatabaseId;[B)V:16 - InsertUnaryOp Negation of nodeId
   * 4 Weak Mutation 3: com.sleepycat.je.tree.BINReference.getDatabaseId()Lcom/sleepycat/je/dbi/DatabaseId;:24 - DeleteField: databaseIdLcom/sleepycat/je/dbi/DatabaseId;
   * 5 com.sleepycat.je.tree.BINReference.<init>(JLcom/sleepycat/je/dbi/DatabaseId;[B)V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-17));
      byte[] byteArray0 = new byte[35];
      BINReference bINReference0 = new BINReference(13L, databaseId0, byteArray0);
      DatabaseId databaseId1 = bINReference0.getDatabaseId();
      assertEquals("idKey=key=<key v=\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"/> nodeId = 13 db=-17 deletedKeys=null", bINReference0.toString());
      assertNotNull(databaseId1);
      assertEquals(13L, bINReference0.getNodeId());
  }

  //Test case number: 1
  /*
   * 5 covered goals:
   * 1 Weak Mutation 1: com.sleepycat.je.tree.BINReference.getNodeId()J:21 - InsertUnaryOp Negation
   * 2 Weak Mutation 2: com.sleepycat.je.tree.BINReference.getNodeId()J:21 - DeleteField: nodeIdJ
   * 3 com.sleepycat.je.tree.BINReference.getNodeId()J: root-Branch
   * 4 Weak Mutation 1: com.sleepycat.je.tree.BINReference.getNodeId()J:21 - InsertUnaryOp Negation
   * 5 Weak Mutation 2: com.sleepycat.je.tree.BINReference.getNodeId()J:21 - DeleteField: nodeIdJ
   */
  @Test
  public void test1()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(297);
      byte[] byteArray0 = new byte[13];
      BINReference bINReference0 = new BINReference((long) 297, databaseId0, byteArray0);
      long long0 = bINReference0.getNodeId();
      assertEquals(297L, long0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 Weak Mutation 4: com.sleepycat.je.tree.BINReference.getKey()[B:27 - DeleteField: idKey[B
   * 2 com.sleepycat.je.tree.BINReference.getKey()[B: root-Branch
   * 3 Weak Mutation 4: com.sleepycat.je.tree.BINReference.getKey()[B:27 - DeleteField: idKey[B
   */
  @Test
  public void test2()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-17));
      byte[] byteArray0 = new byte[35];
      BINReference bINReference0 = new BINReference(13L, databaseId0, byteArray0);
      byte[] byteArray1 = bINReference0.getKey();
      assertEquals(13L, bINReference0.getNodeId());
      assertNotNull(byteArray1);
      assertEquals("idKey=key=<key v=\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"/> nodeId = 13 db=-17 deletedKeys=null", bINReference0.toString());
  }

  //Test case number: 3
  /*
   * 23 covered goals:
   * 1 Weak Mutation 5: com.sleepycat.je.tree.BINReference.addDeletedKey(Lcom/sleepycat/je/tree/Key;)V:33 - DeleteField: deletedKeysLjava/util/Set;
   * 2 Weak Mutation 6: com.sleepycat.je.tree.BINReference.addDeletedKey(Lcom/sleepycat/je/tree/Key;)V:33 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 7: com.sleepycat.je.tree.BINReference.addDeletedKey(Lcom/sleepycat/je/tree/Key;)V:36 - DeleteField: deletedKeysLjava/util/Set;
   * 4 Weak Mutation 8: com.sleepycat.je.tree.BINReference.addDeletedKey(Lcom/sleepycat/je/tree/Key;)V:36 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 5 Weak Mutation 10: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:39 - ReplaceComparisonOperator != null -> = null
   * 6 Weak Mutation 12: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:42 - DeleteField: deletedKeysLjava/util/Set;
   * 7 Weak Mutation 13: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:42 - ReplaceComparisonOperator = null -> != null
   * 8 Weak Mutation 14: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:43 - DeleteField: deletedKeysLjava/util/Set;
   * 9 Weak Mutation 17: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:43 - DeleteStatement: addAll(Ljava/util/Collection;)Z
   * 10 Weak Mutation 16: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:43 - DeleteField: deletedKeysLjava/util/Set;
   * 11 com.sleepycat.je.tree.BINReference.addDeletedKey(Lcom/sleepycat/je/tree/Key;)V: I4 Branch 1 IFNONNULL L33 - true
   * 12 com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V: I4 Branch 2 IFNONNULL L39 - false
   * 13 com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V: I16 Branch 3 IFNULL L42 - false
   * 14 Weak Mutation 5: com.sleepycat.je.tree.BINReference.addDeletedKey(Lcom/sleepycat/je/tree/Key;)V:33 - DeleteField: deletedKeysLjava/util/Set;
   * 15 Weak Mutation 6: com.sleepycat.je.tree.BINReference.addDeletedKey(Lcom/sleepycat/je/tree/Key;)V:33 - ReplaceComparisonOperator != null -> = null
   * 16 Weak Mutation 7: com.sleepycat.je.tree.BINReference.addDeletedKey(Lcom/sleepycat/je/tree/Key;)V:36 - DeleteField: deletedKeysLjava/util/Set;
   * 17 Weak Mutation 8: com.sleepycat.je.tree.BINReference.addDeletedKey(Lcom/sleepycat/je/tree/Key;)V:36 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 18 Weak Mutation 10: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:39 - ReplaceComparisonOperator != null -> = null
   * 19 Weak Mutation 12: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:42 - DeleteField: deletedKeysLjava/util/Set;
   * 20 Weak Mutation 13: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:42 - ReplaceComparisonOperator = null -> != null
   * 21 Weak Mutation 14: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:43 - DeleteField: deletedKeysLjava/util/Set;
   * 22 Weak Mutation 17: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:43 - DeleteStatement: addAll(Ljava/util/Collection;)Z
   * 23 Weak Mutation 16: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:43 - DeleteField: deletedKeysLjava/util/Set;
   */
  @Test
  public void test3()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-17));
      byte[] byteArray0 = new byte[35];
      BINReference bINReference0 = new BINReference(13L, databaseId0, byteArray0);
      bINReference0.addDeletedKeys(bINReference0);
      Key key0 = new Key(byteArray0);
      bINReference0.addDeletedKey(key0);
      assertEquals(true, bINReference0.deletedKeysExist());
      assertEquals(13L, bINReference0.getNodeId());
  }

  //Test case number: 4
  /*
   * 4 covered goals:
   * 1 Weak Mutation 9: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:39 - DeleteField: deletedKeysLjava/util/Set;
   * 2 com.sleepycat.je.tree.BINReference.addDeletedKey(Lcom/sleepycat/je/tree/Key;)V: I4 Branch 1 IFNONNULL L33 - false
   * 3 com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V: I4 Branch 2 IFNONNULL L39 - true
   * 4 Weak Mutation 9: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:39 - DeleteField: deletedKeysLjava/util/Set;
   */
  @Test
  public void test4()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[6];
      BINReference bINReference0 = new BINReference((-773L), databaseId0, byteArray0);
      bINReference0.addDeletedKey((Key) null);
      bINReference0.addDeletedKeys(bINReference0);
      assertEquals(true, bINReference0.deletedKeysExist());
      assertEquals("idKey=key=<key v=\"\u0000\u0000\u0000\u0000\u0000\u0000\"/> nodeId = -773 db=0 deletedKeys=[null]", bINReference0.toString());
  }

  //Test case number: 5
  /*
   * 5 covered goals:
   * 1 Weak Mutation 15: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:43 - ReplaceVariable other -> this
   * 2 Weak Mutation 11: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:42 - ReplaceVariable other -> this
   * 3 Weak Mutation 11: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:42 - ReplaceVariable other -> this
   * 4 Weak Mutation 15: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:43 - ReplaceVariable other -> this
   * 5 com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V: I16 Branch 3 IFNULL L42 - true
   */
  @Test
  public void test5()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(297);
      byte[] byteArray0 = new byte[13];
      BINReference bINReference0 = new BINReference((long) 297, databaseId0, byteArray0);
      BINReference bINReference1 = new BINReference((long) (byte)0, databaseId0, byteArray0);
      bINReference0.addDeletedKeys(bINReference1);
      bINReference1.addDeletedKeys(bINReference0);
      assertEquals("idKey=key=<key v=\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"/> nodeId = 0 db=297 deletedKeys=[]", bINReference1.toString());
      assertEquals(297L, bINReference0.getNodeId());
  }

  //Test case number: 6
  /*
   * 15 covered goals:
   * 1 Weak Mutation 18: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:47 - DeleteField: deletedKeysLjava/util/Set;
   * 2 Weak Mutation 21: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:48 - DeleteStatement: remove(Ljava/lang/Object;)Z
   * 3 Weak Mutation 20: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:48 - DeleteField: deletedKeysLjava/util/Set;
   * 4 Weak Mutation 23: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:49 - DeleteStatement: size()I
   * 5 Weak Mutation 22: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:49 - DeleteField: deletedKeysLjava/util/Set;
   * 6 Weak Mutation 26: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:49 - ReplaceComparisonOperator != -> -1
   * 7 com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V: I4 Branch 4 IFNULL L47 - false
   * 8 com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V: I17 Branch 5 IFNE L49 - false
   * 9 Weak Mutation 19: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:47 - ReplaceComparisonOperator = null -> != null
   * 10 Weak Mutation 18: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:47 - DeleteField: deletedKeysLjava/util/Set;
   * 11 Weak Mutation 21: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:48 - DeleteStatement: remove(Ljava/lang/Object;)Z
   * 12 Weak Mutation 20: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:48 - DeleteField: deletedKeysLjava/util/Set;
   * 13 Weak Mutation 23: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:49 - DeleteStatement: size()I
   * 14 Weak Mutation 22: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:49 - DeleteField: deletedKeysLjava/util/Set;
   * 15 Weak Mutation 26: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:49 - ReplaceComparisonOperator != -> -1
   */
  @Test
  public void test6()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[10];
      BINReference bINReference0 = new BINReference((long) (byte)95, databaseId0, byteArray0);
      Key key0 = new Key(byteArray0);
      bINReference0.addDeletedKey(key0);
      assertEquals(true, bINReference0.deletedKeysExist());
      
      bINReference0.removeDeletedKey(key0);
      assertEquals("idKey=key=<key v=\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"/> nodeId = 95 db=0 deletedKeys=null", bINReference0.toString());
  }

  //Test case number: 7
  /*
   * 9 covered goals:
   * 1 Weak Mutation 24: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:49 - ReplaceComparisonOperator != -> <
   * 2 com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V: I17 Branch 5 IFNE L49 - true
   * 3 Weak Mutation 19: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:47 - ReplaceComparisonOperator = null -> != null
   * 4 Weak Mutation 18: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:47 - DeleteField: deletedKeysLjava/util/Set;
   * 5 Weak Mutation 21: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:48 - DeleteStatement: remove(Ljava/lang/Object;)Z
   * 6 Weak Mutation 20: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:48 - DeleteField: deletedKeysLjava/util/Set;
   * 7 Weak Mutation 23: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:49 - DeleteStatement: size()I
   * 8 Weak Mutation 22: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:49 - DeleteField: deletedKeysLjava/util/Set;
   * 9 Weak Mutation 24: com.sleepycat.je.tree.BINReference.removeDeletedKey(Lcom/sleepycat/je/tree/Key;)V:49 - ReplaceComparisonOperator != -> <
   */
  @Test
  public void test7()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[10];
      BINReference bINReference0 = new BINReference((long) (byte)95, databaseId0, byteArray0);
      Key key0 = new Key(byteArray0);
      byteArray0[4] = (byte)95;
      Key key1 = new Key(byteArray0);
      bINReference0.addDeletedKey(key1);
      bINReference0.removeDeletedKey(key0);
      assertEquals(true, bINReference0.deletedKeysExist());
      assertEquals(95L, bINReference0.getNodeId());
  }

  //Test case number: 8
  /*
   * 14 covered goals:
   * 1 Weak Mutation 27: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - DeleteField: deletedKeysLjava/util/Set;
   * 2 Weak Mutation 29: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - DeleteField: deletedKeysLjava/util/Set;
   * 3 Weak Mutation 28: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - ReplaceComparisonOperator = null -> != null
   * 4 Weak Mutation 31: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - ReplaceComparisonOperator <= -> ==
   * 5 Weak Mutation 30: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - DeleteStatement: collectionContains(Ljava/util/Collection;Ljava/lang/Object;)I
   * 6 Weak Mutation 35: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - ReplaceConstant - 0 -> 1
   * 7 com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z: I4 Branch 6 IFNULL L55 - false
   * 8 com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z: I9 Branch 7 IFLE L55 - true
   * 9 Weak Mutation 27: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - DeleteField: deletedKeysLjava/util/Set;
   * 10 Weak Mutation 29: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - DeleteField: deletedKeysLjava/util/Set;
   * 11 Weak Mutation 28: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - ReplaceComparisonOperator = null -> != null
   * 12 Weak Mutation 31: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - ReplaceComparisonOperator <= -> ==
   * 13 Weak Mutation 30: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - DeleteStatement: collectionContains(Ljava/util/Collection;Ljava/lang/Object;)I
   * 14 Weak Mutation 35: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test8()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-17));
      byte[] byteArray0 = new byte[35];
      BINReference bINReference0 = new BINReference(13L, databaseId0, byteArray0);
      bINReference0.addDeletedKeys(bINReference0);
      Key key0 = new Key(byteArray0);
      boolean boolean0 = bINReference0.hasDeletedKey(key0);
      assertEquals("idKey=key=<key v=\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"/> nodeId = 13 db=-17 deletedKeys=[]", bINReference0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 8 covered goals:
   * 1 Weak Mutation 34: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - ReplaceConstant - 1 -> 0
   * 2 Weak Mutation 33: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - ReplaceComparisonOperator <= -> -1
   * 3 com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z: I9 Branch 7 IFLE L55 - false
   * 4 Weak Mutation 27: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - DeleteField: deletedKeysLjava/util/Set;
   * 5 Weak Mutation 29: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - DeleteField: deletedKeysLjava/util/Set;
   * 6 Weak Mutation 30: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - DeleteStatement: collectionContains(Ljava/util/Collection;Ljava/lang/Object;)I
   * 7 Weak Mutation 34: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - ReplaceConstant - 1 -> 0
   * 8 Weak Mutation 33: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - ReplaceComparisonOperator <= -> -1
   */
  @Test
  public void test9()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[2];
      BINReference bINReference0 = new BINReference(1338L, databaseId0, byteArray0);
      byte[] byteArray1 = new byte[10];
      Key key0 = new Key(byteArray1);
      bINReference0.addDeletedKey(key0);
      boolean boolean0 = bINReference0.hasDeletedKey(key0);
      assertEquals(true, bINReference0.deletedKeysExist());
      assertEquals(true, boolean0);
  }

  //Test case number: 10
  /*
   * 14 covered goals:
   * 1 Weak Mutation 38: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - DeleteField: deletedKeysLjava/util/Set;
   * 2 Weak Mutation 39: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - DeleteStatement: size()I
   * 3 Weak Mutation 36: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - DeleteField: deletedKeysLjava/util/Set;
   * 4 Weak Mutation 37: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - ReplaceComparisonOperator = null -> != null
   * 5 Weak Mutation 42: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - ReplaceComparisonOperator <= -> -1
   * 6 Weak Mutation 43: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - ReplaceConstant - 1 -> 0
   * 7 com.sleepycat.je.tree.BINReference.deletedKeysExist()Z: I4 Branch 8 IFNULL L58 - false
   * 8 com.sleepycat.je.tree.BINReference.deletedKeysExist()Z: I8 Branch 9 IFLE L58 - false
   * 9 Weak Mutation 38: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - DeleteField: deletedKeysLjava/util/Set;
   * 10 Weak Mutation 39: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - DeleteStatement: size()I
   * 11 Weak Mutation 36: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - DeleteField: deletedKeysLjava/util/Set;
   * 12 Weak Mutation 37: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - ReplaceComparisonOperator = null -> != null
   * 13 Weak Mutation 42: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - ReplaceComparisonOperator <= -> -1
   * 14 Weak Mutation 43: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test10()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[6];
      BINReference bINReference0 = new BINReference((-773L), databaseId0, byteArray0);
      bINReference0.addDeletedKey((Key) null);
      boolean boolean0 = bINReference0.deletedKeysExist();
      assertEquals("idKey=key=<key v=\"\u0000\u0000\u0000\u0000\u0000\u0000\"/> nodeId = -773 db=0 deletedKeys=[null]", bINReference0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 14 covered goals:
   * 1 Weak Mutation 41: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - ReplaceComparisonOperator <= -> <
   * 2 Weak Mutation 44: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - ReplaceConstant - 0 -> 1
   * 3 com.sleepycat.je.tree.BINReference.deletedKeysExist()Z: I8 Branch 9 IFLE L58 - true
   * 4 Weak Mutation 10: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:39 - ReplaceComparisonOperator != null -> = null
   * 5 Weak Mutation 12: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:42 - DeleteField: deletedKeysLjava/util/Set;
   * 6 Weak Mutation 13: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:42 - ReplaceComparisonOperator = null -> != null
   * 7 Weak Mutation 14: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:43 - DeleteField: deletedKeysLjava/util/Set;
   * 8 Weak Mutation 17: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:43 - DeleteStatement: addAll(Ljava/util/Collection;)Z
   * 9 Weak Mutation 16: com.sleepycat.je.tree.BINReference.addDeletedKeys(Lcom/sleepycat/je/tree/BINReference;)V:43 - DeleteField: deletedKeysLjava/util/Set;
   * 10 Weak Mutation 38: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - DeleteField: deletedKeysLjava/util/Set;
   * 11 Weak Mutation 39: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - DeleteStatement: size()I
   * 12 Weak Mutation 36: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - DeleteField: deletedKeysLjava/util/Set;
   * 13 Weak Mutation 41: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - ReplaceComparisonOperator <= -> <
   * 14 Weak Mutation 44: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test11()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(297);
      byte[] byteArray0 = new byte[13];
      BINReference bINReference0 = new BINReference((long) 297, databaseId0, byteArray0);
      bINReference0.addDeletedKeys(bINReference0);
      boolean boolean0 = bINReference0.deletedKeysExist();
      assertEquals("idKey=key=<key v=\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"/> nodeId = 297 db=297 deletedKeys=[]", bINReference0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 9 covered goals:
   * 1 Weak Mutation 45: com.sleepycat.je.tree.BINReference.getDeletedKeyIterator()Ljava/util/Iterator;:61 - DeleteField: deletedKeysLjava/util/Set;
   * 2 Weak Mutation 47: com.sleepycat.je.tree.BINReference.getDeletedKeyIterator()Ljava/util/Iterator;:62 - DeleteField: deletedKeysLjava/util/Set;
   * 3 Weak Mutation 48: com.sleepycat.je.tree.BINReference.getDeletedKeyIterator()Ljava/util/Iterator;:62 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 4 com.sleepycat.je.tree.BINReference.getDeletedKeyIterator()Ljava/util/Iterator;: I4 Branch 10 IFNULL L61 - false
   * 5 Weak Mutation 46: com.sleepycat.je.tree.BINReference.getDeletedKeyIterator()Ljava/util/Iterator;:61 - ReplaceComparisonOperator = null -> != null
   * 6 Weak Mutation 46: com.sleepycat.je.tree.BINReference.getDeletedKeyIterator()Ljava/util/Iterator;:61 - ReplaceComparisonOperator = null -> != null
   * 7 Weak Mutation 47: com.sleepycat.je.tree.BINReference.getDeletedKeyIterator()Ljava/util/Iterator;:62 - DeleteField: deletedKeysLjava/util/Set;
   * 8 Weak Mutation 45: com.sleepycat.je.tree.BINReference.getDeletedKeyIterator()Ljava/util/Iterator;:61 - DeleteField: deletedKeysLjava/util/Set;
   * 9 Weak Mutation 48: com.sleepycat.je.tree.BINReference.getDeletedKeyIterator()Ljava/util/Iterator;:62 - DeleteStatement: iterator()Ljava/util/Iterator;
   */
  @Test
  public void test12()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[10];
      BINReference bINReference0 = new BINReference((long) (byte)95, databaseId0, byteArray0);
      Key key0 = new Key(byteArray0);
      bINReference0.addDeletedKey(key0);
      Iterator<?> iterator0 = bINReference0.getDeletedKeyIterator();
      assertEquals(true, bINReference0.deletedKeysExist());
      assertEquals(true, iterator0.hasNext());
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 Weak Mutation 49: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:72 - ReplaceComparisonOperator != -> ==
   * 2 Weak Mutation 50: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:73 - ReplaceConstant - 1 -> 0
   * 3 com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z: I4 Branch 11 IF_ACMPNE L72 - false
   * 4 Weak Mutation 50: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:73 - ReplaceConstant - 1 -> 0
   * 5 Weak Mutation 49: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:72 - ReplaceComparisonOperator != -> ==
   */
  @Test
  public void test13()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-17));
      byte[] byteArray0 = new byte[35];
      BINReference bINReference0 = new BINReference(13L, databaseId0, byteArray0);
      boolean boolean0 = bINReference0.equals((Object) bINReference0);
      assertEquals(true, boolean0);
      assertEquals("idKey=key=<key v=\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"/> nodeId = 13 db=-17 deletedKeys=null", bINReference0.toString());
  }

  //Test case number: 14
  /*
   * 17 covered goals:
   * 1 Weak Mutation 51: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:75 - ReplaceComparisonOperator != -> ==
   * 2 Weak Mutation 55: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * 3 Weak Mutation 53: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * 4 Weak Mutation 59: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - ReplaceComparisonOperator != -> >
   * 5 Weak Mutation 57: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - DeleteStatement: longSub(JJ)I
   * 6 Weak Mutation 56: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - DeleteField: nodeIdJ
   * 7 Weak Mutation 62: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - ReplaceConstant - 0 -> 1
   * 8 com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z: I4 Branch 11 IF_ACMPNE L72 - true
   * 9 com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z: I13 Branch 12 IFNE L75 - true
   * 10 com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z: I26 Branch 13 IFNE L78 - true
   * 11 Weak Mutation 51: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:75 - ReplaceComparisonOperator != -> ==
   * 12 Weak Mutation 55: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * 13 Weak Mutation 53: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * 14 Weak Mutation 59: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - ReplaceComparisonOperator != -> >
   * 15 Weak Mutation 57: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - DeleteStatement: longSub(JJ)I
   * 16 Weak Mutation 56: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - DeleteField: nodeIdJ
   * 17 Weak Mutation 62: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test14()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-17));
      byte[] byteArray0 = new byte[35];
      BINReference bINReference0 = new BINReference(13L, databaseId0, byteArray0);
      BINReference bINReference1 = new BINReference((long) (byte)0, databaseId0, byteArray0);
      boolean boolean0 = bINReference0.equals((Object) bINReference1);
      assertFalse(bINReference1.equals(bINReference0));
      assertEquals(false, boolean0);
      assertEquals(13L, bINReference0.getNodeId());
  }

  //Test case number: 15
  /*
   * 3 covered goals:
   * 1 Weak Mutation 52: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:76 - ReplaceConstant - 0 -> 1
   * 2 com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z: I13 Branch 12 IFNE L75 - false
   * 3 Weak Mutation 52: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:76 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test15()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[10];
      BINReference bINReference0 = new BINReference((long) (byte)95, databaseId0, byteArray0);
      boolean boolean0 = bINReference0.equals((Object) "<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=95>");
      assertEquals(95L, bINReference0.getNodeId());
      assertEquals(false, boolean0);
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 Weak Mutation 54: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - DeleteField: nodeIdJ
   * 2 Weak Mutation 58: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - ReplaceComparisonOperator != -> <
   * 3 Weak Mutation 62: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 54: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - DeleteField: nodeIdJ
   * 5 Weak Mutation 58: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - ReplaceComparisonOperator != -> <
   */
  @Test
  public void test16()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-17));
      byte[] byteArray0 = new byte[35];
      BINReference bINReference0 = new BINReference(13L, databaseId0, byteArray0);
      BINReference bINReference1 = new BINReference((long) (byte)0, databaseId0, byteArray0);
      boolean boolean0 = bINReference1.equals((Object) bINReference0);
      assertEquals(false, boolean0);
      assertFalse(bINReference0.equals(bINReference1));
      assertEquals(13L, bINReference0.getNodeId());
  }

  //Test case number: 17
  /*
   * 12 covered goals:
   * 1 Weak Mutation 61: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - ReplaceConstant - 1 -> 0
   * 2 Weak Mutation 60: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - ReplaceComparisonOperator != -> -1
   * 3 com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z: I26 Branch 13 IFNE L78 - false
   * 4 Weak Mutation 51: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:75 - ReplaceComparisonOperator != -> ==
   * 5 Weak Mutation 49: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:72 - ReplaceComparisonOperator != -> ==
   * 6 Weak Mutation 55: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * 7 Weak Mutation 54: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - DeleteField: nodeIdJ
   * 8 Weak Mutation 53: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * 9 Weak Mutation 57: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - DeleteStatement: longSub(JJ)I
   * 10 Weak Mutation 56: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - DeleteField: nodeIdJ
   * 11 Weak Mutation 61: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - ReplaceConstant - 1 -> 0
   * 12 Weak Mutation 60: com.sleepycat.je.tree.BINReference.equals(Ljava/lang/Object;)Z:78 - ReplaceComparisonOperator != -> -1
   */
  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BINReference bINReference0 = new BINReference(9L, (DatabaseId) null, byteArray0);
      BINReference bINReference1 = new BINReference(9L, (DatabaseId) null, byteArray0);
      boolean boolean0 = bINReference0.equals((Object) bINReference1);
      assertEquals("idKey=key=<key v=\"\u0000\u0000\u0000\u0000\u0000\u0000\"/> nodeId = 9 db=null deletedKeys=null", bINReference1.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 18
  /*
   * 5 covered goals:
   * 1 Weak Mutation 63: com.sleepycat.je.tree.BINReference.hashCode()I:81 - InsertUnaryOp Negation
   * 2 Weak Mutation 64: com.sleepycat.je.tree.BINReference.hashCode()I:81 - DeleteField: nodeIdJ
   * 3 com.sleepycat.je.tree.BINReference.hashCode()I: root-Branch
   * 4 Weak Mutation 63: com.sleepycat.je.tree.BINReference.hashCode()I:81 - InsertUnaryOp Negation
   * 5 Weak Mutation 64: com.sleepycat.je.tree.BINReference.hashCode()I:81 - DeleteField: nodeIdJ
   */
  @Test
  public void test18()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[10];
      BINReference bINReference0 = new BINReference((long) (byte)95, databaseId0, byteArray0);
      int int0 = bINReference0.hashCode();
      assertEquals(95, int0);
  }

  //Test case number: 19
  /*
   * 40 covered goals:
   * 1 Weak Mutation 80: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteField: deletedKeysLjava/util/Set;
   * 2 Weak Mutation 6: com.sleepycat.je.tree.BINReference.addDeletedKey(Lcom/sleepycat/je/tree/Key;)V:33 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 7: com.sleepycat.je.tree.BINReference.addDeletedKey(Lcom/sleepycat/je/tree/Key;)V:36 - DeleteField: deletedKeysLjava/util/Set;
   * 4 Weak Mutation 8: com.sleepycat.je.tree.BINReference.addDeletedKey(Lcom/sleepycat/je/tree/Key;)V:36 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 5 Weak Mutation 68: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 6 Weak Mutation 69: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - ReplaceConstant -  nodeId =  -> 
   * 7 Weak Mutation 70: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 8 Weak Mutation 71: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - InsertUnaryOp Negation
   * 9 Weak Mutation 65: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - ReplaceConstant - idKey= -> 
   * 10 Weak Mutation 66: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteField: idKey[B
   * 11 Weak Mutation 67: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: getNoFormatString([B)Ljava/lang/String;
   * 12 Weak Mutation 76: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteField: databaseIdLcom/sleepycat/je/dbi/DatabaseId;
   * 13 Weak Mutation 77: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 14 Weak Mutation 78: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - ReplaceConstant -  deletedKeys= -> 
   * 15 Weak Mutation 79: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 16 Weak Mutation 72: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteField: nodeIdJ
   * 17 Weak Mutation 73: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: append(J)Ljava/lang/StringBuilder;
   * 18 Weak Mutation 74: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - ReplaceConstant -  db= -> 
   * 19 Weak Mutation 75: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 20 Weak Mutation 81: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 21 Weak Mutation 82: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: toString()Ljava/lang/String;
   * 22 Weak Mutation 68: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 23 Weak Mutation 69: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - ReplaceConstant -  nodeId =  -> 
   * 24 Weak Mutation 70: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 25 Weak Mutation 71: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - InsertUnaryOp Negation
   * 26 Weak Mutation 65: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - ReplaceConstant - idKey= -> 
   * 27 Weak Mutation 66: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteField: idKey[B
   * 28 Weak Mutation 67: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: getNoFormatString([B)Ljava/lang/String;
   * 29 Weak Mutation 76: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteField: databaseIdLcom/sleepycat/je/dbi/DatabaseId;
   * 30 Weak Mutation 77: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 31 Weak Mutation 78: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - ReplaceConstant -  deletedKeys= -> 
   * 32 Weak Mutation 79: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 33 Weak Mutation 72: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteField: nodeIdJ
   * 34 Weak Mutation 73: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: append(J)Ljava/lang/StringBuilder;
   * 35 Weak Mutation 74: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - ReplaceConstant -  db= -> 
   * 36 Weak Mutation 75: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 37 Weak Mutation 81: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 38 Weak Mutation 80: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteField: deletedKeysLjava/util/Set;
   * 39 Weak Mutation 82: com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;:84 - DeleteStatement: toString()Ljava/lang/String;
   * 40 com.sleepycat.je.tree.BINReference.toString()Ljava/lang/String;: root-Branch
   */
  @Test
  public void test19()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[6];
      BINReference bINReference0 = new BINReference((-773L), databaseId0, byteArray0);
      bINReference0.addDeletedKey((Key) null);
      String string0 = bINReference0.toString();
      assertEquals(true, bINReference0.deletedKeysExist());
      assertEquals("idKey=key=<key v=\"\u0000\u0000\u0000\u0000\u0000\u0000\"/> nodeId = -773 db=0 deletedKeys=[null]", string0);
  }

  //Test case number: 20
  /*
   * 3 covered goals:
   * 1 com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z: I4 Branch 6 IFNULL L55 - true
   * 2 Weak Mutation 28: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - ReplaceComparisonOperator = null -> != null
   * 3 Weak Mutation 35: com.sleepycat.je.tree.BINReference.hasDeletedKey(Lcom/sleepycat/je/tree/Key;)Z:55 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BINReference bINReference0 = new BINReference(9L, (DatabaseId) null, byteArray0);
      boolean boolean0 = bINReference0.hasDeletedKey((Key) null);
      assertEquals(false, boolean0);
      assertEquals(9L, bINReference0.getNodeId());
  }

  //Test case number: 21
  /*
   * 4 covered goals:
   * 1 com.sleepycat.je.tree.BINReference.deletedKeysExist()Z: I4 Branch 8 IFNULL L58 - true
   * 2 Weak Mutation 0: com.sleepycat.je.tree.BINReference.<init>(JLcom/sleepycat/je/dbi/DatabaseId;[B)V:16 - InsertUnaryOp Negation of nodeId
   * 3 Weak Mutation 37: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - ReplaceComparisonOperator = null -> != null
   * 4 Weak Mutation 44: com.sleepycat.je.tree.BINReference.deletedKeysExist()Z:58 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test21()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(297);
      byte[] byteArray0 = new byte[13];
      BINReference bINReference0 = new BINReference((long) 297, databaseId0, byteArray0);
      boolean boolean0 = bINReference0.deletedKeysExist();
      assertEquals(false, boolean0);
      assertEquals("idKey=key=<key v=\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"/> nodeId = 297 db=297 deletedKeys=null", bINReference0.toString());
  }
}
