/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.log.LogManager;
import com.sleepycat.je.tree.BIN;
import com.sleepycat.je.tree.ChildReference;
import com.sleepycat.je.tree.DBIN;
import com.sleepycat.je.tree.DIN;
import com.sleepycat.je.tree.IN;
import com.sleepycat.je.tree.MapLN;
import com.sleepycat.je.tree.Node;
import com.sleepycat.je.tree.TreeWalkerStatsAccumulator;

@RunWith(EvoSuiteRunner.class)
public class TestIN_34 {


  //Test case number: 34
  /*
   * 25 covered goals:
   * 1 Weak Mutation 851: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceConstant - 2 -> 0
   * 2 Weak Mutation 850: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - InsertUnaryOp IINC -1
   * 3 Weak Mutation 849: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - InsertUnaryOp IINC 1
   * 4 Weak Mutation 848: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - InsertUnaryOp Negation
   * 5 Weak Mutation 855: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceBitwiseOperator & -> |
   * 6 Weak Mutation 854: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceConstant - 2 -> 3
   * 7 Weak Mutation 853: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceConstant - 2 -> -1
   * 8 Weak Mutation 852: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceConstant - 2 -> 1
   * 9 Weak Mutation 859: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceComparisonOperator == -> -2
   * 10 Weak Mutation 856: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceBitwiseOperator & -> ^
   * 11 Weak Mutation 861: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceConstant - 0 -> 1
   * 12 Weak Mutation 847: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - DeleteField: entryStates[B
   * 13 com.sleepycat.je.tree.IN.isDirty(I)Z: I8 Branch 30 IFEQ L681 - true
   * 14 Weak Mutation 851: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceConstant - 2 -> 0
   * 15 Weak Mutation 850: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - InsertUnaryOp IINC -1
   * 16 Weak Mutation 849: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - InsertUnaryOp IINC 1
   * 17 Weak Mutation 848: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - InsertUnaryOp Negation
   * 18 Weak Mutation 855: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceBitwiseOperator & -> |
   * 19 Weak Mutation 854: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceConstant - 2 -> 3
   * 20 Weak Mutation 853: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceConstant - 2 -> -1
   * 21 Weak Mutation 852: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceConstant - 2 -> 1
   * 22 Weak Mutation 859: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceComparisonOperator == -> -2
   * 23 Weak Mutation 856: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceBitwiseOperator & -> ^
   * 24 Weak Mutation 861: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - ReplaceConstant - 0 -> 1
   * 25 Weak Mutation 847: com.sleepycat.je.tree.IN.isDirty(I)Z:681 - DeleteField: entryStates[B
   */
  @Test
  public void test34()  throws Throwable  {
      DIN dIN0 = new DIN();
      assertNotNull(dIN0);
      
      byte[] byteArray0 = new byte[5];
      dIN0.init((DatabaseImpl) null, byteArray0, 483, (-1581));
      boolean boolean0 = dIN0.isDirty((int) (byte)0);
      assertEquals(483, dIN0.getMaxEntries());
      assertEquals(false, boolean0);
  }
}
