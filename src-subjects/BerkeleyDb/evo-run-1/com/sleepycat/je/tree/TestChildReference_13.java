/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.tree.ChildReference;
import com.sleepycat.je.tree.DIN;
import com.sleepycat.je.tree.DupCountLN;
import com.sleepycat.je.tree.IN;
import com.sleepycat.je.tree.LN;
import com.sleepycat.je.tree.NameLN;
import com.sleepycat.je.tree.Node;

@RunWith(EvoSuiteRunner.class)
public class TestChildReference_13 {


  //Test case number: 13
  /*
   * 27 covered goals:
   * 1 Weak Mutation 92: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:157 - ReplaceComparisonOperator == -> >=
   * 2 Weak Mutation 95: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:157 - ReplaceConstant - 1 -> 0
   * 3 Weak Mutation 102: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:163 - ReplaceComparisonOperator == -> >=
   * 4 Weak Mutation 105: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:163 - ReplaceConstant - 1 -> 0
   * 5 Weak Mutation 235: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:238 - ReplaceComparisonOperator != -> <
   * 6 com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z: I6 Branch 6 IFEQ L157 - false
   * 7 com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z: I6 Branch 7 IFEQ L163 - false
   * 8 Weak Mutation 113: com.sleepycat.je.tree.ChildReference.isDirty()Z:169 - ReplaceBitwiseOperator & -> |
   * 9 Weak Mutation 250: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:243 - DeleteStatement: dumpString(JI)Ljava/lang/String;
   * 10 Weak Mutation 251: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:243 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 11 Weak Mutation 248: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:243 - InsertUnaryOp IINC 1
   * 12 Weak Mutation 249: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:243 - InsertUnaryOp IINC -1
   * 13 Weak Mutation 247: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:243 - InsertUnaryOp Negation
   * 14 Weak Mutation 245: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:243 - InsertUnaryOp Negation
   * 15 Weak Mutation 272: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:251 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 16 Weak Mutation 279: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:254 - DeleteField: targetLcom/sleepycat/je/tree/Node;
   * 17 Weak Mutation 258: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:246 - DeleteField: key[B
   * 18 Weak Mutation 267: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:251 - DeleteField: key[B
   * 19 Weak Mutation 270: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:251 - InsertUnaryOp IINC -1
   * 20 Weak Mutation 271: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:251 - DeleteStatement: dumpString([BI)Ljava/lang/String;
   * 21 Weak Mutation 268: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:251 - InsertUnaryOp Negation
   * 22 Weak Mutation 269: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:251 - InsertUnaryOp IINC 1
   * 23 Weak Mutation 92: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:157 - ReplaceComparisonOperator == -> >=
   * 24 Weak Mutation 95: com.sleepycat.je.tree.ChildReference.isPendingDeleted()Z:157 - ReplaceConstant - 1 -> 0
   * 25 Weak Mutation 102: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:163 - ReplaceComparisonOperator == -> >=
   * 26 Weak Mutation 105: com.sleepycat.je.tree.ChildReference.isKnownDeleted()Z:163 - ReplaceConstant - 1 -> 0
   * 27 Weak Mutation 235: com.sleepycat.je.tree.ChildReference.dumpString(IZ)Ljava/lang/String;:238 - ReplaceComparisonOperator != -> <
   */
  @Test
  public void test13()  throws Throwable  {
      LN lN0 = new LN();
      byte[] byteArray0 = new byte[1];
      ChildReference childReference0 = new ChildReference((Node) lN0, byteArray0, 0L, (byte) (-1));
      String string0 = childReference0.toString();
      assertEquals(4294970595L, lN0.getNextNodeId());
      assertEquals("<DbLsn val=\"0x0/0x0\"/>\n<key v=\"0 \"/>\n<ln>\n  <node>0</node>\n</ln>\n<knownDeleted val=\"true\"/><pendingDeleted val=\"true\"/><dirty val=\"true\"/>", string0);
  }
}
