/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.tree.Key;
import java.util.Comparator;

@RunWith(EvoSuiteRunner.class)
public class TestKey {


  //Test case number: 0
  /*
   * 29 covered goals:
   * 1 Weak Mutation 10: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:30 - DeleteStatement: getData()[B
   * 2 Weak Mutation 11: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:31 - ReplaceVariable entryKey -> EMPTY_KEY
   * 3 Weak Mutation 12: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:31 - ReplaceComparisonOperator != null -> = null
   * 4 Weak Mutation 14: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:35 - DeleteStatement: getSize()I
   * 5 Weak Mutation 15: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - ReplaceVariable entryKey -> newKey
   * 6 Weak Mutation 17: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - DeleteStatement: getOffset()I
   * 7 Weak Mutation 16: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - ReplaceVariable entryKey -> EMPTY_KEY
   * 8 Weak Mutation 19: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - ReplaceVariable newKey -> EMPTY_KEY
   * 9 Weak Mutation 18: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - ReplaceVariable newKey -> entryKey
   * 10 Weak Mutation 21: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - DeleteStatement: getSize()I
   * 11 Weak Mutation 20: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - ReplaceConstant - 0 -> 1
   * 12 Weak Mutation 22: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - DeleteStatement: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
   * 13 Weak Mutation 23: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:37 - ReplaceVariable newKey -> entryKey
   * 14 Weak Mutation 24: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:37 - ReplaceVariable newKey -> EMPTY_KEY
   * 15 com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B: I8 Branch 2 IFNONNULL L31 - true
   * 16 Weak Mutation 10: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:30 - DeleteStatement: getData()[B
   * 17 Weak Mutation 11: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:31 - ReplaceVariable entryKey -> EMPTY_KEY
   * 18 Weak Mutation 12: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:31 - ReplaceComparisonOperator != null -> = null
   * 19 Weak Mutation 14: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:35 - DeleteStatement: getSize()I
   * 20 Weak Mutation 15: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - ReplaceVariable entryKey -> newKey
   * 21 Weak Mutation 17: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - DeleteStatement: getOffset()I
   * 22 Weak Mutation 16: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - ReplaceVariable entryKey -> EMPTY_KEY
   * 23 Weak Mutation 19: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - ReplaceVariable newKey -> EMPTY_KEY
   * 24 Weak Mutation 18: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - ReplaceVariable newKey -> entryKey
   * 25 Weak Mutation 21: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - DeleteStatement: getSize()I
   * 26 Weak Mutation 20: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - ReplaceConstant - 0 -> 1
   * 27 Weak Mutation 23: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:37 - ReplaceVariable newKey -> entryKey
   * 28 Weak Mutation 22: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:36 - DeleteStatement: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
   * 29 Weak Mutation 24: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:37 - ReplaceVariable newKey -> EMPTY_KEY
   */
  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      byte[] byteArray1 = Key.makeKey(databaseEntry0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  //Test case number: 1
  /*
   * 16 covered goals:
   * 1 Weak Mutation 25: com.sleepycat.je.tree.Key.getKey()[B:44 - ReplaceVariable key -> EMPTY_KEY
   * 2 Weak Mutation 26: com.sleepycat.je.tree.Key.getKey()[B:44 - DeleteField: key[B
   * 3 com.sleepycat.je.tree.Key.getKey()[B: root-Branch
   * 4 Weak Mutation 0: com.sleepycat.je.tree.Key.<init>([B)V:21 - ReplaceVariable key -> EMPTY_KEY
   * 5 Weak Mutation 1: com.sleepycat.je.tree.Key.<init>([B)V:21 - ReplaceComparisonOperator != null -> = null
   * 6 Weak Mutation 2: com.sleepycat.je.tree.Key.<init>([B)V:25 - ReplaceVariable key -> EMPTY_KEY
   * 7 Weak Mutation 3: com.sleepycat.je.tree.Key.<init>([B)V:26 - ReplaceVariable key -> EMPTY_KEY
   * 8 Weak Mutation 4: com.sleepycat.je.tree.Key.<init>([B)V:26 - ReplaceConstant - 0 -> 1
   * 9 Weak Mutation 5: com.sleepycat.je.tree.Key.<init>([B)V:26 - ReplaceVariable key -> EMPTY_KEY
   * 10 Weak Mutation 6: com.sleepycat.je.tree.Key.<init>([B)V:26 - DeleteField: key[B
   * 11 Weak Mutation 7: com.sleepycat.je.tree.Key.<init>([B)V:26 - ReplaceConstant - 0 -> 1
   * 12 Weak Mutation 8: com.sleepycat.je.tree.Key.<init>([B)V:26 - ReplaceVariable key -> EMPTY_KEY
   * 13 Weak Mutation 9: com.sleepycat.je.tree.Key.<init>([B)V:26 - DeleteStatement: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
   * 14 Weak Mutation 25: com.sleepycat.je.tree.Key.getKey()[B:44 - ReplaceVariable key -> EMPTY_KEY
   * 15 Weak Mutation 26: com.sleepycat.je.tree.Key.getKey()[B:44 - DeleteField: key[B
   * 16 com.sleepycat.je.tree.Key.<init>([B)V: I7 Branch 1 IFNONNULL L21 - true
   */
  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Key key0 = new Key(byteArray0);
      byte[] byteArray1 = key0.getKey();
      assertFalse(byteArray0.equals(byteArray1));
  }

  //Test case number: 2
  /*
   * 135 covered goals:
   * 1 Weak Mutation 29: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - DeleteField: key[B
   * 2 Weak Mutation 28: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - ReplaceVariable key -> EMPTY_KEY
   * 3 Weak Mutation 31: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - ReplaceVariable key -> EMPTY_KEY
   * 4 Weak Mutation 32: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - DeleteField: key[B
   * 5 Weak Mutation 33: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - DeleteStatement: compareUnsignedBytes([B[B)I
   * 6 Weak Mutation 34: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 35: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - DeleteStatement: compareTo(Ljava/lang/Object;)I
   * 8 Weak Mutation 38: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - ReplaceComparisonOperator != -> -1
   * 9 Weak Mutation 39: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - ReplaceConstant - 1 -> 0
   * 10 Weak Mutation 82: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:90 - ReplaceVariable key1 -> EMPTY_KEY
   * 11 Weak Mutation 84: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:91 - ReplaceVariable key2 -> EMPTY_KEY
   * 12 Weak Mutation 87: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp IINC 1 a1Len
   * 13 Weak Mutation 86: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp Negation of a1Len
   * 14 Weak Mutation 93: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - DeleteStatement: min(II)I
   * 15 Weak Mutation 92: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp IINC -1 a2Len
   * 16 Weak Mutation 88: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp IINC -1 a1Len
   * 17 Weak Mutation 91: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp IINC 1 a2Len
   * 18 Weak Mutation 90: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp Negation of a2Len
   * 19 Weak Mutation 94: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceConstant - 0 -> 1
   * 20 Weak Mutation 152: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> limit
   * 21 Weak Mutation 153: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> a2Len
   * 22 Weak Mutation 154: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp Negation of i
   * 23 Weak Mutation 155: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp IINC 1 i
   * 24 Weak Mutation 156: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp IINC -1 i
   * 25 Weak Mutation 159: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable limit -> i
   * 26 Weak Mutation 148: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> a1Len
   * 27 Weak Mutation 149: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> limit
   * 28 Weak Mutation 150: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> a2Len
   * 29 Weak Mutation 151: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> a1Len
   * 30 Weak Mutation 162: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp IINC -1 limit
   * 31 Weak Mutation 161: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp IINC 1 limit
   * 32 Weak Mutation 160: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp Negation of limit
   * 33 Weak Mutation 165: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceComparisonOperator < -> <=
   * 34 Weak Mutation 164: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceComparisonOperator < -> -2
   * 35 Weak Mutation 102: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - InsertUnaryOp IINC -1 i
   * 36 Weak Mutation 100: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - InsertUnaryOp Negation of i
   * 37 Weak Mutation 101: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - InsertUnaryOp IINC 1 i
   * 38 Weak Mutation 98: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - ReplaceVariable i -> limit
   * 39 Weak Mutation 99: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - ReplaceVariable i -> a2Len
   * 40 Weak Mutation 96: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - ReplaceVariable key1 -> EMPTY_KEY
   * 41 Weak Mutation 97: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - ReplaceVariable i -> a1Len
   * 42 Weak Mutation 110: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - InsertUnaryOp IINC -1 i
   * 43 Weak Mutation 108: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - InsertUnaryOp Negation of i
   * 44 Weak Mutation 109: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - InsertUnaryOp IINC 1 i
   * 45 Weak Mutation 106: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - ReplaceVariable i -> limit
   * 46 Weak Mutation 107: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - ReplaceVariable i -> a2Len
   * 47 Weak Mutation 104: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - ReplaceVariable key2 -> EMPTY_KEY
   * 48 Weak Mutation 105: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - ReplaceVariable i -> a1Len
   * 49 Weak Mutation 118: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp IINC -1 b2
   * 50 Weak Mutation 117: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp IINC 1 b2
   * 51 Weak Mutation 116: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp Negation of b2
   * 52 Weak Mutation 114: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp IINC -1 b1
   * 53 Weak Mutation 113: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp IINC 1 b1
   * 54 Weak Mutation 112: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp Negation of b1
   * 55 Weak Mutation 121: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - ReplaceComparisonOperator != -> -1
   * 56 Weak Mutation 170: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp IINC -1 a1Len
   * 57 Weak Mutation 169: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp IINC 1 a1Len
   * 58 Weak Mutation 168: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp Negation of a1Len
   * 59 Weak Mutation 175: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp IINC -1 a2Len
   * 60 Weak Mutation 174: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp IINC 1 a2Len
   * 61 Weak Mutation 173: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp Negation of a2Len
   * 62 Weak Mutation 178: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceArithmeticOperator - -> /
   * 63 Weak Mutation 179: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceArithmeticOperator - -> *
   * 64 Weak Mutation 176: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceArithmeticOperator - -> +
   * 65 com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I: I3 Branch 3 IFNONNULL L53 - true
   * 66 com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z: I4 Branch 4 IFEQ L63 - false
   * 67 com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z: I8 Branch 5 IFNE L63 - false
   * 68 com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I: I58 Branch 9 IF_ICMPLT L93 - true
   * 69 com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I: I58 Branch 9 IF_ICMPLT L93 - false
   * 70 com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I: I38 Branch 8 IF_ICMPNE L96 - false
   * 71 Weak Mutation 27: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:53 - ReplaceComparisonOperator != null -> = null
   * 72 Weak Mutation 29: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - DeleteField: key[B
   * 73 Weak Mutation 28: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - ReplaceVariable key -> EMPTY_KEY
   * 74 Weak Mutation 31: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - ReplaceVariable key -> EMPTY_KEY
   * 75 Weak Mutation 34: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - ReplaceComparisonOperator == -> !=
   * 76 Weak Mutation 35: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - DeleteStatement: compareTo(Ljava/lang/Object;)I
   * 77 Weak Mutation 32: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - DeleteField: key[B
   * 78 Weak Mutation 33: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - DeleteStatement: compareUnsignedBytes([B[B)I
   * 79 Weak Mutation 38: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - ReplaceComparisonOperator != -> -1
   * 80 Weak Mutation 39: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - ReplaceConstant - 1 -> 0
   * 81 Weak Mutation 84: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:91 - ReplaceVariable key2 -> EMPTY_KEY
   * 82 Weak Mutation 87: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp IINC 1 a1Len
   * 83 Weak Mutation 86: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp Negation of a1Len
   * 84 Weak Mutation 82: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:90 - ReplaceVariable key1 -> EMPTY_KEY
   * 85 Weak Mutation 93: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - DeleteStatement: min(II)I
   * 86 Weak Mutation 92: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp IINC -1 a2Len
   * 87 Weak Mutation 94: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceConstant - 0 -> 1
   * 88 Weak Mutation 88: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp IINC -1 a1Len
   * 89 Weak Mutation 91: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp IINC 1 a2Len
   * 90 Weak Mutation 90: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp Negation of a2Len
   * 91 Weak Mutation 102: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - InsertUnaryOp IINC -1 i
   * 92 Weak Mutation 100: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - InsertUnaryOp Negation of i
   * 93 Weak Mutation 101: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - InsertUnaryOp IINC 1 i
   * 94 Weak Mutation 98: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - ReplaceVariable i -> limit
   * 95 Weak Mutation 99: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - ReplaceVariable i -> a2Len
   * 96 Weak Mutation 96: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - ReplaceVariable key1 -> EMPTY_KEY
   * 97 Weak Mutation 97: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - ReplaceVariable i -> a1Len
   * 98 Weak Mutation 110: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - InsertUnaryOp IINC -1 i
   * 99 Weak Mutation 108: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - InsertUnaryOp Negation of i
   * 100 Weak Mutation 109: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - InsertUnaryOp IINC 1 i
   * 101 Weak Mutation 106: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - ReplaceVariable i -> limit
   * 102 Weak Mutation 107: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - ReplaceVariable i -> a2Len
   * 103 Weak Mutation 104: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - ReplaceVariable key2 -> EMPTY_KEY
   * 104 Weak Mutation 105: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - ReplaceVariable i -> a1Len
   * 105 Weak Mutation 118: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp IINC -1 b2
   * 106 Weak Mutation 117: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp IINC 1 b2
   * 107 Weak Mutation 116: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp Negation of b2
   * 108 Weak Mutation 114: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp IINC -1 b1
   * 109 Weak Mutation 113: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp IINC 1 b1
   * 110 Weak Mutation 112: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp Negation of b1
   * 111 Weak Mutation 121: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - ReplaceComparisonOperator != -> -1
   * 112 Weak Mutation 152: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> limit
   * 113 Weak Mutation 153: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> a2Len
   * 114 Weak Mutation 154: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp Negation of i
   * 115 Weak Mutation 155: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp IINC 1 i
   * 116 Weak Mutation 156: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp IINC -1 i
   * 117 Weak Mutation 159: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable limit -> i
   * 118 Weak Mutation 148: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> a1Len
   * 119 Weak Mutation 149: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> limit
   * 120 Weak Mutation 150: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> a2Len
   * 121 Weak Mutation 151: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> a1Len
   * 122 Weak Mutation 170: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp IINC -1 a1Len
   * 123 Weak Mutation 169: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp IINC 1 a1Len
   * 124 Weak Mutation 168: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp Negation of a1Len
   * 125 Weak Mutation 175: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp IINC -1 a2Len
   * 126 Weak Mutation 174: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp IINC 1 a2Len
   * 127 Weak Mutation 173: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp Negation of a2Len
   * 128 Weak Mutation 162: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp IINC -1 limit
   * 129 Weak Mutation 161: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp IINC 1 limit
   * 130 Weak Mutation 160: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp Negation of limit
   * 131 Weak Mutation 165: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceComparisonOperator < -> <=
   * 132 Weak Mutation 164: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceComparisonOperator < -> -2
   * 133 Weak Mutation 178: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceArithmeticOperator - -> /
   * 134 Weak Mutation 179: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceArithmeticOperator - -> *
   * 135 Weak Mutation 176: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceArithmeticOperator - -> +
   */
  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Key key0 = new Key(byteArray0);
      assertNotNull(key0);
      
      boolean boolean0 = key0.equals((Object) key0);
      assertEquals(true, boolean0);
  }

  //Test case number: 3
  /*
   * 29 covered goals:
   * 1 Weak Mutation 30: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - ReplaceVariable argKey -> this
   * 2 Weak Mutation 37: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - ReplaceComparisonOperator != -> >
   * 3 Weak Mutation 40: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 81: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:90 - ReplaceVariable key1 -> key2
   * 5 Weak Mutation 83: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:91 - ReplaceVariable key2 -> key1
   * 6 Weak Mutation 85: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - ReplaceVariable a1Len -> a2Len
   * 7 Weak Mutation 89: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - ReplaceVariable a2Len -> a1Len
   * 8 Weak Mutation 158: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable limit -> a2Len
   * 9 Weak Mutation 95: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - ReplaceVariable key1 -> key2
   * 10 Weak Mutation 103: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - ReplaceVariable key2 -> key1
   * 11 Weak Mutation 171: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceVariable a2Len -> a1Len
   * 12 Weak Mutation 172: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceVariable a2Len -> limit
   * 13 Weak Mutation 167: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceVariable a1Len -> a2Len
   * 14 Weak Mutation 177: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceArithmeticOperator - -> %
   * 15 com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z: I8 Branch 5 IFNE L63 - true
   * 16 Weak Mutation 30: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - ReplaceVariable argKey -> this
   * 17 Weak Mutation 37: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - ReplaceComparisonOperator != -> >
   * 18 Weak Mutation 40: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - ReplaceConstant - 0 -> 1
   * 19 Weak Mutation 85: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - ReplaceVariable a1Len -> a2Len
   * 20 Weak Mutation 81: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:90 - ReplaceVariable key1 -> key2
   * 21 Weak Mutation 83: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:91 - ReplaceVariable key2 -> key1
   * 22 Weak Mutation 95: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - ReplaceVariable key1 -> key2
   * 23 Weak Mutation 89: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - ReplaceVariable a2Len -> a1Len
   * 24 Weak Mutation 103: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - ReplaceVariable key2 -> key1
   * 25 Weak Mutation 158: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable limit -> a2Len
   * 26 Weak Mutation 171: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceVariable a2Len -> a1Len
   * 27 Weak Mutation 172: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceVariable a2Len -> limit
   * 28 Weak Mutation 167: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceVariable a1Len -> a2Len
   * 29 Weak Mutation 177: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceArithmeticOperator - -> %
   */
  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Key key0 = new Key(byteArray0);
      assertNotNull(key0);
      
      byte[] byteArray1 = new byte[40];
      Key key1 = new Key(byteArray1);
      boolean boolean0 = key0.equals((Object) key1);
      assertFalse(key1.equals(key0));
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 57 covered goals:
   * 1 Weak Mutation 36: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - ReplaceComparisonOperator != -> <
   * 2 Weak Mutation 111: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - ReplaceVariable b1 -> b2
   * 3 Weak Mutation 119: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - ReplaceComparisonOperator != -> >
   * 4 Weak Mutation 115: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - ReplaceVariable b2 -> b1
   * 5 Weak Mutation 127: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 1
   * 6 Weak Mutation 126: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 0
   * 7 Weak Mutation 125: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp IINC -1 b1
   * 8 Weak Mutation 124: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp IINC 1 b1
   * 9 Weak Mutation 123: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp Negation of b1
   * 10 Weak Mutation 122: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceVariable b1 -> b2
   * 11 Weak Mutation 137: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 0
   * 12 Weak Mutation 136: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp IINC -1 b2
   * 13 Weak Mutation 139: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> -1
   * 14 Weak Mutation 138: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 1
   * 15 Weak Mutation 141: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 256
   * 16 Weak Mutation 140: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 254
   * 17 Weak Mutation 143: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceBitwiseOperator & -> ^
   * 18 Weak Mutation 142: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceBitwiseOperator & -> |
   * 19 Weak Mutation 129: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 254
   * 20 Weak Mutation 128: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> -1
   * 21 Weak Mutation 131: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceBitwiseOperator & -> |
   * 22 Weak Mutation 130: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 256
   * 23 Weak Mutation 133: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceVariable b2 -> b1
   * 24 Weak Mutation 132: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceBitwiseOperator & -> ^
   * 25 Weak Mutation 135: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp IINC 1 b2
   * 26 Weak Mutation 134: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp Negation of b2
   * 27 Weak Mutation 145: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceArithmeticOperator - -> %
   * 28 Weak Mutation 146: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceArithmeticOperator - -> /
   * 29 com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I: I38 Branch 8 IF_ICMPNE L96 - true
   * 30 Weak Mutation 36: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - ReplaceComparisonOperator != -> <
   * 31 Weak Mutation 111: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - ReplaceVariable b1 -> b2
   * 32 Weak Mutation 119: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - ReplaceComparisonOperator != -> >
   * 33 Weak Mutation 115: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - ReplaceVariable b2 -> b1
   * 34 Weak Mutation 127: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 1
   * 35 Weak Mutation 126: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 0
   * 36 Weak Mutation 125: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp IINC -1 b1
   * 37 Weak Mutation 124: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp IINC 1 b1
   * 38 Weak Mutation 123: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp Negation of b1
   * 39 Weak Mutation 122: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceVariable b1 -> b2
   * 40 Weak Mutation 137: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 0
   * 41 Weak Mutation 136: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp IINC -1 b2
   * 42 Weak Mutation 139: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> -1
   * 43 Weak Mutation 138: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 1
   * 44 Weak Mutation 141: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 256
   * 45 Weak Mutation 140: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 254
   * 46 Weak Mutation 143: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceBitwiseOperator & -> ^
   * 47 Weak Mutation 142: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceBitwiseOperator & -> |
   * 48 Weak Mutation 129: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 254
   * 49 Weak Mutation 128: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> -1
   * 50 Weak Mutation 131: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceBitwiseOperator & -> |
   * 51 Weak Mutation 130: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 256
   * 52 Weak Mutation 133: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceVariable b2 -> b1
   * 53 Weak Mutation 132: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceBitwiseOperator & -> ^
   * 54 Weak Mutation 135: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp IINC 1 b2
   * 55 Weak Mutation 134: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp Negation of b2
   * 56 Weak Mutation 145: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceArithmeticOperator - -> %
   * 57 Weak Mutation 146: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceArithmeticOperator - -> /
   */
  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      Key key0 = new Key(byteArray0);
      assertNotNull(key0);
      
      byte[] byteArray1 = new byte[40];
      Key key1 = new Key(byteArray1);
      boolean boolean0 = key0.equals((Object) key1);
      assertFalse(key1.equals(key0));
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 58 covered goals:
   * 1 Weak Mutation 53: com.sleepycat.je.tree.Key.hashCode()I:71 - ReplaceArithmeticOperator + -> -
   * 2 Weak Mutation 56: com.sleepycat.je.tree.Key.hashCode()I:71 - ReplaceArithmeticOperator + -> *
   * 3 Weak Mutation 42: com.sleepycat.je.tree.Key.hashCode()I:70 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 43: com.sleepycat.je.tree.Key.hashCode()I:71 - ReplaceVariable code -> i
   * 5 Weak Mutation 41: com.sleepycat.je.tree.Key.hashCode()I:69 - ReplaceConstant - 0 -> 1
   * 6 Weak Mutation 46: com.sleepycat.je.tree.Key.hashCode()I:71 - InsertUnaryOp IINC -1 code
   * 7 Weak Mutation 47: com.sleepycat.je.tree.Key.hashCode()I:71 - ReplaceVariable key -> EMPTY_KEY
   * 8 Weak Mutation 44: com.sleepycat.je.tree.Key.hashCode()I:71 - InsertUnaryOp Negation of code
   * 9 Weak Mutation 45: com.sleepycat.je.tree.Key.hashCode()I:71 - InsertUnaryOp IINC 1 code
   * 10 Weak Mutation 51: com.sleepycat.je.tree.Key.hashCode()I:71 - InsertUnaryOp IINC 1 i
   * 11 Weak Mutation 50: com.sleepycat.je.tree.Key.hashCode()I:71 - InsertUnaryOp Negation of i
   * 12 Weak Mutation 49: com.sleepycat.je.tree.Key.hashCode()I:71 - ReplaceVariable i -> code
   * 13 Weak Mutation 48: com.sleepycat.je.tree.Key.hashCode()I:71 - DeleteField: key[B
   * 14 Weak Mutation 55: com.sleepycat.je.tree.Key.hashCode()I:71 - ReplaceArithmeticOperator + -> /
   * 15 Weak Mutation 54: com.sleepycat.je.tree.Key.hashCode()I:71 - ReplaceArithmeticOperator + -> %
   * 16 Weak Mutation 52: com.sleepycat.je.tree.Key.hashCode()I:71 - InsertUnaryOp IINC -1 i
   * 17 Weak Mutation 59: com.sleepycat.je.tree.Key.hashCode()I:70 - InsertUnaryOp Negation of i
   * 18 Weak Mutation 58: com.sleepycat.je.tree.Key.hashCode()I:70 - ReplaceVariable i -> code
   * 19 Weak Mutation 57: com.sleepycat.je.tree.Key.hashCode()I:70 - ReplaceVariable i -> code
   * 20 Weak Mutation 63: com.sleepycat.je.tree.Key.hashCode()I:70 - DeleteField: key[B
   * 21 Weak Mutation 62: com.sleepycat.je.tree.Key.hashCode()I:70 - ReplaceVariable key -> EMPTY_KEY
   * 22 Weak Mutation 61: com.sleepycat.je.tree.Key.hashCode()I:70 - InsertUnaryOp IINC -1 i
   * 23 Weak Mutation 60: com.sleepycat.je.tree.Key.hashCode()I:70 - InsertUnaryOp IINC 1 i
   * 24 Weak Mutation 68: com.sleepycat.je.tree.Key.hashCode()I:73 - InsertUnaryOp IINC 1 code
   * 25 Weak Mutation 69: com.sleepycat.je.tree.Key.hashCode()I:73 - InsertUnaryOp IINC -1 code
   * 26 Weak Mutation 65: com.sleepycat.je.tree.Key.hashCode()I:70 - ReplaceComparisonOperator < -> -2
   * 27 Weak Mutation 66: com.sleepycat.je.tree.Key.hashCode()I:70 - ReplaceComparisonOperator < -> <=
   * 28 Weak Mutation 67: com.sleepycat.je.tree.Key.hashCode()I:73 - InsertUnaryOp Negation of code
   * 29 Weak Mutation 42: com.sleepycat.je.tree.Key.hashCode()I:70 - ReplaceConstant - 0 -> 1
   * 30 Weak Mutation 43: com.sleepycat.je.tree.Key.hashCode()I:71 - ReplaceVariable code -> i
   * 31 Weak Mutation 41: com.sleepycat.je.tree.Key.hashCode()I:69 - ReplaceConstant - 0 -> 1
   * 32 Weak Mutation 46: com.sleepycat.je.tree.Key.hashCode()I:71 - InsertUnaryOp IINC -1 code
   * 33 Weak Mutation 47: com.sleepycat.je.tree.Key.hashCode()I:71 - ReplaceVariable key -> EMPTY_KEY
   * 34 Weak Mutation 44: com.sleepycat.je.tree.Key.hashCode()I:71 - InsertUnaryOp Negation of code
   * 35 Weak Mutation 45: com.sleepycat.je.tree.Key.hashCode()I:71 - InsertUnaryOp IINC 1 code
   * 36 Weak Mutation 51: com.sleepycat.je.tree.Key.hashCode()I:71 - InsertUnaryOp IINC 1 i
   * 37 Weak Mutation 50: com.sleepycat.je.tree.Key.hashCode()I:71 - InsertUnaryOp Negation of i
   * 38 Weak Mutation 49: com.sleepycat.je.tree.Key.hashCode()I:71 - ReplaceVariable i -> code
   * 39 Weak Mutation 48: com.sleepycat.je.tree.Key.hashCode()I:71 - DeleteField: key[B
   * 40 Weak Mutation 55: com.sleepycat.je.tree.Key.hashCode()I:71 - ReplaceArithmeticOperator + -> /
   * 41 Weak Mutation 54: com.sleepycat.je.tree.Key.hashCode()I:71 - ReplaceArithmeticOperator + -> %
   * 42 Weak Mutation 53: com.sleepycat.je.tree.Key.hashCode()I:71 - ReplaceArithmeticOperator + -> -
   * 43 Weak Mutation 52: com.sleepycat.je.tree.Key.hashCode()I:71 - InsertUnaryOp IINC -1 i
   * 44 Weak Mutation 59: com.sleepycat.je.tree.Key.hashCode()I:70 - InsertUnaryOp Negation of i
   * 45 Weak Mutation 58: com.sleepycat.je.tree.Key.hashCode()I:70 - ReplaceVariable i -> code
   * 46 Weak Mutation 57: com.sleepycat.je.tree.Key.hashCode()I:70 - ReplaceVariable i -> code
   * 47 Weak Mutation 56: com.sleepycat.je.tree.Key.hashCode()I:71 - ReplaceArithmeticOperator + -> *
   * 48 Weak Mutation 63: com.sleepycat.je.tree.Key.hashCode()I:70 - DeleteField: key[B
   * 49 Weak Mutation 62: com.sleepycat.je.tree.Key.hashCode()I:70 - ReplaceVariable key -> EMPTY_KEY
   * 50 Weak Mutation 61: com.sleepycat.je.tree.Key.hashCode()I:70 - InsertUnaryOp IINC -1 i
   * 51 Weak Mutation 60: com.sleepycat.je.tree.Key.hashCode()I:70 - InsertUnaryOp IINC 1 i
   * 52 Weak Mutation 68: com.sleepycat.je.tree.Key.hashCode()I:73 - InsertUnaryOp IINC 1 code
   * 53 Weak Mutation 69: com.sleepycat.je.tree.Key.hashCode()I:73 - InsertUnaryOp IINC -1 code
   * 54 Weak Mutation 65: com.sleepycat.je.tree.Key.hashCode()I:70 - ReplaceComparisonOperator < -> -2
   * 55 Weak Mutation 66: com.sleepycat.je.tree.Key.hashCode()I:70 - ReplaceComparisonOperator < -> <=
   * 56 Weak Mutation 67: com.sleepycat.je.tree.Key.hashCode()I:73 - InsertUnaryOp Negation of code
   * 57 com.sleepycat.je.tree.Key.hashCode()I: I27 Branch 6 IF_ICMPLT L70 - true
   * 58 com.sleepycat.je.tree.Key.hashCode()I: I27 Branch 6 IF_ICMPLT L70 - false
   */
  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      Key key0 = new Key(byteArray0);
      assertNotNull(key0);
      
      int int0 = key0.hashCode();
      assertEquals((-119), int0);
  }

  //Test case number: 6
  /*
   * 15 covered goals:
   * 1 Weak Mutation 70: com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I:79 - ReplaceComparisonOperator = null -> != null
   * 2 Weak Mutation 77: com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I:83 - ReplaceVariable key1 -> EMPTY_KEY
   * 3 Weak Mutation 79: com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I:83 - ReplaceVariable key2 -> EMPTY_KEY
   * 4 Weak Mutation 80: com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I:83 - DeleteStatement: compareUnsignedBytes([B[B)I
   * 5 com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I: I3 Branch 7 IFNULL L79 - true
   * 6 Weak Mutation 121: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - ReplaceComparisonOperator != -> -1
   * 7 Weak Mutation 148: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> a1Len
   * 8 Weak Mutation 149: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> limit
   * 9 Weak Mutation 150: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> a2Len
   * 10 Weak Mutation 179: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceArithmeticOperator - -> *
   * 11 Weak Mutation 176: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceArithmeticOperator - -> +
   * 12 Weak Mutation 70: com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I:79 - ReplaceComparisonOperator = null -> != null
   * 13 Weak Mutation 77: com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I:83 - ReplaceVariable key1 -> EMPTY_KEY
   * 14 Weak Mutation 79: com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I:83 - ReplaceVariable key2 -> EMPTY_KEY
   * 15 Weak Mutation 80: com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I:83 - DeleteStatement: compareUnsignedBytes([B[B)I
   */
  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = Key.compareKeys(byteArray0, byteArray0, (Comparator) null);
      assertEquals(0, int0);
  }

  //Test case number: 7
  /*
   * 28 covered goals:
   * 1 Weak Mutation 76: com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I:83 - ReplaceVariable key1 -> key2
   * 2 Weak Mutation 78: com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I:83 - ReplaceVariable key2 -> key1
   * 3 Weak Mutation 157: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable limit -> a1Len
   * 4 Weak Mutation 166: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceVariable a1Len -> limit
   * 5 Weak Mutation 10: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:30 - DeleteStatement: getData()[B
   * 6 Weak Mutation 11: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:31 - ReplaceVariable entryKey -> EMPTY_KEY
   * 7 Weak Mutation 12: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:31 - ReplaceComparisonOperator != null -> = null
   * 8 Weak Mutation 13: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:32 - DeleteField: EMPTY_KEY[B
   * 9 Weak Mutation 70: com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I:79 - ReplaceComparisonOperator = null -> != null
   * 10 Weak Mutation 77: com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I:83 - ReplaceVariable key1 -> EMPTY_KEY
   * 11 Weak Mutation 80: com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I:83 - DeleteStatement: compareUnsignedBytes([B[B)I
   * 12 Weak Mutation 171: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceVariable a2Len -> a1Len
   * 13 Weak Mutation 170: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp IINC -1 a1Len
   * 14 Weak Mutation 169: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp IINC 1 a1Len
   * 15 Weak Mutation 168: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp Negation of a1Len
   * 16 Weak Mutation 175: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp IINC -1 a2Len
   * 17 Weak Mutation 174: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp IINC 1 a2Len
   * 18 Weak Mutation 173: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - InsertUnaryOp Negation of a2Len
   * 19 Weak Mutation 167: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceVariable a1Len -> a2Len
   * 20 Weak Mutation 165: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceComparisonOperator < -> <=
   * 21 Weak Mutation 178: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceArithmeticOperator - -> /
   * 22 Weak Mutation 177: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceArithmeticOperator - -> %
   * 23 Weak Mutation 13: com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B:32 - DeleteField: EMPTY_KEY[B
   * 24 Weak Mutation 76: com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I:83 - ReplaceVariable key1 -> key2
   * 25 Weak Mutation 78: com.sleepycat.je.tree.Key.compareKeys([B[BLjava/util/Comparator;)I:83 - ReplaceVariable key2 -> key1
   * 26 Weak Mutation 157: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable limit -> a1Len
   * 27 Weak Mutation 166: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:103 - ReplaceVariable a1Len -> limit
   * 28 com.sleepycat.je.tree.Key.makeKey(Lcom/sleepycat/je/DatabaseEntry;)[B: I8 Branch 2 IFNONNULL L31 - false
   */
  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      byte[] byteArray1 = Key.makeKey(databaseEntry0);
      assertNotNull(byteArray1);
      
      int int0 = Key.compareKeys(byteArray0, byteArray1, (Comparator) null);
      assertEquals(5, int0);
  }

  //Test case number: 8
  /*
   * 89 covered goals:
   * 1 Weak Mutation 120: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - ReplaceComparisonOperator != -> <
   * 2 Weak Mutation 144: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceArithmeticOperator - -> +
   * 3 Weak Mutation 147: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceArithmeticOperator - -> *
   * 4 Weak Mutation 27: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:53 - ReplaceComparisonOperator != null -> = null
   * 5 Weak Mutation 29: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - DeleteField: key[B
   * 6 Weak Mutation 28: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - ReplaceVariable key -> EMPTY_KEY
   * 7 Weak Mutation 31: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - ReplaceVariable key -> EMPTY_KEY
   * 8 Weak Mutation 30: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - ReplaceVariable argKey -> this
   * 9 Weak Mutation 35: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - DeleteStatement: compareTo(Ljava/lang/Object;)I
   * 10 Weak Mutation 32: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - DeleteField: key[B
   * 11 Weak Mutation 33: com.sleepycat.je.tree.Key.compareTo(Ljava/lang/Object;)I:57 - DeleteStatement: compareUnsignedBytes([B[B)I
   * 12 Weak Mutation 37: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - ReplaceComparisonOperator != -> >
   * 13 Weak Mutation 85: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - ReplaceVariable a1Len -> a2Len
   * 14 Weak Mutation 84: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:91 - ReplaceVariable key2 -> EMPTY_KEY
   * 15 Weak Mutation 87: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp IINC 1 a1Len
   * 16 Weak Mutation 86: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp Negation of a1Len
   * 17 Weak Mutation 81: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:90 - ReplaceVariable key1 -> key2
   * 18 Weak Mutation 83: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:91 - ReplaceVariable key2 -> key1
   * 19 Weak Mutation 82: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:90 - ReplaceVariable key1 -> EMPTY_KEY
   * 20 Weak Mutation 93: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - DeleteStatement: min(II)I
   * 21 Weak Mutation 92: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp IINC -1 a2Len
   * 22 Weak Mutation 95: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - ReplaceVariable key1 -> key2
   * 23 Weak Mutation 94: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceConstant - 0 -> 1
   * 24 Weak Mutation 89: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - ReplaceVariable a2Len -> a1Len
   * 25 Weak Mutation 88: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp IINC -1 a1Len
   * 26 Weak Mutation 91: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp IINC 1 a2Len
   * 27 Weak Mutation 90: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:92 - InsertUnaryOp Negation of a2Len
   * 28 Weak Mutation 102: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - InsertUnaryOp IINC -1 i
   * 29 Weak Mutation 103: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - ReplaceVariable key2 -> key1
   * 30 Weak Mutation 100: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - InsertUnaryOp Negation of i
   * 31 Weak Mutation 101: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - InsertUnaryOp IINC 1 i
   * 32 Weak Mutation 98: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - ReplaceVariable i -> limit
   * 33 Weak Mutation 99: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - ReplaceVariable i -> a2Len
   * 34 Weak Mutation 96: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - ReplaceVariable key1 -> EMPTY_KEY
   * 35 Weak Mutation 97: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:94 - ReplaceVariable i -> a1Len
   * 36 Weak Mutation 110: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - InsertUnaryOp IINC -1 i
   * 37 Weak Mutation 111: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - ReplaceVariable b1 -> b2
   * 38 Weak Mutation 108: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - InsertUnaryOp Negation of i
   * 39 Weak Mutation 109: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - InsertUnaryOp IINC 1 i
   * 40 Weak Mutation 106: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - ReplaceVariable i -> limit
   * 41 Weak Mutation 107: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - ReplaceVariable i -> a2Len
   * 42 Weak Mutation 104: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - ReplaceVariable key2 -> EMPTY_KEY
   * 43 Weak Mutation 105: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:95 - ReplaceVariable i -> a1Len
   * 44 Weak Mutation 118: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp IINC -1 b2
   * 45 Weak Mutation 117: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp IINC 1 b2
   * 46 Weak Mutation 116: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp Negation of b2
   * 47 Weak Mutation 115: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - ReplaceVariable b2 -> b1
   * 48 Weak Mutation 114: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp IINC -1 b1
   * 49 Weak Mutation 113: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp IINC 1 b1
   * 50 Weak Mutation 112: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - InsertUnaryOp Negation of b1
   * 51 Weak Mutation 127: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 1
   * 52 Weak Mutation 126: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 0
   * 53 Weak Mutation 125: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp IINC -1 b1
   * 54 Weak Mutation 124: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp IINC 1 b1
   * 55 Weak Mutation 123: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp Negation of b1
   * 56 Weak Mutation 122: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceVariable b1 -> b2
   * 57 Weak Mutation 137: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 0
   * 58 Weak Mutation 136: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp IINC -1 b2
   * 59 Weak Mutation 139: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> -1
   * 60 Weak Mutation 138: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 1
   * 61 Weak Mutation 141: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 256
   * 62 Weak Mutation 140: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 254
   * 63 Weak Mutation 143: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceBitwiseOperator & -> ^
   * 64 Weak Mutation 142: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceBitwiseOperator & -> |
   * 65 Weak Mutation 129: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 254
   * 66 Weak Mutation 128: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> -1
   * 67 Weak Mutation 131: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceBitwiseOperator & -> |
   * 68 Weak Mutation 130: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceConstant - 255 -> 256
   * 69 Weak Mutation 133: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceVariable b2 -> b1
   * 70 Weak Mutation 132: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceBitwiseOperator & -> ^
   * 71 Weak Mutation 135: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp IINC 1 b2
   * 72 Weak Mutation 134: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - InsertUnaryOp Negation of b2
   * 73 Weak Mutation 152: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> limit
   * 74 Weak Mutation 153: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> a2Len
   * 75 Weak Mutation 154: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp Negation of i
   * 76 Weak Mutation 155: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp IINC 1 i
   * 77 Weak Mutation 156: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp IINC -1 i
   * 78 Weak Mutation 158: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable limit -> a2Len
   * 79 Weak Mutation 159: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable limit -> i
   * 80 Weak Mutation 145: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceArithmeticOperator - -> %
   * 81 Weak Mutation 146: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceArithmeticOperator - -> /
   * 82 Weak Mutation 151: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceVariable i -> a1Len
   * 83 Weak Mutation 162: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp IINC -1 limit
   * 84 Weak Mutation 161: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp IINC 1 limit
   * 85 Weak Mutation 160: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - InsertUnaryOp Negation of limit
   * 86 Weak Mutation 164: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:93 - ReplaceComparisonOperator < -> -2
   * 87 Weak Mutation 120: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:96 - ReplaceComparisonOperator != -> <
   * 88 Weak Mutation 144: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceArithmeticOperator - -> +
   * 89 Weak Mutation 147: com.sleepycat.je.tree.Key.compareUnsignedBytes([B[B)I:100 - ReplaceArithmeticOperator - -> *
   */
  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Key key0 = new Key(byteArray0);
      assertNotNull(key0);
      
      byte[] byteArray1 = new byte[40];
      byteArray1[0] = (byte) (-27);
      Key key1 = new Key(byteArray1);
      boolean boolean0 = key0.equals((Object) key1);
      assertFalse(key1.equals(key0));
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 46 covered goals:
   * 1 Weak Mutation 216: com.sleepycat.je.tree.Key.getNoFormatString([B)Ljava/lang/String;:135 - DeleteStatement: toString()Ljava/lang/String;
   * 2 Weak Mutation 212: com.sleepycat.je.tree.Key.getNoFormatString([B)Ljava/lang/String;:135 - ReplaceVariable key -> EMPTY_KEY
   * 3 Weak Mutation 213: com.sleepycat.je.tree.Key.getNoFormatString([B)Ljava/lang/String;:135 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 214: com.sleepycat.je.tree.Key.getNoFormatString([B)Ljava/lang/String;:135 - DeleteStatement: dumpString([BI)Ljava/lang/String;
   * 5 Weak Mutation 215: com.sleepycat.je.tree.Key.getNoFormatString([B)Ljava/lang/String;:135 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 6 Weak Mutation 211: com.sleepycat.je.tree.Key.getNoFormatString([B)Ljava/lang/String;:135 - ReplaceConstant - key= -> 
   * 7 com.sleepycat.je.tree.Key.getNoFormatString([B)Ljava/lang/String;: root-Branch
   * 8 Weak Mutation 186: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:108 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 9 Weak Mutation 184: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:107 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 10 Weak Mutation 185: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:108 - ReplaceConstant - <key v=" -> 
   * 11 Weak Mutation 190: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:109 - ReplaceComparisonOperator == -> !=
   * 12 Weak Mutation 188: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:109 - InsertUnaryOp Negation
   * 13 Weak Mutation 182: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:107 - InsertUnaryOp IINC -1 nspaces
   * 14 Weak Mutation 183: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:107 - DeleteStatement: indent(I)Ljava/lang/String;
   * 15 Weak Mutation 180: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:107 - InsertUnaryOp Negation of nspaces
   * 16 Weak Mutation 181: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:107 - InsertUnaryOp IINC 1 nspaces
   * 17 Weak Mutation 207: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:126 - ReplaceVariable key -> EMPTY_KEY
   * 18 Weak Mutation 201: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:117 - ReplaceComparisonOperator == -> !=
   * 19 Weak Mutation 199: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:117 - InsertUnaryOp Negation
   * 20 Weak Mutation 208: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:126 - ReplaceComparisonOperator != null -> = null
   * 21 Weak Mutation 209: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:126 - ReplaceVariable key -> EMPTY_KEY
   * 22 Weak Mutation 210: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:126 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 23 Weak Mutation 186: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:108 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 24 Weak Mutation 184: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:107 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 25 Weak Mutation 185: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:108 - ReplaceConstant - <key v=" -> 
   * 26 Weak Mutation 190: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:109 - ReplaceComparisonOperator == -> !=
   * 27 Weak Mutation 188: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:109 - InsertUnaryOp Negation
   * 28 Weak Mutation 182: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:107 - InsertUnaryOp IINC -1 nspaces
   * 29 Weak Mutation 183: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:107 - DeleteStatement: indent(I)Ljava/lang/String;
   * 30 Weak Mutation 180: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:107 - InsertUnaryOp Negation of nspaces
   * 31 Weak Mutation 181: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:107 - InsertUnaryOp IINC 1 nspaces
   * 32 Weak Mutation 207: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:126 - ReplaceVariable key -> EMPTY_KEY
   * 33 Weak Mutation 201: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:117 - ReplaceComparisonOperator == -> !=
   * 34 Weak Mutation 199: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:117 - InsertUnaryOp Negation
   * 35 Weak Mutation 216: com.sleepycat.je.tree.Key.getNoFormatString([B)Ljava/lang/String;:135 - DeleteStatement: toString()Ljava/lang/String;
   * 36 Weak Mutation 212: com.sleepycat.je.tree.Key.getNoFormatString([B)Ljava/lang/String;:135 - ReplaceVariable key -> EMPTY_KEY
   * 37 Weak Mutation 213: com.sleepycat.je.tree.Key.getNoFormatString([B)Ljava/lang/String;:135 - ReplaceConstant - 0 -> 1
   * 38 Weak Mutation 214: com.sleepycat.je.tree.Key.getNoFormatString([B)Ljava/lang/String;:135 - DeleteStatement: dumpString([BI)Ljava/lang/String;
   * 39 Weak Mutation 215: com.sleepycat.je.tree.Key.getNoFormatString([B)Ljava/lang/String;:135 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 40 Weak Mutation 208: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:126 - ReplaceComparisonOperator != null -> = null
   * 41 Weak Mutation 209: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:126 - ReplaceVariable key -> EMPTY_KEY
   * 42 Weak Mutation 210: com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;:126 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 43 Weak Mutation 211: com.sleepycat.je.tree.Key.getNoFormatString([B)Ljava/lang/String;:135 - ReplaceConstant - key= -> 
   * 44 com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;: I22 Branch 10 IFEQ L109 - true
   * 45 com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;: I49 Branch 12 IFEQ L117 - true
   * 46 com.sleepycat.je.tree.Key.dumpString([BI)Ljava/lang/String;: I77 Branch 14 IFNONNULL L126 - true
   */
  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = Key.getNoFormatString(byteArray0);
      assertNotNull(string0);
      assertEquals("key=<key v=\"\u0000\u0000\u0000\u0000\u0000\"/>", string0);
  }

  //Test case number: 10
  /*
   * 13 covered goals:
   * 1 com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z: I4 Branch 4 IFEQ L63 - true
   * 2 Weak Mutation 0: com.sleepycat.je.tree.Key.<init>([B)V:21 - ReplaceVariable key -> EMPTY_KEY
   * 3 Weak Mutation 1: com.sleepycat.je.tree.Key.<init>([B)V:21 - ReplaceComparisonOperator != null -> = null
   * 4 Weak Mutation 2: com.sleepycat.je.tree.Key.<init>([B)V:25 - ReplaceVariable key -> EMPTY_KEY
   * 5 Weak Mutation 3: com.sleepycat.je.tree.Key.<init>([B)V:26 - ReplaceVariable key -> EMPTY_KEY
   * 6 Weak Mutation 4: com.sleepycat.je.tree.Key.<init>([B)V:26 - ReplaceConstant - 0 -> 1
   * 7 Weak Mutation 5: com.sleepycat.je.tree.Key.<init>([B)V:26 - ReplaceVariable key -> EMPTY_KEY
   * 8 Weak Mutation 6: com.sleepycat.je.tree.Key.<init>([B)V:26 - DeleteField: key[B
   * 9 Weak Mutation 7: com.sleepycat.je.tree.Key.<init>([B)V:26 - ReplaceConstant - 0 -> 1
   * 10 Weak Mutation 8: com.sleepycat.je.tree.Key.<init>([B)V:26 - ReplaceVariable key -> EMPTY_KEY
   * 11 Weak Mutation 9: com.sleepycat.je.tree.Key.<init>([B)V:26 - DeleteStatement: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
   * 12 Weak Mutation 34: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - ReplaceComparisonOperator == -> !=
   * 13 Weak Mutation 40: com.sleepycat.je.tree.Key.equals(Ljava/lang/Object;)Z:63 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Key key0 = new Key(byteArray0);
      assertNotNull(key0);
      
      boolean boolean0 = key0.equals((Object) "key=<key v=\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"/>");
      assertEquals(false, boolean0);
  }
}
