/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.tree.ChildReference;
import com.sleepycat.je.tree.DupCountLN;
import com.sleepycat.je.tree.Node;

@RunWith(EvoSuiteRunner.class)
public class TestChildReference_0 {


  //Test case number: 0
  /*
   * 26 covered goals:
   * 1 Weak Mutation 25: com.sleepycat.je.tree.ChildReference.setKey([B)V:61 - InsertUnaryOp Negation
   * 2 Weak Mutation 27: com.sleepycat.je.tree.ChildReference.setKey([B)V:61 - ReplaceConstant - 2 -> 0
   * 3 Weak Mutation 26: com.sleepycat.je.tree.ChildReference.setKey([B)V:61 - DeleteField: stateB
   * 4 Weak Mutation 29: com.sleepycat.je.tree.ChildReference.setKey([B)V:61 - ReplaceConstant - 2 -> -1
   * 5 Weak Mutation 28: com.sleepycat.je.tree.ChildReference.setKey([B)V:61 - ReplaceConstant - 2 -> 1
   * 6 Weak Mutation 30: com.sleepycat.je.tree.ChildReference.setKey([B)V:61 - ReplaceConstant - 2 -> 3
   * 7 Weak Mutation 32: com.sleepycat.je.tree.ChildReference.setKey([B)V:61 - ReplaceBitwiseOperator | -> ^
   * 8 com.sleepycat.je.tree.ChildReference.setKey([B)V: root-Branch
   * 9 Weak Mutation 5: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V:36 - InsertUnaryOp Negation
   * 10 Weak Mutation 6: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V:36 - ReplaceConstant - 2 -> 0
   * 11 Weak Mutation 7: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V:36 - ReplaceConstant - 2 -> 1
   * 12 Weak Mutation 8: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V:36 - ReplaceConstant - 2 -> -1
   * 13 Weak Mutation 9: com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V:36 - ReplaceConstant - 2 -> 3
   * 14 Weak Mutation 21: com.sleepycat.je.tree.ChildReference.init(Lcom/sleepycat/je/tree/Node;[BJI)V:48 - InsertUnaryOp Negation
   * 15 Weak Mutation 20: com.sleepycat.je.tree.ChildReference.init(Lcom/sleepycat/je/tree/Node;[BJI)V:47 - InsertUnaryOp Negation
   * 16 Weak Mutation 23: com.sleepycat.je.tree.ChildReference.init(Lcom/sleepycat/je/tree/Node;[BJI)V:48 - InsertUnaryOp IINC -1
   * 17 Weak Mutation 22: com.sleepycat.je.tree.ChildReference.init(Lcom/sleepycat/je/tree/Node;[BJI)V:48 - InsertUnaryOp IINC 1
   * 18 Weak Mutation 25: com.sleepycat.je.tree.ChildReference.setKey([B)V:61 - InsertUnaryOp Negation
   * 19 Weak Mutation 27: com.sleepycat.je.tree.ChildReference.setKey([B)V:61 - ReplaceConstant - 2 -> 0
   * 20 Weak Mutation 26: com.sleepycat.je.tree.ChildReference.setKey([B)V:61 - DeleteField: stateB
   * 21 Weak Mutation 29: com.sleepycat.je.tree.ChildReference.setKey([B)V:61 - ReplaceConstant - 2 -> -1
   * 22 Weak Mutation 28: com.sleepycat.je.tree.ChildReference.setKey([B)V:61 - ReplaceConstant - 2 -> 1
   * 23 Weak Mutation 30: com.sleepycat.je.tree.ChildReference.setKey([B)V:61 - ReplaceConstant - 2 -> 3
   * 24 Weak Mutation 32: com.sleepycat.je.tree.ChildReference.setKey([B)V:61 - ReplaceBitwiseOperator | -> ^
   * 25 com.sleepycat.je.tree.ChildReference.init(Lcom/sleepycat/je/tree/Node;[BJI)V: root-Branch
   * 26 com.sleepycat.je.tree.ChildReference.<init>(Lcom/sleepycat/je/tree/Node;[BJ)V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-663));
      byte[] byteArray0 = new byte[1];
      ChildReference childReference0 = new ChildReference((Node) dupCountLN0, byteArray0, (long) (-663));
      childReference0.setKey(byteArray0);
      assertEquals(4294969342L, dupCountLN0.getNodeId());
      assertEquals((-663L), childReference0.getLsn());
  }
}
