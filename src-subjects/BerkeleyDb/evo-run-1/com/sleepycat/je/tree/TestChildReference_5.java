/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.tree.ChildReference;
import com.sleepycat.je.tree.DIN;
import com.sleepycat.je.tree.DupCountLN;
import com.sleepycat.je.tree.IN;
import com.sleepycat.je.tree.LN;
import com.sleepycat.je.tree.Node;

@RunWith(EvoSuiteRunner.class)
public class TestChildReference_5 {


  //Test case number: 5
  /*
   * 23 covered goals:
   * 1 Weak Mutation 42: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:81 - ReplaceComparisonOperator != -> >
   * 2 Weak Mutation 52: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:88 - DeleteStatement: getDbEnvironment()Lcom/sleepycat/je/dbi/EnvironmentImpl;
   * 3 Weak Mutation 53: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:89 - DeleteStatement: getLogManager()Lcom/sleepycat/je/log/LogManager;
   * 4 Weak Mutation 74: com.sleepycat.je.tree.ChildReference.setLsn(J)V:149 - InsertUnaryOp Negation
   * 5 Weak Mutation 77: com.sleepycat.je.tree.ChildReference.setLsn(J)V:150 - ReplaceConstant - 2 -> 0
   * 6 Weak Mutation 78: com.sleepycat.je.tree.ChildReference.setLsn(J)V:150 - ReplaceConstant - 2 -> 1
   * 7 Weak Mutation 79: com.sleepycat.je.tree.ChildReference.setLsn(J)V:150 - ReplaceConstant - 2 -> -1
   * 8 Weak Mutation 75: com.sleepycat.je.tree.ChildReference.setLsn(J)V:150 - InsertUnaryOp Negation
   * 9 Weak Mutation 81: com.sleepycat.je.tree.ChildReference.setLsn(J)V:150 - ReplaceBitwiseOperator | -> &
   * 10 Weak Mutation 80: com.sleepycat.je.tree.ChildReference.setLsn(J)V:150 - ReplaceConstant - 2 -> 3
   * 11 com.sleepycat.je.tree.ChildReference.setLsn(J)V: root-Branch
   * 12 com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;: I11 Branch 2 IFNE L81 - true
   * 13 Weak Mutation 36: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:81 - DeleteField: lsnJ
   * 14 Weak Mutation 42: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:81 - ReplaceComparisonOperator != -> >
   * 15 Weak Mutation 53: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:89 - DeleteStatement: getLogManager()Lcom/sleepycat/je/log/LogManager;
   * 16 Weak Mutation 52: com.sleepycat.je.tree.ChildReference.fetchTarget(Lcom/sleepycat/je/dbi/DatabaseImpl;Lcom/sleepycat/je/tree/IN;)Lcom/sleepycat/je/tree/Node;:88 - DeleteStatement: getDbEnvironment()Lcom/sleepycat/je/dbi/EnvironmentImpl;
   * 17 Weak Mutation 77: com.sleepycat.je.tree.ChildReference.setLsn(J)V:150 - ReplaceConstant - 2 -> 0
   * 18 Weak Mutation 78: com.sleepycat.je.tree.ChildReference.setLsn(J)V:150 - ReplaceConstant - 2 -> 1
   * 19 Weak Mutation 79: com.sleepycat.je.tree.ChildReference.setLsn(J)V:150 - ReplaceConstant - 2 -> -1
   * 20 Weak Mutation 74: com.sleepycat.je.tree.ChildReference.setLsn(J)V:149 - InsertUnaryOp Negation
   * 21 Weak Mutation 75: com.sleepycat.je.tree.ChildReference.setLsn(J)V:150 - InsertUnaryOp Negation
   * 22 Weak Mutation 81: com.sleepycat.je.tree.ChildReference.setLsn(J)V:150 - ReplaceBitwiseOperator | -> &
   * 23 Weak Mutation 80: com.sleepycat.je.tree.ChildReference.setLsn(J)V:150 - ReplaceConstant - 2 -> 3
   */
  @Test
  public void test5()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.setLsn((-1688L));
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[3];
      DIN dIN0 = new DIN(databaseImpl0, byteArray0, 0, byteArray0, childReference0, (int) (byte)0);
      try {
        childReference0.fetchTarget(databaseImpl0, (IN) dIN0);
        fail("Expecting exception: DatabaseException");
      } catch(DatabaseException e) {
        /*
         * fetchTarget of 0xffffffff/0xfffff968 IN=4294971235 state=2 java.lang.NullPointerException
         */
      }
  }
}
