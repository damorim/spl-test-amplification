/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.tree.DupCountLN;
import com.sleepycat.je.tree.LN;

@RunWith(EvoSuiteRunner.class)
public class TestLN_1 {


  //Test case number: 1
  /*
   * 76 covered goals:
   * 1 Weak Mutation 59: com.sleepycat.je.tree.LN.isDeleted()Z:92 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 57: com.sleepycat.je.tree.LN.isDeleted()Z:92 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 56: com.sleepycat.je.tree.LN.isDeleted()Z:92 - DeleteField: data[B
   * 4 Weak Mutation 205: com.sleepycat.je.tree.LN.getLogSize()I:312 - ReplaceArithmeticOperator + -> *
   * 5 Weak Mutation 204: com.sleepycat.je.tree.LN.getLogSize()I:312 - ReplaceArithmeticOperator + -> /
   * 6 Weak Mutation 201: com.sleepycat.je.tree.LN.getLogSize()I:312 - DeleteStatement: getBooleanLogSize()I
   * 7 Weak Mutation 200: com.sleepycat.je.tree.LN.getLogSize()I:312 - InsertUnaryOp IINC -1
   * 8 Weak Mutation 203: com.sleepycat.je.tree.LN.getLogSize()I:312 - ReplaceArithmeticOperator + -> %
   * 9 Weak Mutation 202: com.sleepycat.je.tree.LN.getLogSize()I:312 - ReplaceArithmeticOperator + -> -
   * 10 Weak Mutation 199: com.sleepycat.je.tree.LN.getLogSize()I:312 - InsertUnaryOp IINC 1
   * 11 Weak Mutation 198: com.sleepycat.je.tree.LN.getLogSize()I:312 - InsertUnaryOp Negation
   * 12 Weak Mutation 207: com.sleepycat.je.tree.LN.getLogSize()I:313 - ReplaceComparisonOperator != -> ==
   * 13 Weak Mutation 206: com.sleepycat.je.tree.LN.getLogSize()I:313 - DeleteStatement: isDeleted()Z
   * 14 Weak Mutation 216: com.sleepycat.je.tree.LN.getLogSize()I:314 - ReplaceArithmeticOperator + -> *
   * 15 Weak Mutation 212: com.sleepycat.je.tree.LN.getLogSize()I:314 - DeleteStatement: getByteArrayLogSize([B)I
   * 16 Weak Mutation 213: com.sleepycat.je.tree.LN.getLogSize()I:314 - ReplaceArithmeticOperator + -> -
   * 17 Weak Mutation 214: com.sleepycat.je.tree.LN.getLogSize()I:314 - ReplaceArithmeticOperator + -> %
   * 18 Weak Mutation 215: com.sleepycat.je.tree.LN.getLogSize()I:314 - ReplaceArithmeticOperator + -> /
   * 19 Weak Mutation 208: com.sleepycat.je.tree.LN.getLogSize()I:314 - InsertUnaryOp Negation
   * 20 Weak Mutation 209: com.sleepycat.je.tree.LN.getLogSize()I:314 - InsertUnaryOp IINC 1
   * 21 Weak Mutation 210: com.sleepycat.je.tree.LN.getLogSize()I:314 - InsertUnaryOp IINC -1
   * 22 Weak Mutation 211: com.sleepycat.je.tree.LN.getLogSize()I:314 - DeleteField: data[B
   * 23 Weak Mutation 217: com.sleepycat.je.tree.LN.getLogSize()I:316 - InsertUnaryOp Negation
   * 24 Weak Mutation 218: com.sleepycat.je.tree.LN.getLogSize()I:316 - InsertUnaryOp IINC 1
   * 25 Weak Mutation 219: com.sleepycat.je.tree.LN.getLogSize()I:316 - InsertUnaryOp IINC -1
   * 26 com.sleepycat.je.tree.LN.isDeleted()Z: I4 Branch 5 IFNONNULL L92 - true
   * 27 com.sleepycat.je.tree.LN.getLogSize()I: I15 Branch 12 IFNE L313 - false
   * 28 Weak Mutation 2: com.sleepycat.je.tree.LN.<init>(Lcom/sleepycat/je/DatabaseEntry;)V:59 - DeleteStatement: getData()[B
   * 29 Weak Mutation 3: com.sleepycat.je.tree.LN.<init>(Lcom/sleepycat/je/DatabaseEntry;)V:60 - ReplaceComparisonOperator != null -> = null
   * 30 Weak Mutation 4: com.sleepycat.je.tree.LN.<init>(Lcom/sleepycat/je/DatabaseEntry;)V:63 - DeleteStatement: getPartial()Z
   * 31 Weak Mutation 5: com.sleepycat.je.tree.LN.<init>(Lcom/sleepycat/je/DatabaseEntry;)V:63 - ReplaceComparisonOperator == -> !=
   * 32 Weak Mutation 15: com.sleepycat.je.tree.LN.<init>(Lcom/sleepycat/je/DatabaseEntry;)V:67 - DeleteStatement: getOffset()I
   * 33 Weak Mutation 16: com.sleepycat.je.tree.LN.<init>(Lcom/sleepycat/je/DatabaseEntry;)V:67 - DeleteStatement: getSize()I
   * 34 Weak Mutation 20: com.sleepycat.je.tree.LN.init([BIIII)V:71 - ReplaceComparisonOperator != -> <
   * 35 Weak Mutation 25: com.sleepycat.je.tree.LN.init([BIIII)V:75 - InsertUnaryOp IINC 1
   * 36 Weak Mutation 24: com.sleepycat.je.tree.LN.init([BIIII)V:75 - InsertUnaryOp Negation
   * 37 Weak Mutation 27: com.sleepycat.je.tree.LN.init([BIIII)V:76 - InsertUnaryOp Negation
   * 38 Weak Mutation 26: com.sleepycat.je.tree.LN.init([BIIII)V:75 - InsertUnaryOp IINC -1
   * 39 Weak Mutation 29: com.sleepycat.je.tree.LN.init([BIIII)V:76 - InsertUnaryOp IINC -1
   * 40 Weak Mutation 28: com.sleepycat.je.tree.LN.init([BIIII)V:76 - InsertUnaryOp IINC 1
   * 41 Weak Mutation 31: com.sleepycat.je.tree.LN.init([BIIII)V:76 - InsertUnaryOp Negation
   * 42 Weak Mutation 30: com.sleepycat.je.tree.LN.init([BIIII)V:76 - DeleteField: data[B
   * 43 Weak Mutation 34: com.sleepycat.je.tree.LN.init([BIIII)V:76 - InsertUnaryOp Negation
   * 44 Weak Mutation 35: com.sleepycat.je.tree.LN.init([BIIII)V:76 - InsertUnaryOp IINC 1
   * 45 Weak Mutation 32: com.sleepycat.je.tree.LN.init([BIIII)V:76 - InsertUnaryOp IINC 1
   * 46 Weak Mutation 33: com.sleepycat.je.tree.LN.init([BIIII)V:76 - InsertUnaryOp IINC -1
   * 47 Weak Mutation 36: com.sleepycat.je.tree.LN.init([BIIII)V:76 - InsertUnaryOp IINC -1
   * 48 Weak Mutation 37: com.sleepycat.je.tree.LN.init([BIIII)V:76 - DeleteStatement: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V
   * 49 Weak Mutation 59: com.sleepycat.je.tree.LN.isDeleted()Z:92 - ReplaceConstant - 0 -> 1
   * 50 Weak Mutation 57: com.sleepycat.je.tree.LN.isDeleted()Z:92 - ReplaceComparisonOperator != null -> = null
   * 51 Weak Mutation 56: com.sleepycat.je.tree.LN.isDeleted()Z:92 - DeleteField: data[B
   * 52 Weak Mutation 205: com.sleepycat.je.tree.LN.getLogSize()I:312 - ReplaceArithmeticOperator + -> *
   * 53 Weak Mutation 204: com.sleepycat.je.tree.LN.getLogSize()I:312 - ReplaceArithmeticOperator + -> /
   * 54 Weak Mutation 207: com.sleepycat.je.tree.LN.getLogSize()I:313 - ReplaceComparisonOperator != -> ==
   * 55 Weak Mutation 206: com.sleepycat.je.tree.LN.getLogSize()I:313 - DeleteStatement: isDeleted()Z
   * 56 Weak Mutation 201: com.sleepycat.je.tree.LN.getLogSize()I:312 - DeleteStatement: getBooleanLogSize()I
   * 57 Weak Mutation 200: com.sleepycat.je.tree.LN.getLogSize()I:312 - InsertUnaryOp IINC -1
   * 58 Weak Mutation 203: com.sleepycat.je.tree.LN.getLogSize()I:312 - ReplaceArithmeticOperator + -> %
   * 59 Weak Mutation 202: com.sleepycat.je.tree.LN.getLogSize()I:312 - ReplaceArithmeticOperator + -> -
   * 60 Weak Mutation 199: com.sleepycat.je.tree.LN.getLogSize()I:312 - InsertUnaryOp IINC 1
   * 61 Weak Mutation 198: com.sleepycat.je.tree.LN.getLogSize()I:312 - InsertUnaryOp Negation
   * 62 Weak Mutation 216: com.sleepycat.je.tree.LN.getLogSize()I:314 - ReplaceArithmeticOperator + -> *
   * 63 Weak Mutation 217: com.sleepycat.je.tree.LN.getLogSize()I:316 - InsertUnaryOp Negation
   * 64 Weak Mutation 218: com.sleepycat.je.tree.LN.getLogSize()I:316 - InsertUnaryOp IINC 1
   * 65 Weak Mutation 219: com.sleepycat.je.tree.LN.getLogSize()I:316 - InsertUnaryOp IINC -1
   * 66 Weak Mutation 212: com.sleepycat.je.tree.LN.getLogSize()I:314 - DeleteStatement: getByteArrayLogSize([B)I
   * 67 Weak Mutation 213: com.sleepycat.je.tree.LN.getLogSize()I:314 - ReplaceArithmeticOperator + -> -
   * 68 Weak Mutation 214: com.sleepycat.je.tree.LN.getLogSize()I:314 - ReplaceArithmeticOperator + -> %
   * 69 Weak Mutation 215: com.sleepycat.je.tree.LN.getLogSize()I:314 - ReplaceArithmeticOperator + -> /
   * 70 Weak Mutation 208: com.sleepycat.je.tree.LN.getLogSize()I:314 - InsertUnaryOp Negation
   * 71 Weak Mutation 209: com.sleepycat.je.tree.LN.getLogSize()I:314 - InsertUnaryOp IINC 1
   * 72 Weak Mutation 210: com.sleepycat.je.tree.LN.getLogSize()I:314 - InsertUnaryOp IINC -1
   * 73 Weak Mutation 211: com.sleepycat.je.tree.LN.getLogSize()I:314 - DeleteField: data[B
   * 74 com.sleepycat.je.tree.LN.init([BIIII)V: I3 Branch 4 IFNE L71 - true
   * 75 com.sleepycat.je.tree.LN.<init>(Lcom/sleepycat/je/DatabaseEntry;)V: I13 Branch 2 IFNONNULL L60 - true
   * 76 com.sleepycat.je.tree.LN.<init>(Lcom/sleepycat/je/DatabaseEntry;)V: I24 Branch 3 IFEQ L63 - true
   */
  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      LN lN0 = new LN(databaseEntry0);
      assertNotNull(lN0);
      
      int int0 = lN0.getLogSize();
      assertEquals(4294969548L, lN0.getLastId());
      assertEquals(16, int0);
  }
}
