/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.log.LogException;
import com.sleepycat.je.tree.DupCountLN;
import java.nio.ByteBuffer;

@RunWith(EvoSuiteRunner.class)
public class TestDupCountLN {


  //Test case number: 0
  /*
   * 25 covered goals:
   * 1 Weak Mutation 11: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - DeleteField: dupCountI
   * 2 Weak Mutation 25: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - ReplaceComparisonOperator >= -> >
   * 3 Weak Mutation 0: com.sleepycat.je.tree.DupCountLN.<init>(I)V:20 - InsertUnaryOp Negation of count
   * 4 Weak Mutation 1: com.sleepycat.je.tree.DupCountLN.<init>(I)V:20 - InsertUnaryOp IINC 1 count
   * 5 Weak Mutation 2: com.sleepycat.je.tree.DupCountLN.<init>(I)V:20 - InsertUnaryOp IINC -1 count
   * 6 Weak Mutation 8: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - InsertUnaryOp Negation
   * 7 Weak Mutation 9: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - InsertUnaryOp +1
   * 8 Weak Mutation 10: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - InsertUnaryOp -1
   * 9 Weak Mutation 11: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - DeleteField: dupCountI
   * 10 Weak Mutation 12: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - ReplaceConstant - 1 -> 0
   * 11 Weak Mutation 13: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - ReplaceArithmeticOperator + -> -
   * 12 Weak Mutation 15: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - ReplaceArithmeticOperator + -> /
   * 13 Weak Mutation 17: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - InsertUnaryOp Negation
   * 14 Weak Mutation 16: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - ReplaceArithmeticOperator + -> *
   * 15 Weak Mutation 19: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - ReplaceComparisonOperator != -> ==
   * 16 Weak Mutation 21: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - InsertUnaryOp +1
   * 17 Weak Mutation 20: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - InsertUnaryOp Negation
   * 18 Weak Mutation 22: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - InsertUnaryOp -1
   * 19 Weak Mutation 25: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - ReplaceComparisonOperator >= -> >
   * 20 Weak Mutation 27: com.sleepycat.je.tree.DupCountLN.incDupCount()I:35 - InsertUnaryOp Negation
   * 21 Weak Mutation 29: com.sleepycat.je.tree.DupCountLN.incDupCount()I:35 - InsertUnaryOp -1
   * 22 Weak Mutation 28: com.sleepycat.je.tree.DupCountLN.incDupCount()I:35 - InsertUnaryOp +1
   * 23 com.sleepycat.je.tree.DupCountLN.<init>(I)V: root-Branch
   * 24 com.sleepycat.je.tree.DupCountLN.incDupCount()I: I11 Branch 2 IFNE L34 - false
   * 25 com.sleepycat.je.tree.DupCountLN.incDupCount()I: I14 Branch 3 IFGE L34 - true
   */
  @Test
  public void test0()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-1));
      int int0 = dupCountLN0.incDupCount();
      assertEquals(0, dupCountLN0.getDupCount());
      assertEquals(0, int0);
  }

  //Test case number: 1
  /*
   * 36 covered goals:
   * 1 Weak Mutation 7: com.sleepycat.je.tree.DupCountLN.getDupCount()I:30 - DeleteField: dupCountI
   * 2 Weak Mutation 8: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - InsertUnaryOp Negation
   * 3 Weak Mutation 9: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - InsertUnaryOp +1
   * 4 Weak Mutation 10: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - InsertUnaryOp -1
   * 5 Weak Mutation 12: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 13: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - ReplaceArithmeticOperator + -> -
   * 7 Weak Mutation 14: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - ReplaceArithmeticOperator + -> %
   * 8 Weak Mutation 15: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - ReplaceArithmeticOperator + -> /
   * 9 Weak Mutation 16: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - ReplaceArithmeticOperator + -> *
   * 10 Weak Mutation 17: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - InsertUnaryOp Negation
   * 11 Weak Mutation 19: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - ReplaceComparisonOperator != -> ==
   * 12 Weak Mutation 21: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - InsertUnaryOp +1
   * 13 Weak Mutation 20: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - InsertUnaryOp Negation
   * 14 Weak Mutation 23: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - DeleteField: dupCountI
   * 15 Weak Mutation 22: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - InsertUnaryOp -1
   * 16 Weak Mutation 24: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - ReplaceComparisonOperator >= -> ==
   * 17 Weak Mutation 27: com.sleepycat.je.tree.DupCountLN.incDupCount()I:35 - InsertUnaryOp Negation
   * 18 Weak Mutation 29: com.sleepycat.je.tree.DupCountLN.incDupCount()I:35 - InsertUnaryOp -1
   * 19 Weak Mutation 28: com.sleepycat.je.tree.DupCountLN.incDupCount()I:35 - InsertUnaryOp +1
   * 20 Weak Mutation 30: com.sleepycat.je.tree.DupCountLN.incDupCount()I:35 - DeleteField: dupCountI
   * 21 com.sleepycat.je.tree.DupCountLN.incDupCount()I: I11 Branch 2 IFNE L34 - false
   * 22 com.sleepycat.je.tree.DupCountLN.incDupCount()I: I14 Branch 3 IFGE L34 - true
   * 23 Weak Mutation 4: com.sleepycat.je.tree.DupCountLN.getDupCount()I:30 - InsertUnaryOp Negation
   * 24 Weak Mutation 5: com.sleepycat.je.tree.DupCountLN.getDupCount()I:30 - InsertUnaryOp +1
   * 25 Weak Mutation 6: com.sleepycat.je.tree.DupCountLN.getDupCount()I:30 - InsertUnaryOp -1
   * 26 Weak Mutation 3: com.sleepycat.je.tree.DupCountLN.<init>()V:27 - ReplaceConstant - 0 -> 1
   * 27 Weak Mutation 4: com.sleepycat.je.tree.DupCountLN.getDupCount()I:30 - InsertUnaryOp Negation
   * 28 Weak Mutation 5: com.sleepycat.je.tree.DupCountLN.getDupCount()I:30 - InsertUnaryOp +1
   * 29 Weak Mutation 6: com.sleepycat.je.tree.DupCountLN.getDupCount()I:30 - InsertUnaryOp -1
   * 30 Weak Mutation 7: com.sleepycat.je.tree.DupCountLN.getDupCount()I:30 - DeleteField: dupCountI
   * 31 Weak Mutation 14: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - ReplaceArithmeticOperator + -> %
   * 32 Weak Mutation 23: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - DeleteField: dupCountI
   * 33 Weak Mutation 24: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - ReplaceComparisonOperator >= -> ==
   * 34 Weak Mutation 30: com.sleepycat.je.tree.DupCountLN.incDupCount()I:35 - DeleteField: dupCountI
   * 35 com.sleepycat.je.tree.DupCountLN.getDupCount()I: root-Branch
   * 36 com.sleepycat.je.tree.DupCountLN.<init>()V: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      dupCountLN0.incDupCount();
      int int0 = dupCountLN0.getDupCount();
      assertEquals(4294967946L, dupCountLN0.getNextNodeId());
      assertEquals(1, int0);
  }

  //Test case number: 2
  /*
   * 11 covered goals:
   * 1 Weak Mutation 26: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 55: com.sleepycat.je.tree.DupCountLN.setDupCount(I)V:43 - InsertUnaryOp IINC 1 dupCount
   * 3 Weak Mutation 54: com.sleepycat.je.tree.DupCountLN.setDupCount(I)V:43 - InsertUnaryOp Negation of dupCount
   * 4 Weak Mutation 56: com.sleepycat.je.tree.DupCountLN.setDupCount(I)V:43 - InsertUnaryOp IINC -1 dupCount
   * 5 com.sleepycat.je.tree.DupCountLN.setDupCount(I)V: root-Branch
   * 6 com.sleepycat.je.tree.DupCountLN.incDupCount()I: I14 Branch 3 IFGE L34 - false
   * 7 Weak Mutation 11: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - DeleteField: dupCountI
   * 8 Weak Mutation 26: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - ReplaceComparisonOperator >= -> -1
   * 9 Weak Mutation 55: com.sleepycat.je.tree.DupCountLN.setDupCount(I)V:43 - InsertUnaryOp IINC 1 dupCount
   * 10 Weak Mutation 54: com.sleepycat.je.tree.DupCountLN.setDupCount(I)V:43 - InsertUnaryOp Negation of dupCount
   * 11 Weak Mutation 56: com.sleepycat.je.tree.DupCountLN.setDupCount(I)V:43 - InsertUnaryOp IINC -1 dupCount
   */
  @Test
  public void test2()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      dupCountLN0.setDupCount((-2));
      // Undeclared exception!
      try {
        dupCountLN0.incDupCount();
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
      }
  }

  //Test case number: 3
  /*
   * 32 covered goals:
   * 1 Weak Mutation 31: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - InsertUnaryOp Negation
   * 2 Weak Mutation 35: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - ReplaceConstant - 1 -> 0
   * 3 Weak Mutation 32: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - InsertUnaryOp +1
   * 4 Weak Mutation 33: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - InsertUnaryOp -1
   * 5 Weak Mutation 38: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - ReplaceArithmeticOperator - -> /
   * 6 Weak Mutation 39: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - ReplaceArithmeticOperator - -> *
   * 7 Weak Mutation 36: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - ReplaceArithmeticOperator - -> +
   * 8 Weak Mutation 37: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - ReplaceArithmeticOperator - -> %
   * 9 Weak Mutation 42: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - ReplaceComparisonOperator != -> ==
   * 10 Weak Mutation 43: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - InsertUnaryOp Negation
   * 11 Weak Mutation 40: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - InsertUnaryOp Negation
   * 12 Weak Mutation 46: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - DeleteField: dupCountI
   * 13 Weak Mutation 44: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - InsertUnaryOp +1
   * 14 Weak Mutation 45: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - InsertUnaryOp -1
   * 15 Weak Mutation 49: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - ReplaceComparisonOperator >= -> -1
   * 16 com.sleepycat.je.tree.DupCountLN.decDupCount()I: I11 Branch 4 IFNE L39 - false
   * 17 com.sleepycat.je.tree.DupCountLN.decDupCount()I: I14 Branch 5 IFGE L39 - false
   * 18 Weak Mutation 31: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - InsertUnaryOp Negation
   * 19 Weak Mutation 35: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - ReplaceConstant - 1 -> 0
   * 20 Weak Mutation 32: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - InsertUnaryOp +1
   * 21 Weak Mutation 33: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - InsertUnaryOp -1
   * 22 Weak Mutation 38: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - ReplaceArithmeticOperator - -> /
   * 23 Weak Mutation 39: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - ReplaceArithmeticOperator - -> *
   * 24 Weak Mutation 36: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - ReplaceArithmeticOperator - -> +
   * 25 Weak Mutation 37: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - ReplaceArithmeticOperator - -> %
   * 26 Weak Mutation 42: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - ReplaceComparisonOperator != -> ==
   * 27 Weak Mutation 43: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - InsertUnaryOp Negation
   * 28 Weak Mutation 40: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - InsertUnaryOp Negation
   * 29 Weak Mutation 46: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - DeleteField: dupCountI
   * 30 Weak Mutation 44: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - InsertUnaryOp +1
   * 31 Weak Mutation 45: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - InsertUnaryOp -1
   * 32 Weak Mutation 49: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - ReplaceComparisonOperator >= -> -1
   */
  @Test
  public void test3()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      // Undeclared exception!
      try {
        dupCountLN0.decDupCount();
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
      }
  }

  //Test case number: 4
  /*
   * 11 covered goals:
   * 1 Weak Mutation 34: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - DeleteField: dupCountI
   * 2 Weak Mutation 48: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - ReplaceComparisonOperator >= -> >
   * 3 Weak Mutation 51: com.sleepycat.je.tree.DupCountLN.decDupCount()I:40 - InsertUnaryOp +1
   * 4 Weak Mutation 50: com.sleepycat.je.tree.DupCountLN.decDupCount()I:40 - InsertUnaryOp Negation
   * 5 Weak Mutation 52: com.sleepycat.je.tree.DupCountLN.decDupCount()I:40 - InsertUnaryOp -1
   * 6 com.sleepycat.je.tree.DupCountLN.decDupCount()I: I14 Branch 5 IFGE L39 - true
   * 7 Weak Mutation 34: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - DeleteField: dupCountI
   * 8 Weak Mutation 51: com.sleepycat.je.tree.DupCountLN.decDupCount()I:40 - InsertUnaryOp +1
   * 9 Weak Mutation 50: com.sleepycat.je.tree.DupCountLN.decDupCount()I:40 - InsertUnaryOp Negation
   * 10 Weak Mutation 48: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - ReplaceComparisonOperator >= -> >
   * 11 Weak Mutation 52: com.sleepycat.je.tree.DupCountLN.decDupCount()I:40 - InsertUnaryOp -1
   */
  @Test
  public void test4()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      dupCountLN0.incDupCount();
      int int0 = dupCountLN0.decDupCount();
      assertEquals("<dupCountLN>\n  <count v=\"0\"/>\n  <node>0</node>\n</dupCountLN>", dupCountLN0.toString());
      assertEquals(0, int0);
  }

  //Test case number: 5
  /*
   * 22 covered goals:
   * 1 Weak Mutation 47: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - ReplaceComparisonOperator >= -> ==
   * 2 Weak Mutation 53: com.sleepycat.je.tree.DupCountLN.decDupCount()I:40 - DeleteField: dupCountI
   * 3 Weak Mutation 31: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - InsertUnaryOp Negation
   * 4 Weak Mutation 34: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - DeleteField: dupCountI
   * 5 Weak Mutation 35: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 32: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - InsertUnaryOp +1
   * 7 Weak Mutation 33: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - InsertUnaryOp -1
   * 8 Weak Mutation 38: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - ReplaceArithmeticOperator - -> /
   * 9 Weak Mutation 39: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - ReplaceArithmeticOperator - -> *
   * 10 Weak Mutation 36: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - ReplaceArithmeticOperator - -> +
   * 11 Weak Mutation 37: com.sleepycat.je.tree.DupCountLN.decDupCount()I:38 - ReplaceArithmeticOperator - -> %
   * 12 Weak Mutation 42: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - ReplaceComparisonOperator != -> ==
   * 13 Weak Mutation 43: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - InsertUnaryOp Negation
   * 14 Weak Mutation 40: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - InsertUnaryOp Negation
   * 15 Weak Mutation 46: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - DeleteField: dupCountI
   * 16 Weak Mutation 44: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - InsertUnaryOp +1
   * 17 Weak Mutation 45: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - InsertUnaryOp -1
   * 18 Weak Mutation 51: com.sleepycat.je.tree.DupCountLN.decDupCount()I:40 - InsertUnaryOp +1
   * 19 Weak Mutation 50: com.sleepycat.je.tree.DupCountLN.decDupCount()I:40 - InsertUnaryOp Negation
   * 20 Weak Mutation 52: com.sleepycat.je.tree.DupCountLN.decDupCount()I:40 - InsertUnaryOp -1
   * 21 Weak Mutation 47: com.sleepycat.je.tree.DupCountLN.decDupCount()I:39 - ReplaceComparisonOperator >= -> ==
   * 22 Weak Mutation 53: com.sleepycat.je.tree.DupCountLN.decDupCount()I:40 - DeleteField: dupCountI
   */
  @Test
  public void test5()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(1307);
      int int0 = dupCountLN0.decDupCount();
      assertEquals(1306, dupCountLN0.getDupCount());
      assertEquals(1306, int0);
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * 1 Weak Mutation 57: com.sleepycat.je.tree.DupCountLN.containsDuplicates()Z:50 - ReplaceConstant - 1 -> 0
   * 2 com.sleepycat.je.tree.DupCountLN.containsDuplicates()Z: root-Branch
   * 3 Weak Mutation 57: com.sleepycat.je.tree.DupCountLN.containsDuplicates()Z:50 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test6()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      boolean boolean0 = dupCountLN0.containsDuplicates();
      assertEquals(4294968356L, dupCountLN0.getLastId());
      assertEquals(true, boolean0);
  }

  //Test case number: 7
  /*
   * 22 covered goals:
   * 1 Weak Mutation 58: com.sleepycat.je.tree.DupCountLN.isDeleted()Z:53 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 136: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceArithmeticOperator + -> *
   * 3 Weak Mutation 129: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceConstant - 4 -> 1
   * 4 Weak Mutation 128: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceConstant - 4 -> 0
   * 5 Weak Mutation 131: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceConstant - 4 -> 3
   * 6 Weak Mutation 130: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceConstant - 4 -> -1
   * 7 Weak Mutation 133: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceArithmeticOperator + -> -
   * 8 Weak Mutation 132: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceConstant - 4 -> 5
   * 9 Weak Mutation 135: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceArithmeticOperator + -> /
   * 10 Weak Mutation 134: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceArithmeticOperator + -> %
   * 11 com.sleepycat.je.tree.DupCountLN.isDeleted()Z: root-Branch
   * 12 com.sleepycat.je.tree.DupCountLN.getLogSize()I: root-Branch
   * 13 Weak Mutation 58: com.sleepycat.je.tree.DupCountLN.isDeleted()Z:53 - ReplaceConstant - 0 -> 1
   * 14 Weak Mutation 136: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceArithmeticOperator + -> *
   * 15 Weak Mutation 129: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceConstant - 4 -> 1
   * 16 Weak Mutation 128: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceConstant - 4 -> 0
   * 17 Weak Mutation 131: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceConstant - 4 -> 3
   * 18 Weak Mutation 130: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceConstant - 4 -> -1
   * 19 Weak Mutation 133: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceArithmeticOperator + -> -
   * 20 Weak Mutation 132: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceConstant - 4 -> 5
   * 21 Weak Mutation 135: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceArithmeticOperator + -> /
   * 22 Weak Mutation 134: com.sleepycat.je.tree.DupCountLN.getLogSize()I:110 - ReplaceArithmeticOperator + -> %
   */
  @Test
  public void test7()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-1));
      int int0 = dupCountLN0.getLogSize();
      assertEquals("<dupCountLN>\n  <count v=\"-1\"/>\n  <node>4294968361</node>\n  <data></data>\n</dupCountLN>", dupCountLN0.toString());
      assertEquals(17, int0);
  }

  //Test case number: 8
  /*
   * 115 covered goals:
   * 1 Weak Mutation 99: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - DeleteField: dupCountI
   * 2 Weak Mutation 8: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - InsertUnaryOp Negation
   * 3 Weak Mutation 9: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - InsertUnaryOp +1
   * 4 Weak Mutation 10: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - InsertUnaryOp -1
   * 5 Weak Mutation 12: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 13: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - ReplaceArithmeticOperator + -> -
   * 7 Weak Mutation 14: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - ReplaceArithmeticOperator + -> %
   * 8 Weak Mutation 15: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - ReplaceArithmeticOperator + -> /
   * 9 Weak Mutation 17: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - InsertUnaryOp Negation
   * 10 Weak Mutation 16: com.sleepycat.je.tree.DupCountLN.incDupCount()I:33 - ReplaceArithmeticOperator + -> *
   * 11 Weak Mutation 19: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - ReplaceComparisonOperator != -> ==
   * 12 Weak Mutation 21: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - InsertUnaryOp +1
   * 13 Weak Mutation 20: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - InsertUnaryOp Negation
   * 14 Weak Mutation 23: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - DeleteField: dupCountI
   * 15 Weak Mutation 22: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - InsertUnaryOp -1
   * 16 Weak Mutation 24: com.sleepycat.je.tree.DupCountLN.incDupCount()I:34 - ReplaceComparisonOperator >= -> ==
   * 17 Weak Mutation 27: com.sleepycat.je.tree.DupCountLN.incDupCount()I:35 - InsertUnaryOp Negation
   * 18 Weak Mutation 29: com.sleepycat.je.tree.DupCountLN.incDupCount()I:35 - InsertUnaryOp -1
   * 19 Weak Mutation 28: com.sleepycat.je.tree.DupCountLN.incDupCount()I:35 - InsertUnaryOp +1
   * 20 Weak Mutation 30: com.sleepycat.je.tree.DupCountLN.incDupCount()I:35 - DeleteField: dupCountI
   * 21 Weak Mutation 59: com.sleepycat.je.tree.DupCountLN.toString()Ljava/lang/String;:70 - ReplaceConstant - 0 -> 1
   * 22 Weak Mutation 61: com.sleepycat.je.tree.DupCountLN.toString()Ljava/lang/String;:70 - DeleteStatement: dumpString(IZ)Ljava/lang/String;
   * 23 Weak Mutation 60: com.sleepycat.je.tree.DupCountLN.toString()Ljava/lang/String;:70 - ReplaceConstant - 1 -> 0
   * 24 Weak Mutation 68: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:81 - InsertUnaryOp Negation of nSpaces
   * 25 Weak Mutation 69: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:81 - InsertUnaryOp IINC 1 nSpaces
   * 26 Weak Mutation 70: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:81 - InsertUnaryOp IINC -1 nSpaces
   * 27 Weak Mutation 71: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:81 - DeleteStatement: indent(I)Ljava/lang/String;
   * 28 Weak Mutation 76: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:83 - ReplaceConstant - 10 -> 1
   * 29 Weak Mutation 77: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:83 - ReplaceConstant - 10 -> -1
   * 30 Weak Mutation 78: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:83 - ReplaceConstant - 10 -> 9
   * 31 Weak Mutation 79: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:83 - ReplaceConstant - 10 -> 11
   * 32 Weak Mutation 72: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:81 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 33 Weak Mutation 73: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:82 - DeleteStatement: beginTag()Ljava/lang/String;
   * 34 Weak Mutation 74: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:82 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 35 Weak Mutation 75: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:83 - ReplaceConstant - 10 -> 0
   * 36 Weak Mutation 80: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:83 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 37 Weak Mutation 119: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:89 - InsertUnaryOp IINC 1 nSpaces
   * 38 Weak Mutation 118: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:89 - InsertUnaryOp Negation of nSpaces
   * 39 Weak Mutation 124: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:90 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 40 Weak Mutation 123: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:90 - DeleteStatement: endTag()Ljava/lang/String;
   * 41 Weak Mutation 122: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:89 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 42 Weak Mutation 121: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:89 - DeleteStatement: indent(I)Ljava/lang/String;
   * 43 Weak Mutation 120: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:89 - InsertUnaryOp IINC -1 nSpaces
   * 44 Weak Mutation 59: com.sleepycat.je.tree.DupCountLN.toString()Ljava/lang/String;:70 - ReplaceConstant - 0 -> 1
   * 45 Weak Mutation 63: com.sleepycat.je.tree.DupCountLN.endTag()Ljava/lang/String;:76 - ReplaceConstant - </dupCountLN> -> 
   * 46 Weak Mutation 62: com.sleepycat.je.tree.DupCountLN.beginTag()Ljava/lang/String;:73 - ReplaceConstant - <dupCountLN> -> 
   * 47 Weak Mutation 61: com.sleepycat.je.tree.DupCountLN.toString()Ljava/lang/String;:70 - DeleteStatement: dumpString(IZ)Ljava/lang/String;
   * 48 Weak Mutation 60: com.sleepycat.je.tree.DupCountLN.toString()Ljava/lang/String;:70 - ReplaceConstant - 1 -> 0
   * 49 Weak Mutation 68: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:81 - InsertUnaryOp Negation of nSpaces
   * 50 Weak Mutation 69: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:81 - InsertUnaryOp IINC 1 nSpaces
   * 51 Weak Mutation 70: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:81 - InsertUnaryOp IINC -1 nSpaces
   * 52 Weak Mutation 71: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:81 - DeleteStatement: indent(I)Ljava/lang/String;
   * 53 Weak Mutation 64: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:80 - InsertUnaryOp Negation of dumpTags
   * 54 Weak Mutation 65: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:80 - InsertUnaryOp IINC 1 dumpTags
   * 55 Weak Mutation 66: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:80 - InsertUnaryOp IINC -1 dumpTags
   * 56 Weak Mutation 67: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:80 - ReplaceComparisonOperator == -> !=
   * 57 Weak Mutation 76: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:83 - ReplaceConstant - 10 -> 1
   * 58 Weak Mutation 77: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:83 - ReplaceConstant - 10 -> -1
   * 59 Weak Mutation 78: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:83 - ReplaceConstant - 10 -> 9
   * 60 Weak Mutation 79: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:83 - ReplaceConstant - 10 -> 11
   * 61 Weak Mutation 72: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:81 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 62 Weak Mutation 73: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:82 - DeleteStatement: beginTag()Ljava/lang/String;
   * 63 Weak Mutation 74: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:82 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 64 Weak Mutation 75: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:83 - ReplaceConstant - 10 -> 0
   * 65 Weak Mutation 85: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceConstant - 2 -> 1
   * 66 Weak Mutation 84: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceConstant - 2 -> 0
   * 67 Weak Mutation 87: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceConstant - 2 -> 3
   * 68 Weak Mutation 86: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceConstant - 2 -> -1
   * 69 Weak Mutation 81: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - InsertUnaryOp Negation of nSpaces
   * 70 Weak Mutation 80: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:83 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 71 Weak Mutation 83: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - InsertUnaryOp IINC -1 nSpaces
   * 72 Weak Mutation 82: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - InsertUnaryOp IINC 1 nSpaces
   * 73 Weak Mutation 93: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 74 Weak Mutation 92: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - DeleteStatement: indent(I)Ljava/lang/String;
   * 75 Weak Mutation 95: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 76 Weak Mutation 94: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - ReplaceConstant - <count v=" -> 
   * 77 Weak Mutation 89: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceArithmeticOperator + -> %
   * 78 Weak Mutation 88: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceArithmeticOperator + -> -
   * 79 Weak Mutation 91: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceArithmeticOperator + -> *
   * 80 Weak Mutation 90: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceArithmeticOperator + -> /
   * 81 Weak Mutation 102: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 82 Weak Mutation 103: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - ReplaceConstant - 10 -> 0
   * 83 Weak Mutation 100: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - DeleteStatement: append(I)Ljava/lang/StringBuffer;
   * 84 Weak Mutation 101: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - ReplaceConstant - "/> -> 
   * 85 Weak Mutation 98: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - InsertUnaryOp -1
   * 86 Weak Mutation 99: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - DeleteField: dupCountI
   * 87 Weak Mutation 96: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - InsertUnaryOp Negation
   * 88 Weak Mutation 97: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - InsertUnaryOp +1
   * 89 Weak Mutation 110: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:87 - InsertUnaryOp IINC 1 nSpaces
   * 90 Weak Mutation 111: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:87 - InsertUnaryOp IINC -1 nSpaces
   * 91 Weak Mutation 108: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 92 Weak Mutation 109: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:87 - InsertUnaryOp Negation of nSpaces
   * 93 Weak Mutation 106: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - ReplaceConstant - 10 -> 9
   * 94 Weak Mutation 107: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - ReplaceConstant - 10 -> 11
   * 95 Weak Mutation 104: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - ReplaceConstant - 10 -> 1
   * 96 Weak Mutation 105: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - ReplaceConstant - 10 -> -1
   * 97 Weak Mutation 119: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:89 - InsertUnaryOp IINC 1 nSpaces
   * 98 Weak Mutation 118: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:89 - InsertUnaryOp Negation of nSpaces
   * 99 Weak Mutation 117: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:88 - ReplaceComparisonOperator == -> !=
   * 100 Weak Mutation 116: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:88 - InsertUnaryOp IINC -1 dumpTags
   * 101 Weak Mutation 115: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:88 - InsertUnaryOp IINC 1 dumpTags
   * 102 Weak Mutation 114: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:88 - InsertUnaryOp Negation of dumpTags
   * 103 Weak Mutation 113: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:87 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 104 Weak Mutation 112: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:87 - ReplaceConstant - 0 -> 1
   * 105 Weak Mutation 125: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:92 - DeleteStatement: toString()Ljava/lang/String;
   * 106 Weak Mutation 124: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:90 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 107 Weak Mutation 123: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:90 - DeleteStatement: endTag()Ljava/lang/String;
   * 108 Weak Mutation 122: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:89 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 109 Weak Mutation 121: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:89 - DeleteStatement: indent(I)Ljava/lang/String;
   * 110 Weak Mutation 120: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:89 - InsertUnaryOp IINC -1 nSpaces
   * 111 com.sleepycat.je.tree.DupCountLN.toString()Ljava/lang/String;: root-Branch
   * 112 com.sleepycat.je.tree.DupCountLN.endTag()Ljava/lang/String;: root-Branch
   * 113 com.sleepycat.je.tree.DupCountLN.beginTag()Ljava/lang/String;: root-Branch
   * 114 com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;: I9 Branch 6 IFEQ L80 - false
   * 115 com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;: I64 Branch 7 IFEQ L88 - false
   */
  @Test
  public void test8()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      dupCountLN0.incDupCount();
      String string0 = dupCountLN0.toString();
      assertEquals(1, dupCountLN0.getDupCount());
      assertEquals("<dupCountLN>\n  <count v=\"1\"/>\n  <node>0</node>\n</dupCountLN>", string0);
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * 1 Weak Mutation 126: com.sleepycat.je.tree.DupCountLN.getTransactionalLogType()Lcom/sleepycat/je/log/LogEntryType;:98 - DeleteField: LOG_DUPCOUNTLN_TRANSACTIONALLcom/sleepycat/je/log/LogEntryType;
   * 2 com.sleepycat.je.tree.DupCountLN.getTransactionalLogType()Lcom/sleepycat/je/log/LogEntryType;: root-Branch
   * 3 Weak Mutation 126: com.sleepycat.je.tree.DupCountLN.getTransactionalLogType()Lcom/sleepycat/je/log/LogEntryType;:98 - DeleteField: LOG_DUPCOUNTLN_TRANSACTIONALLcom/sleepycat/je/log/LogEntryType;
   */
  @Test
  public void test9()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      dupCountLN0.getTransactionalLogType();
      assertEquals(4294968673L, dupCountLN0.getLastId());
      assertEquals(4294968673L, dupCountLN0.getNextNodeId());
  }

  //Test case number: 10
  /*
   * 3 covered goals:
   * 1 Weak Mutation 127: com.sleepycat.je.tree.DupCountLN.getLogType()Lcom/sleepycat/je/log/LogEntryType;:104 - DeleteField: LOG_DUPCOUNTLNLcom/sleepycat/je/log/LogEntryType;
   * 2 com.sleepycat.je.tree.DupCountLN.getLogType()Lcom/sleepycat/je/log/LogEntryType;: root-Branch
   * 3 Weak Mutation 127: com.sleepycat.je.tree.DupCountLN.getLogType()Lcom/sleepycat/je/log/LogEntryType;:104 - DeleteField: LOG_DUPCOUNTLNLcom/sleepycat/je/log/LogEntryType;
   */
  @Test
  public void test10()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      dupCountLN0.getLogType();
      assertEquals(4294968679L, dupCountLN0.getNextNodeId());
      assertEquals(0, dupCountLN0.decDupCount());
  }

  //Test case number: 11
  /*
   * 7 covered goals:
   * 1 Weak Mutation 143: com.sleepycat.je.tree.DupCountLN.readFromLog(Ljava/nio/ByteBuffer;B)V:123 - InsertUnaryOp IINC 1 entryTypeVersion
   * 2 Weak Mutation 142: com.sleepycat.je.tree.DupCountLN.readFromLog(Ljava/nio/ByteBuffer;B)V:123 - InsertUnaryOp Negation of entryTypeVersion
   * 3 Weak Mutation 144: com.sleepycat.je.tree.DupCountLN.readFromLog(Ljava/nio/ByteBuffer;B)V:123 - InsertUnaryOp IINC -1 entryTypeVersion
   * 4 com.sleepycat.je.tree.DupCountLN.readFromLog(Ljava/nio/ByteBuffer;B)V: root-Branch
   * 5 Weak Mutation 143: com.sleepycat.je.tree.DupCountLN.readFromLog(Ljava/nio/ByteBuffer;B)V:123 - InsertUnaryOp IINC 1 entryTypeVersion
   * 6 Weak Mutation 142: com.sleepycat.je.tree.DupCountLN.readFromLog(Ljava/nio/ByteBuffer;B)V:123 - InsertUnaryOp Negation of entryTypeVersion
   * 7 Weak Mutation 144: com.sleepycat.je.tree.DupCountLN.readFromLog(Ljava/nio/ByteBuffer;B)V:123 - InsertUnaryOp IINC -1 entryTypeVersion
   */
  @Test
  public void test11()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-1));
      // Undeclared exception!
      try {
        dupCountLN0.readFromLog((ByteBuffer) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 12
  /*
   * 30 covered goals:
   * 1 Weak Mutation 154: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - DeleteField: dupCountI
   * 2 Weak Mutation 0: com.sleepycat.je.tree.DupCountLN.<init>(I)V:20 - InsertUnaryOp Negation of count
   * 3 Weak Mutation 1: com.sleepycat.je.tree.DupCountLN.<init>(I)V:20 - InsertUnaryOp IINC 1 count
   * 4 Weak Mutation 2: com.sleepycat.je.tree.DupCountLN.<init>(I)V:20 - InsertUnaryOp IINC -1 count
   * 5 Weak Mutation 63: com.sleepycat.je.tree.DupCountLN.endTag()Ljava/lang/String;:76 - ReplaceConstant - </dupCountLN> -> 
   * 6 Weak Mutation 62: com.sleepycat.je.tree.DupCountLN.beginTag()Ljava/lang/String;:73 - ReplaceConstant - <dupCountLN> -> 
   * 7 Weak Mutation 152: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - InsertUnaryOp +1
   * 8 Weak Mutation 153: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - InsertUnaryOp -1
   * 9 Weak Mutation 155: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - DeleteStatement: append(I)Ljava/lang/StringBuffer;
   * 10 Weak Mutation 156: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - ReplaceConstant - "/> -> 
   * 11 Weak Mutation 157: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 12 Weak Mutation 146: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:130 - InsertUnaryOp Negation of verbose
   * 13 Weak Mutation 147: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:130 - InsertUnaryOp IINC 1 verbose
   * 14 Weak Mutation 148: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:130 - InsertUnaryOp IINC -1 verbose
   * 15 Weak Mutation 149: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - ReplaceConstant - <count v=" -> 
   * 16 Weak Mutation 150: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 17 Weak Mutation 151: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - InsertUnaryOp Negation
   * 18 Weak Mutation 152: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - InsertUnaryOp +1
   * 19 Weak Mutation 153: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - InsertUnaryOp -1
   * 20 Weak Mutation 154: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - DeleteField: dupCountI
   * 21 Weak Mutation 155: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - DeleteStatement: append(I)Ljava/lang/StringBuffer;
   * 22 Weak Mutation 156: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - ReplaceConstant - "/> -> 
   * 23 Weak Mutation 157: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 24 Weak Mutation 146: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:130 - InsertUnaryOp Negation of verbose
   * 25 Weak Mutation 147: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:130 - InsertUnaryOp IINC 1 verbose
   * 26 Weak Mutation 148: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:130 - InsertUnaryOp IINC -1 verbose
   * 27 Weak Mutation 149: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - ReplaceConstant - <count v=" -> 
   * 28 Weak Mutation 150: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 29 Weak Mutation 151: com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V:131 - InsertUnaryOp Negation
   * 30 com.sleepycat.je.tree.DupCountLN.dumpLogAdditional(Ljava/lang/StringBuffer;Z)V: root-Branch
   */
  @Test
  public void test12()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(1283);
      StringBuffer stringBuffer0 = new StringBuffer();
      dupCountLN0.dumpLog(stringBuffer0, false);
      assertEquals(4294968705L, dupCountLN0.getNodeId());
      assertEquals(78, stringBuffer0.length());
  }

  //Test case number: 13
  /*
   * 44 covered goals:
   * 1 com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;: I9 Branch 6 IFEQ L80 - true
   * 2 com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;: I64 Branch 7 IFEQ L88 - true
   * 3 Weak Mutation 3: com.sleepycat.je.tree.DupCountLN.<init>()V:27 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 64: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:80 - InsertUnaryOp Negation of dumpTags
   * 5 Weak Mutation 65: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:80 - InsertUnaryOp IINC 1 dumpTags
   * 6 Weak Mutation 66: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:80 - InsertUnaryOp IINC -1 dumpTags
   * 7 Weak Mutation 67: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:80 - ReplaceComparisonOperator == -> !=
   * 8 Weak Mutation 85: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceConstant - 2 -> 1
   * 9 Weak Mutation 84: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceConstant - 2 -> 0
   * 10 Weak Mutation 87: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceConstant - 2 -> 3
   * 11 Weak Mutation 86: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceConstant - 2 -> -1
   * 12 Weak Mutation 81: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - InsertUnaryOp Negation of nSpaces
   * 13 Weak Mutation 83: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - InsertUnaryOp IINC -1 nSpaces
   * 14 Weak Mutation 82: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - InsertUnaryOp IINC 1 nSpaces
   * 15 Weak Mutation 93: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 16 Weak Mutation 92: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - DeleteStatement: indent(I)Ljava/lang/String;
   * 17 Weak Mutation 95: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 18 Weak Mutation 94: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - ReplaceConstant - <count v=" -> 
   * 19 Weak Mutation 89: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceArithmeticOperator + -> %
   * 20 Weak Mutation 88: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceArithmeticOperator + -> -
   * 21 Weak Mutation 91: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceArithmeticOperator + -> *
   * 22 Weak Mutation 90: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:85 - ReplaceArithmeticOperator + -> /
   * 23 Weak Mutation 102: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 24 Weak Mutation 103: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - ReplaceConstant - 10 -> 0
   * 25 Weak Mutation 100: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - DeleteStatement: append(I)Ljava/lang/StringBuffer;
   * 26 Weak Mutation 101: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - ReplaceConstant - "/> -> 
   * 27 Weak Mutation 98: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - InsertUnaryOp -1
   * 28 Weak Mutation 96: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - InsertUnaryOp Negation
   * 29 Weak Mutation 97: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - InsertUnaryOp +1
   * 30 Weak Mutation 110: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:87 - InsertUnaryOp IINC 1 nSpaces
   * 31 Weak Mutation 111: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:87 - InsertUnaryOp IINC -1 nSpaces
   * 32 Weak Mutation 108: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - DeleteStatement: append(C)Ljava/lang/StringBuffer;
   * 33 Weak Mutation 109: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:87 - InsertUnaryOp Negation of nSpaces
   * 34 Weak Mutation 106: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - ReplaceConstant - 10 -> 9
   * 35 Weak Mutation 107: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - ReplaceConstant - 10 -> 11
   * 36 Weak Mutation 104: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - ReplaceConstant - 10 -> 1
   * 37 Weak Mutation 105: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:86 - ReplaceConstant - 10 -> -1
   * 38 Weak Mutation 117: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:88 - ReplaceComparisonOperator == -> !=
   * 39 Weak Mutation 116: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:88 - InsertUnaryOp IINC -1 dumpTags
   * 40 Weak Mutation 115: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:88 - InsertUnaryOp IINC 1 dumpTags
   * 41 Weak Mutation 114: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:88 - InsertUnaryOp Negation of dumpTags
   * 42 Weak Mutation 113: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:87 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuffer;
   * 43 Weak Mutation 112: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:87 - ReplaceConstant - 0 -> 1
   * 44 Weak Mutation 125: com.sleepycat.je.tree.DupCountLN.dumpString(IZ)Ljava/lang/String;:92 - DeleteStatement: toString()Ljava/lang/String;
   */
  @Test
  public void test13()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      String string0 = dupCountLN0.dumpString(26, false);
      assertEquals(4294968760L, dupCountLN0.getLastId());
      assertEquals("                            <count v=\"0\"/>\n                            <node>0</node>\n", string0);
  }
}
