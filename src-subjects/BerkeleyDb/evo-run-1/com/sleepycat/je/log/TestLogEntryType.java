/*
 * This file was automatically generated by EvoSuite
 */

package com.sleepycat.je.log;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.log.FileHeader;
import com.sleepycat.je.log.LogEntryType;
import com.sleepycat.je.log.entry.LNLogEntry;
import com.sleepycat.je.log.entry.SingleItemLogEntry;
import com.sleepycat.je.tree.INDeleteInfo;
import com.sleepycat.je.tree.NameLN;
import java.util.Set;

@RunWith(EvoSuiteRunner.class)
public class TestLogEntryType {


  //Test case number: 0
  /*
   * 23 covered goals:
   * 1 Weak Mutation 0: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceVariable typeNum -> version
   * 2 Weak Mutation 1: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - InsertUnaryOp Negation of typeNum
   * 3 Weak Mutation 2: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - InsertUnaryOp IINC 1 typeNum
   * 4 Weak Mutation 3: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - InsertUnaryOp IINC -1 typeNum
   * 5 Weak Mutation 4: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 15 -> 0
   * 6 Weak Mutation 5: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 15 -> 1
   * 7 Weak Mutation 6: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 15 -> -1
   * 8 Weak Mutation 7: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 15 -> 14
   * 9 Weak Mutation 8: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 15 -> 16
   * 10 Weak Mutation 11: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceComparisonOperator > -> -2
   * 11 Weak Mutation 13: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 0 -> 1
   * 12 com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z: I4 Branch 1 IF_ICMPGT L48 - true
   * 13 Weak Mutation 0: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceVariable typeNum -> version
   * 14 Weak Mutation 1: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - InsertUnaryOp Negation of typeNum
   * 15 Weak Mutation 2: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - InsertUnaryOp IINC 1 typeNum
   * 16 Weak Mutation 3: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - InsertUnaryOp IINC -1 typeNum
   * 17 Weak Mutation 4: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 15 -> 0
   * 18 Weak Mutation 5: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 15 -> 1
   * 19 Weak Mutation 6: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 15 -> -1
   * 20 Weak Mutation 7: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 15 -> 14
   * 21 Weak Mutation 8: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 15 -> 16
   * 22 Weak Mutation 11: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceComparisonOperator > -> -2
   * 23 Weak Mutation 13: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test0()  throws Throwable  {
      boolean boolean0 = LogEntryType.isNodeType((byte)32, (byte)4);
      assertEquals(false, boolean0);
  }

  //Test case number: 1
  /*
   * 5 covered goals:
   * 1 Weak Mutation 9: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceComparisonOperator > -> >=
   * 2 Weak Mutation 12: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 1 -> 0
   * 3 com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z: I4 Branch 1 IF_ICMPGT L48 - false
   * 4 Weak Mutation 9: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceComparisonOperator > -> >=
   * 5 Weak Mutation 12: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test1()  throws Throwable  {
      boolean boolean0 = LogEntryType.isNodeType((byte)15, (byte)15);
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 11 covered goals:
   * 1 Weak Mutation 10: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceComparisonOperator > -> !=
   * 2 Weak Mutation 1: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - InsertUnaryOp Negation of typeNum
   * 3 Weak Mutation 2: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - InsertUnaryOp IINC 1 typeNum
   * 4 Weak Mutation 3: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - InsertUnaryOp IINC -1 typeNum
   * 5 Weak Mutation 4: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 15 -> 0
   * 6 Weak Mutation 5: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 15 -> 1
   * 7 Weak Mutation 6: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 15 -> -1
   * 8 Weak Mutation 7: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 15 -> 14
   * 9 Weak Mutation 8: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 15 -> 16
   * 10 Weak Mutation 12: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceConstant - 1 -> 0
   * 11 Weak Mutation 10: com.sleepycat.je.log.LogEntryType.isNodeType(BB)Z:48 - ReplaceComparisonOperator > -> !=
   */
  @Test
  public void test2()  throws Throwable  {
      boolean boolean0 = LogEntryType.isNodeType((byte) (-25), (byte) (-25));
      assertEquals(true, boolean0);
  }

  //Test case number: 3
  /*
   * 19 covered goals:
   * 1 Weak Mutation 42: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - DeleteField: typeNumB
   * 2 Weak Mutation 43: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 15 -> 0
   * 3 Weak Mutation 41: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - InsertUnaryOp Negation
   * 4 Weak Mutation 46: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 15 -> 14
   * 5 Weak Mutation 47: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 15 -> 16
   * 6 Weak Mutation 44: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 15 -> 1
   * 7 Weak Mutation 45: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 15 -> -1
   * 8 Weak Mutation 51: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 1 -> 0
   * 9 Weak Mutation 49: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceComparisonOperator > -> !=
   * 10 com.sleepycat.je.log.LogEntryType.isNodeType()Z: I5 Branch 2 IF_ICMPGT L89 - false
   * 11 Weak Mutation 42: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - DeleteField: typeNumB
   * 12 Weak Mutation 43: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 15 -> 0
   * 13 Weak Mutation 41: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - InsertUnaryOp Negation
   * 14 Weak Mutation 46: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 15 -> 14
   * 15 Weak Mutation 47: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 15 -> 16
   * 16 Weak Mutation 44: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 15 -> 1
   * 17 Weak Mutation 45: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 15 -> -1
   * 18 Weak Mutation 51: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 1 -> 0
   * 19 Weak Mutation 49: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceComparisonOperator > -> !=
   */
  @Test
  public void test3()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DUPCOUNTLN;
      boolean boolean0 = logEntryType0.isNodeType();
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 5 covered goals:
   * 1 Weak Mutation 50: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceComparisonOperator > -> -2
   * 2 Weak Mutation 52: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 0 -> 1
   * 3 com.sleepycat.je.log.LogEntryType.isNodeType()Z: I5 Branch 2 IF_ICMPGT L89 - true
   * 4 Weak Mutation 50: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceComparisonOperator > -> -2
   * 5 Weak Mutation 52: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test4()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_IN_DELETE_INFO;
      boolean boolean0 = logEntryType0.isNodeType();
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 10 covered goals:
   * 1 Weak Mutation 48: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceComparisonOperator > -> >=
   * 2 Weak Mutation 42: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - DeleteField: typeNumB
   * 3 Weak Mutation 43: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 15 -> 0
   * 4 Weak Mutation 41: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - InsertUnaryOp Negation
   * 5 Weak Mutation 46: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 15 -> 14
   * 6 Weak Mutation 47: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 15 -> 16
   * 7 Weak Mutation 44: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 15 -> 1
   * 8 Weak Mutation 45: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 15 -> -1
   * 9 Weak Mutation 51: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceConstant - 1 -> 0
   * 10 Weak Mutation 48: com.sleepycat.je.log.LogEntryType.isNodeType()Z:89 - ReplaceComparisonOperator > -> >=
   */
  @Test
  public void test5()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DBIN;
      boolean boolean0 = logEntryType0.isNodeType();
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 54 covered goals:
   * 1 Weak Mutation 55: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp IINC 1 typeNum
   * 2 Weak Mutation 54: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp Negation of typeNum
   * 3 Weak Mutation 53: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceVariable typeNum -> version
   * 4 Weak Mutation 59: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceComparisonOperator <= -> -1
   * 5 Weak Mutation 56: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp IINC -1 typeNum
   * 6 Weak Mutation 63: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp IINC -1 typeNum
   * 7 Weak Mutation 62: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp IINC 1 typeNum
   * 8 Weak Mutation 61: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp Negation of typeNum
   * 9 Weak Mutation 60: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceVariable typeNum -> version
   * 10 Weak Mutation 68: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceConstant - 27 -> 28
   * 11 Weak Mutation 69: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceComparisonOperator <= -> ==
   * 12 Weak Mutation 64: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceConstant - 27 -> 0
   * 13 Weak Mutation 65: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceConstant - 27 -> 1
   * 14 Weak Mutation 66: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceConstant - 27 -> -1
   * 15 Weak Mutation 67: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceConstant - 27 -> 26
   * 16 Weak Mutation 76: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - InsertUnaryOp IINC 1 typeNum
   * 17 Weak Mutation 77: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - InsertUnaryOp IINC -1 typeNum
   * 18 Weak Mutation 78: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceConstant - 1 -> 0
   * 19 Weak Mutation 79: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceArithmeticOperator - -> +
   * 20 Weak Mutation 72: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceVariable LOG_TYPES -> IN_TYPES
   * 21 Weak Mutation 73: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - DeleteField: LOG_TYPES[Lcom/sleepycat/je/log/LogEntryType;
   * 22 Weak Mutation 74: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceVariable typeNum -> version
   * 23 Weak Mutation 75: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - InsertUnaryOp Negation of typeNum
   * 24 Weak Mutation 81: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceArithmeticOperator - -> /
   * 25 Weak Mutation 80: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceArithmeticOperator - -> %
   * 26 Weak Mutation 82: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceArithmeticOperator - -> *
   * 27 com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;: I3 Branch 3 IFLE L95 - false
   * 28 com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;: I6 Branch 4 IF_ICMPLE L95 - true
   * 29 Weak Mutation 55: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp IINC 1 typeNum
   * 30 Weak Mutation 54: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp Negation of typeNum
   * 31 Weak Mutation 53: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceVariable typeNum -> version
   * 32 Weak Mutation 59: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceComparisonOperator <= -> -1
   * 33 Weak Mutation 56: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp IINC -1 typeNum
   * 34 Weak Mutation 63: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp IINC -1 typeNum
   * 35 Weak Mutation 62: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp IINC 1 typeNum
   * 36 Weak Mutation 61: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp Negation of typeNum
   * 37 Weak Mutation 60: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceVariable typeNum -> version
   * 38 Weak Mutation 68: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceConstant - 27 -> 28
   * 39 Weak Mutation 69: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceComparisonOperator <= -> ==
   * 40 Weak Mutation 64: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceConstant - 27 -> 0
   * 41 Weak Mutation 65: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceConstant - 27 -> 1
   * 42 Weak Mutation 66: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceConstant - 27 -> -1
   * 43 Weak Mutation 67: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceConstant - 27 -> 26
   * 44 Weak Mutation 76: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - InsertUnaryOp IINC 1 typeNum
   * 45 Weak Mutation 77: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - InsertUnaryOp IINC -1 typeNum
   * 46 Weak Mutation 78: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceConstant - 1 -> 0
   * 47 Weak Mutation 79: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceArithmeticOperator - -> +
   * 48 Weak Mutation 72: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceVariable LOG_TYPES -> IN_TYPES
   * 49 Weak Mutation 73: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - DeleteField: LOG_TYPES[Lcom/sleepycat/je/log/LogEntryType;
   * 50 Weak Mutation 74: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceVariable typeNum -> version
   * 51 Weak Mutation 75: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - InsertUnaryOp Negation of typeNum
   * 52 Weak Mutation 81: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceArithmeticOperator - -> /
   * 53 Weak Mutation 80: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceArithmeticOperator - -> %
   * 54 Weak Mutation 82: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceArithmeticOperator - -> *
   */
  @Test
  public void test6()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte)4, (byte)1);
      assertNotNull(logEntryType0);
      assertEquals(4, logEntryType0.getTypeNum());
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 Weak Mutation 58: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceComparisonOperator <= -> <
   * 2 com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;: I3 Branch 3 IFLE L95 - true
   * 3 Weak Mutation 58: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceComparisonOperator <= -> <
   */
  @Test
  public void test7()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte)0, (byte)0);
      assertNull(logEntryType0);
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * 1 Weak Mutation 57: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceComparisonOperator <= -> ==
   * 2 Weak Mutation 57: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceComparisonOperator <= -> ==
   */
  @Test
  public void test8()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte) (-62), (byte)0);
      assertNull(logEntryType0);
  }

  //Test case number: 9
  /*
   * 13 covered goals:
   * 1 Weak Mutation 70: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceComparisonOperator <= -> <
   * 2 Weak Mutation 76: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - InsertUnaryOp IINC 1 typeNum
   * 3 Weak Mutation 77: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - InsertUnaryOp IINC -1 typeNum
   * 4 Weak Mutation 78: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceConstant - 1 -> 0
   * 5 Weak Mutation 79: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceArithmeticOperator - -> +
   * 6 Weak Mutation 72: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceVariable LOG_TYPES -> IN_TYPES
   * 7 Weak Mutation 73: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - DeleteField: LOG_TYPES[Lcom/sleepycat/je/log/LogEntryType;
   * 8 Weak Mutation 74: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceVariable typeNum -> version
   * 9 Weak Mutation 75: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - InsertUnaryOp Negation of typeNum
   * 10 Weak Mutation 81: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceArithmeticOperator - -> /
   * 11 Weak Mutation 80: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceArithmeticOperator - -> %
   * 12 Weak Mutation 82: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:98 - ReplaceArithmeticOperator - -> *
   * 13 Weak Mutation 70: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceComparisonOperator <= -> <
   */
  @Test
  public void test9()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte)27, (byte)3);
      assertNotNull(logEntryType0);
      assertEquals(27, logEntryType0.getTypeNum());
  }

  //Test case number: 10
  /*
   * 17 covered goals:
   * 1 Weak Mutation 71: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceComparisonOperator <= -> -1
   * 2 com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;: I6 Branch 4 IF_ICMPLE L95 - false
   * 3 Weak Mutation 55: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp IINC 1 typeNum
   * 4 Weak Mutation 54: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp Negation of typeNum
   * 5 Weak Mutation 53: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceVariable typeNum -> version
   * 6 Weak Mutation 59: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceComparisonOperator <= -> -1
   * 7 Weak Mutation 56: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp IINC -1 typeNum
   * 8 Weak Mutation 63: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp IINC -1 typeNum
   * 9 Weak Mutation 62: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp IINC 1 typeNum
   * 10 Weak Mutation 61: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - InsertUnaryOp Negation of typeNum
   * 11 Weak Mutation 60: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceVariable typeNum -> version
   * 12 Weak Mutation 68: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceConstant - 27 -> 28
   * 13 Weak Mutation 64: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceConstant - 27 -> 0
   * 14 Weak Mutation 65: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceConstant - 27 -> 1
   * 15 Weak Mutation 66: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceConstant - 27 -> -1
   * 16 Weak Mutation 67: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceConstant - 27 -> 26
   * 17 Weak Mutation 71: com.sleepycat.je.log.LogEntryType.findType(BB)Lcom/sleepycat/je/log/LogEntryType;:95 - ReplaceComparisonOperator <= -> -1
   */
  @Test
  public void test10()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte)72, (byte)104);
      assertNull(logEntryType0);
  }

  //Test case number: 11
  /*
   * 41 covered goals:
   * 1 Weak Mutation 83: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 93: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceConstant - 27 -> 0
   * 3 Weak Mutation 92: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - InsertUnaryOp IINC -1 i
   * 4 Weak Mutation 95: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceConstant - 27 -> -1
   * 5 Weak Mutation 94: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceConstant - 27 -> 1
   * 6 Weak Mutation 91: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - InsertUnaryOp IINC 1 i
   * 7 Weak Mutation 90: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - InsertUnaryOp Negation of i
   * 8 Weak Mutation 100: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceComparisonOperator < -> <=
   * 9 Weak Mutation 99: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceComparisonOperator < -> -2
   * 10 Weak Mutation 96: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceConstant - 27 -> 26
   * 11 Weak Mutation 97: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceConstant - 27 -> 28
   * 12 Weak Mutation 85: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:106 - DeleteField: LOG_TYPES[Lcom/sleepycat/je/log/LogEntryType;
   * 13 Weak Mutation 84: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:106 - ReplaceVariable LOG_TYPES -> IN_TYPES
   * 14 Weak Mutation 87: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:106 - InsertUnaryOp IINC 1 i
   * 15 Weak Mutation 86: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:106 - InsertUnaryOp Negation of i
   * 16 Weak Mutation 89: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:106 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 17 Weak Mutation 88: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:106 - InsertUnaryOp IINC -1 i
   * 18 Weak Mutation 205: com.sleepycat.je.log.LogEntryType.hashCode()I:182 - DeleteField: typeNumB
   * 19 Weak Mutation 204: com.sleepycat.je.log.LogEntryType.hashCode()I:182 - InsertUnaryOp Negation
   * 20 com.sleepycat.je.log.LogEntryType.hashCode()I: root-Branch
   * 21 com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;: I26 Branch 5 IF_ICMPLT L105 - true
   * 22 com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;: I26 Branch 5 IF_ICMPLT L105 - false
   * 23 Weak Mutation 85: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:106 - DeleteField: LOG_TYPES[Lcom/sleepycat/je/log/LogEntryType;
   * 24 Weak Mutation 84: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:106 - ReplaceVariable LOG_TYPES -> IN_TYPES
   * 25 Weak Mutation 87: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:106 - InsertUnaryOp IINC 1 i
   * 26 Weak Mutation 86: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:106 - InsertUnaryOp Negation of i
   * 27 Weak Mutation 83: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceConstant - 0 -> 1
   * 28 Weak Mutation 93: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceConstant - 27 -> 0
   * 29 Weak Mutation 92: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - InsertUnaryOp IINC -1 i
   * 30 Weak Mutation 95: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceConstant - 27 -> -1
   * 31 Weak Mutation 94: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceConstant - 27 -> 1
   * 32 Weak Mutation 89: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:106 - DeleteStatement: add(Ljava/lang/Object;)Z
   * 33 Weak Mutation 88: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:106 - InsertUnaryOp IINC -1 i
   * 34 Weak Mutation 91: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - InsertUnaryOp IINC 1 i
   * 35 Weak Mutation 90: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - InsertUnaryOp Negation of i
   * 36 Weak Mutation 100: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceComparisonOperator < -> <=
   * 37 Weak Mutation 99: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceComparisonOperator < -> -2
   * 38 Weak Mutation 96: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceConstant - 27 -> 26
   * 39 Weak Mutation 97: com.sleepycat.je.log.LogEntryType.getAllTypes()Ljava/util/Set;:105 - ReplaceConstant - 27 -> 28
   * 40 Weak Mutation 205: com.sleepycat.je.log.LogEntryType.hashCode()I:182 - DeleteField: typeNumB
   * 41 Weak Mutation 204: com.sleepycat.je.log.LogEntryType.hashCode()I:182 - InsertUnaryOp Negation
   */
  @Test
  public void test11()  throws Throwable  {
      Set<?> set0 = LogEntryType.getAllTypes();
      assertEquals(27, set0.size());
      assertNotNull(set0);
  }

  //Test case number: 12
  /*
   * 3 covered goals:
   * 1 Weak Mutation 101: com.sleepycat.je.log.LogEntryType.getSharedLogEntry()Lcom/sleepycat/je/log/entry/LogEntry;:114 - DeleteField: logEntryLcom/sleepycat/je/log/entry/LogEntry;
   * 2 com.sleepycat.je.log.LogEntryType.getSharedLogEntry()Lcom/sleepycat/je/log/entry/LogEntry;: root-Branch
   * 3 Weak Mutation 101: com.sleepycat.je.log.LogEntryType.getSharedLogEntry()Lcom/sleepycat/je/log/entry/LogEntry;:114 - DeleteField: logEntryLcom/sleepycat/je/log/entry/LogEntry;
   */
  @Test
  public void test12()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_IN_DELETE_INFO;
      SingleItemLogEntry singleItemLogEntry0 = (SingleItemLogEntry)logEntryType0.getSharedLogEntry();
      assertNotNull(singleItemLogEntry0);
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 Weak Mutation 102: com.sleepycat.je.log.LogEntryType.getNewLogEntry()Lcom/sleepycat/je/log/entry/LogEntry;:121 - DeleteField: logEntryLcom/sleepycat/je/log/entry/LogEntry;
   * 2 Weak Mutation 103: com.sleepycat.je.log.LogEntryType.getNewLogEntry()Lcom/sleepycat/je/log/entry/LogEntry;:121 - DeleteStatement: clone()Ljava/lang/Object;
   * 3 com.sleepycat.je.log.LogEntryType.getNewLogEntry()Lcom/sleepycat/je/log/entry/LogEntry;: root-Branch
   * 4 Weak Mutation 102: com.sleepycat.je.log.LogEntryType.getNewLogEntry()Lcom/sleepycat/je/log/entry/LogEntry;:121 - DeleteField: logEntryLcom/sleepycat/je/log/entry/LogEntry;
   * 5 Weak Mutation 103: com.sleepycat.je.log.LogEntryType.getNewLogEntry()Lcom/sleepycat/je/log/entry/LogEntry;:121 - DeleteStatement: clone()Ljava/lang/Object;
   */
  @Test
  public void test13()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DUPCOUNTLN_TRANSACTIONAL;
      LNLogEntry lNLogEntry0 = (LNLogEntry)logEntryType0.getNewLogEntry();
      assertEquals(0L, lNLogEntry0.getNodeId());
  }

  //Test case number: 14
  /*
   * 21 covered goals:
   * 1 Weak Mutation 110: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - ReplaceConstant - -128 -> -129
   * 2 Weak Mutation 111: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - ReplaceConstant - -128 -> -127
   * 3 Weak Mutation 108: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - ReplaceConstant - -128 -> 1
   * 4 Weak Mutation 109: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - ReplaceConstant - -128 -> -1
   * 5 Weak Mutation 106: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - InsertUnaryOp IINC -1 version
   * 6 Weak Mutation 107: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - ReplaceConstant - -128 -> 0
   * 7 Weak Mutation 104: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - InsertUnaryOp Negation of version
   * 8 Weak Mutation 105: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - InsertUnaryOp IINC 1 version
   * 9 Weak Mutation 113: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - ReplaceBitwiseOperator | -> ^
   * 10 Weak Mutation 112: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - ReplaceBitwiseOperator | -> &
   * 11 com.sleepycat.je.log.LogEntryType.setProvisional(B)B: root-Branch
   * 12 Weak Mutation 110: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - ReplaceConstant - -128 -> -129
   * 13 Weak Mutation 111: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - ReplaceConstant - -128 -> -127
   * 14 Weak Mutation 108: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - ReplaceConstant - -128 -> 1
   * 15 Weak Mutation 109: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - ReplaceConstant - -128 -> -1
   * 16 Weak Mutation 106: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - InsertUnaryOp IINC -1 version
   * 17 Weak Mutation 107: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - ReplaceConstant - -128 -> 0
   * 18 Weak Mutation 104: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - InsertUnaryOp Negation of version
   * 19 Weak Mutation 105: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - InsertUnaryOp IINC 1 version
   * 20 Weak Mutation 113: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - ReplaceBitwiseOperator | -> ^
   * 21 Weak Mutation 112: com.sleepycat.je.log.LogEntryType.setProvisional(B)B:131 - ReplaceBitwiseOperator | -> &
   */
  @Test
  public void test14()  throws Throwable  {
      byte byte0 = LogEntryType.setProvisional((byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  //Test case number: 15
  /*
   * 21 covered goals:
   * 1 Weak Mutation 119: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - ReplaceConstant - 127 -> -1
   * 2 Weak Mutation 118: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - ReplaceConstant - 127 -> 1
   * 3 Weak Mutation 117: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - ReplaceConstant - 127 -> 0
   * 4 Weak Mutation 116: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - InsertUnaryOp IINC -1 version
   * 5 Weak Mutation 115: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - InsertUnaryOp IINC 1 version
   * 6 Weak Mutation 114: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - InsertUnaryOp Negation of version
   * 7 Weak Mutation 123: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - ReplaceBitwiseOperator & -> ^
   * 8 Weak Mutation 122: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - ReplaceBitwiseOperator & -> |
   * 9 Weak Mutation 121: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - ReplaceConstant - 127 -> 128
   * 10 Weak Mutation 120: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - ReplaceConstant - 127 -> 126
   * 11 com.sleepycat.je.log.LogEntryType.clearProvisional(B)B: root-Branch
   * 12 Weak Mutation 119: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - ReplaceConstant - 127 -> -1
   * 13 Weak Mutation 118: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - ReplaceConstant - 127 -> 1
   * 14 Weak Mutation 117: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - ReplaceConstant - 127 -> 0
   * 15 Weak Mutation 116: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - InsertUnaryOp IINC -1 version
   * 16 Weak Mutation 115: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - InsertUnaryOp IINC 1 version
   * 17 Weak Mutation 114: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - InsertUnaryOp Negation of version
   * 18 Weak Mutation 123: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - ReplaceBitwiseOperator & -> ^
   * 19 Weak Mutation 122: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - ReplaceBitwiseOperator & -> |
   * 20 Weak Mutation 121: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - ReplaceConstant - 127 -> 128
   * 21 Weak Mutation 120: com.sleepycat.je.log.LogEntryType.clearProvisional(B)B:137 - ReplaceConstant - 127 -> 126
   */
  @Test
  public void test15()  throws Throwable  {
      byte byte0 = LogEntryType.clearProvisional((byte)0);
      assertEquals((byte)0, byte0);
  }

  //Test case number: 16
  /*
   * 25 covered goals:
   * 1 Weak Mutation 127: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - -128 -> 0
   * 2 Weak Mutation 126: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - InsertUnaryOp IINC -1 version
   * 3 Weak Mutation 125: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - InsertUnaryOp IINC 1 version
   * 4 Weak Mutation 124: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - InsertUnaryOp Negation of version
   * 5 Weak Mutation 136: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceComparisonOperator == -> -2
   * 6 Weak Mutation 138: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - 0 -> 1
   * 7 Weak Mutation 129: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - -128 -> -1
   * 8 Weak Mutation 128: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - -128 -> 1
   * 9 Weak Mutation 131: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - -128 -> -127
   * 10 Weak Mutation 130: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - -128 -> -129
   * 11 Weak Mutation 133: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceBitwiseOperator & -> ^
   * 12 Weak Mutation 132: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceBitwiseOperator & -> |
   * 13 com.sleepycat.je.log.LogEntryType.isProvisional(B)Z: I5 Branch 6 IFEQ L143 - true
   * 14 Weak Mutation 127: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - -128 -> 0
   * 15 Weak Mutation 126: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - InsertUnaryOp IINC -1 version
   * 16 Weak Mutation 125: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - InsertUnaryOp IINC 1 version
   * 17 Weak Mutation 124: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - InsertUnaryOp Negation of version
   * 18 Weak Mutation 136: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceComparisonOperator == -> -2
   * 19 Weak Mutation 138: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - 0 -> 1
   * 20 Weak Mutation 129: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - -128 -> -1
   * 21 Weak Mutation 128: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - -128 -> 1
   * 22 Weak Mutation 131: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - -128 -> -127
   * 23 Weak Mutation 130: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - -128 -> -129
   * 24 Weak Mutation 133: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceBitwiseOperator & -> ^
   * 25 Weak Mutation 132: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceBitwiseOperator & -> |
   */
  @Test
  public void test16()  throws Throwable  {
      boolean boolean0 = LogEntryType.isProvisional((byte)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 17
  /*
   * 15 covered goals:
   * 1 Weak Mutation 137: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - 1 -> 0
   * 2 Weak Mutation 135: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceComparisonOperator == -> <=
   * 3 com.sleepycat.je.log.LogEntryType.isProvisional(B)Z: I5 Branch 6 IFEQ L143 - false
   * 4 Weak Mutation 127: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - -128 -> 0
   * 5 Weak Mutation 126: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - InsertUnaryOp IINC -1 version
   * 6 Weak Mutation 125: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - InsertUnaryOp IINC 1 version
   * 7 Weak Mutation 124: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - InsertUnaryOp Negation of version
   * 8 Weak Mutation 129: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - -128 -> -1
   * 9 Weak Mutation 128: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - -128 -> 1
   * 10 Weak Mutation 131: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - -128 -> -127
   * 11 Weak Mutation 130: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - -128 -> -129
   * 12 Weak Mutation 133: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceBitwiseOperator & -> ^
   * 13 Weak Mutation 132: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceBitwiseOperator & -> |
   * 14 Weak Mutation 137: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceConstant - 1 -> 0
   * 15 Weak Mutation 135: com.sleepycat.je.log.LogEntryType.isProvisional(B)Z:143 - ReplaceComparisonOperator == -> <=
   */
  @Test
  public void test17()  throws Throwable  {
      boolean boolean0 = LogEntryType.isProvisional((byte) (-3));
      assertEquals(true, boolean0);
  }

  //Test case number: 18
  /*
   * 5 covered goals:
   * 1 Weak Mutation 139: com.sleepycat.je.log.LogEntryType.getTypeNum()B:146 - InsertUnaryOp Negation
   * 2 Weak Mutation 140: com.sleepycat.je.log.LogEntryType.getTypeNum()B:146 - DeleteField: typeNumB
   * 3 com.sleepycat.je.log.LogEntryType.getTypeNum()B: root-Branch
   * 4 Weak Mutation 139: com.sleepycat.je.log.LogEntryType.getTypeNum()B:146 - InsertUnaryOp Negation
   * 5 Weak Mutation 140: com.sleepycat.je.log.LogEntryType.getTypeNum()B:146 - DeleteField: typeNumB
   */
  @Test
  public void test18()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DUPCOUNTLN;
      byte byte0 = logEntryType0.getTypeNum();
      assertEquals((byte)10, byte0);
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 Weak Mutation 142: com.sleepycat.je.log.LogEntryType.getVersion()B:149 - DeleteField: versionB
   * 2 Weak Mutation 141: com.sleepycat.je.log.LogEntryType.getVersion()B:149 - InsertUnaryOp Negation
   * 3 Weak Mutation 141: com.sleepycat.je.log.LogEntryType.getVersion()B:149 - InsertUnaryOp Negation
   * 4 Weak Mutation 142: com.sleepycat.je.log.LogEntryType.getVersion()B:149 - DeleteField: versionB
   * 5 com.sleepycat.je.log.LogEntryType.getVersion()B: root-Branch
   */
  @Test
  public void test19()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_IN;
      byte byte0 = logEntryType0.getVersion();
      assertEquals((byte)2, byte0);
  }

  //Test case number: 20
  /*
   * 11 covered goals:
   * 1 Weak Mutation 143: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp Negation of typeNum
   * 2 Weak Mutation 144: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp IINC 1 typeNum
   * 3 Weak Mutation 145: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp IINC -1 typeNum
   * 4 Weak Mutation 146: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceComparisonOperator <= -> ==
   * 5 Weak Mutation 161: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 0 -> 1
   * 6 com.sleepycat.je.log.LogEntryType.isValidType(B)Z: I3 Branch 7 IFLE L155 - true
   * 7 Weak Mutation 143: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp Negation of typeNum
   * 8 Weak Mutation 144: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp IINC 1 typeNum
   * 9 Weak Mutation 145: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp IINC -1 typeNum
   * 10 Weak Mutation 146: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceComparisonOperator <= -> ==
   * 11 Weak Mutation 161: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test20()  throws Throwable  {
      boolean boolean0 = LogEntryType.isValidType((byte) (-32));
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 24 covered goals:
   * 1 Weak Mutation 152: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 27 -> 0
   * 2 Weak Mutation 153: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 27 -> 1
   * 3 Weak Mutation 154: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 27 -> -1
   * 4 Weak Mutation 155: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 27 -> 26
   * 5 Weak Mutation 156: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 27 -> 28
   * 6 Weak Mutation 158: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceComparisonOperator > -> !=
   * 7 Weak Mutation 148: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceComparisonOperator <= -> -1
   * 8 Weak Mutation 149: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp Negation of typeNum
   * 9 Weak Mutation 150: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp IINC 1 typeNum
   * 10 Weak Mutation 151: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp IINC -1 typeNum
   * 11 Weak Mutation 160: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 1 -> 0
   * 12 com.sleepycat.je.log.LogEntryType.isValidType(B)Z: I3 Branch 7 IFLE L155 - false
   * 13 com.sleepycat.je.log.LogEntryType.isValidType(B)Z: I6 Branch 8 IF_ICMPGT L155 - false
   * 14 Weak Mutation 152: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 27 -> 0
   * 15 Weak Mutation 153: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 27 -> 1
   * 16 Weak Mutation 154: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 27 -> -1
   * 17 Weak Mutation 155: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 27 -> 26
   * 18 Weak Mutation 156: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 27 -> 28
   * 19 Weak Mutation 158: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceComparisonOperator > -> !=
   * 20 Weak Mutation 148: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceComparisonOperator <= -> -1
   * 21 Weak Mutation 149: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp Negation of typeNum
   * 22 Weak Mutation 150: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp IINC 1 typeNum
   * 23 Weak Mutation 151: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp IINC -1 typeNum
   * 24 Weak Mutation 160: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test21()  throws Throwable  {
      boolean boolean0 = LogEntryType.isValidType((byte)4);
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * 1 Weak Mutation 157: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceComparisonOperator > -> >=
   * 2 Weak Mutation 160: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 1 -> 0
   * 3 Weak Mutation 157: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceComparisonOperator > -> >=
   */
  @Test
  public void test22()  throws Throwable  {
      boolean boolean0 = LogEntryType.isValidType((byte)27);
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 12 covered goals:
   * 1 Weak Mutation 159: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceComparisonOperator > -> -2
   * 2 com.sleepycat.je.log.LogEntryType.isValidType(B)Z: I6 Branch 8 IF_ICMPGT L155 - true
   * 3 Weak Mutation 152: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 27 -> 0
   * 4 Weak Mutation 153: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 27 -> 1
   * 5 Weak Mutation 154: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 27 -> -1
   * 6 Weak Mutation 155: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 27 -> 26
   * 7 Weak Mutation 156: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 27 -> 28
   * 8 Weak Mutation 148: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceComparisonOperator <= -> -1
   * 9 Weak Mutation 149: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp Negation of typeNum
   * 10 Weak Mutation 150: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp IINC 1 typeNum
   * 11 Weak Mutation 151: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp IINC -1 typeNum
   * 12 Weak Mutation 159: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceComparisonOperator > -> -2
   */
  @Test
  public void test23()  throws Throwable  {
      boolean boolean0 = LogEntryType.isValidType((byte)45);
      assertEquals(false, boolean0);
  }

  //Test case number: 24
  /*
   * 6 covered goals:
   * 1 Weak Mutation 147: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceComparisonOperator <= -> <
   * 2 Weak Mutation 143: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp Negation of typeNum
   * 3 Weak Mutation 144: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp IINC 1 typeNum
   * 4 Weak Mutation 145: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - InsertUnaryOp IINC -1 typeNum
   * 5 Weak Mutation 161: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceConstant - 0 -> 1
   * 6 Weak Mutation 147: com.sleepycat.je.log.LogEntryType.isValidType(B)Z:155 - ReplaceComparisonOperator <= -> <
   */
  @Test
  public void test24()  throws Throwable  {
      boolean boolean0 = LogEntryType.isValidType((byte)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 25
  /*
   * 17 covered goals:
   * 1 Weak Mutation 167: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - DeleteField: versionB
   * 2 Weak Mutation 169: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - DeleteStatement: toString()Ljava/lang/String;
   * 3 Weak Mutation 168: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - DeleteStatement: append(I)Ljava/lang/StringBuilder;
   * 4 Weak Mutation 163: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - DeleteStatement: valueOf(Ljava/lang/Object;)Ljava/lang/String;
   * 5 Weak Mutation 162: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - DeleteField: displayNameLjava/lang/String;
   * 6 Weak Mutation 166: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - InsertUnaryOp Negation
   * 7 Weak Mutation 165: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 8 Weak Mutation 164: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - ReplaceConstant - / -> 
   * 9 Weak Mutation 169: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - DeleteStatement: toString()Ljava/lang/String;
   * 10 Weak Mutation 168: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - DeleteStatement: append(I)Ljava/lang/StringBuilder;
   * 11 Weak Mutation 163: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - DeleteStatement: valueOf(Ljava/lang/Object;)Ljava/lang/String;
   * 12 Weak Mutation 162: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - DeleteField: displayNameLjava/lang/String;
   * 13 Weak Mutation 167: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - DeleteField: versionB
   * 14 Weak Mutation 166: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - InsertUnaryOp Negation
   * 15 Weak Mutation 165: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 16 Weak Mutation 164: com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;:158 - ReplaceConstant - / -> 
   * 17 com.sleepycat.je.log.LogEntryType.toString()Ljava/lang/String;: root-Branch
   */
  @Test
  public void test25()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_FILESUMMARYLN;
      String string0 = logEntryType0.toString();
      assertNotNull(string0);
      assertEquals("FileSummaryLN/2", string0);
  }

  //Test case number: 26
  /*
   * 17 covered goals:
   * 1 Weak Mutation 171: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - DeleteField: typeNumB
   * 2 Weak Mutation 170: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - InsertUnaryOp Negation
   * 3 Weak Mutation 175: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - InsertUnaryOp IINC -1 typeNum
   * 4 Weak Mutation 174: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - InsertUnaryOp IINC 1 typeNum
   * 5 Weak Mutation 173: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - InsertUnaryOp Negation of typeNum
   * 6 Weak Mutation 172: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - ReplaceVariable typeNum -> version
   * 7 Weak Mutation 177: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - ReplaceComparisonOperator != -> <
   * 8 Weak Mutation 180: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - ReplaceConstant - 0 -> 1
   * 9 com.sleepycat.je.log.LogEntryType.equalsType(BB)Z: I5 Branch 9 IF_ICMPNE L164 - true
   * 10 Weak Mutation 171: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - DeleteField: typeNumB
   * 11 Weak Mutation 170: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - InsertUnaryOp Negation
   * 12 Weak Mutation 175: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - InsertUnaryOp IINC -1 typeNum
   * 13 Weak Mutation 174: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - InsertUnaryOp IINC 1 typeNum
   * 14 Weak Mutation 173: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - InsertUnaryOp Negation of typeNum
   * 15 Weak Mutation 172: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - ReplaceVariable typeNum -> version
   * 16 Weak Mutation 177: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - ReplaceComparisonOperator != -> <
   * 17 Weak Mutation 180: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test26()  throws Throwable  {
      FileHeader fileHeader0 = new FileHeader();
      LogEntryType logEntryType0 = fileHeader0.getLogType();
      boolean boolean0 = logEntryType0.equalsType((byte)1, (byte)110);
      assertEquals(false, boolean0);
  }

  //Test case number: 27
  /*
   * 5 covered goals:
   * 1 Weak Mutation 178: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - ReplaceComparisonOperator != -> -1
   * 2 Weak Mutation 179: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - ReplaceConstant - 1 -> 0
   * 3 com.sleepycat.je.log.LogEntryType.equalsType(BB)Z: I5 Branch 9 IF_ICMPNE L164 - false
   * 4 Weak Mutation 178: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - ReplaceComparisonOperator != -> -1
   * 5 Weak Mutation 179: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test27()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DUPCOUNTLN;
      boolean boolean0 = logEntryType0.equalsType((byte)10, (byte)10);
      assertEquals(true, boolean0);
  }

  //Test case number: 28
  /*
   * 9 covered goals:
   * 1 Weak Mutation 176: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - ReplaceComparisonOperator != -> >
   * 2 Weak Mutation 171: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - DeleteField: typeNumB
   * 3 Weak Mutation 170: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - InsertUnaryOp Negation
   * 4 Weak Mutation 175: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - InsertUnaryOp IINC -1 typeNum
   * 5 Weak Mutation 174: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - InsertUnaryOp IINC 1 typeNum
   * 6 Weak Mutation 173: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - InsertUnaryOp Negation of typeNum
   * 7 Weak Mutation 172: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - ReplaceVariable typeNum -> version
   * 8 Weak Mutation 180: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - ReplaceConstant - 0 -> 1
   * 9 Weak Mutation 176: com.sleepycat.je.log.LogEntryType.equalsType(BB)Z:164 - ReplaceComparisonOperator != -> >
   */
  @Test
  public void test28()  throws Throwable  {
      FileHeader fileHeader0 = new FileHeader();
      LogEntryType logEntryType0 = fileHeader0.getLogType();
      boolean boolean0 = logEntryType0.equalsType((byte)110, (byte)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 29
  /*
   * 15 covered goals:
   * 1 Weak Mutation 186: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - ReplaceComparisonOperator != -> >
   * 2 Weak Mutation 184: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - InsertUnaryOp IINC 1 typeNum
   * 3 Weak Mutation 185: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - InsertUnaryOp IINC -1 typeNum
   * 4 Weak Mutation 190: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 182: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - DeleteField: typeNumB
   * 6 Weak Mutation 183: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - InsertUnaryOp Negation of typeNum
   * 7 Weak Mutation 181: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - InsertUnaryOp Negation
   * 8 com.sleepycat.je.log.LogEntryType.equalsType(B)Z: I5 Branch 10 IF_ICMPNE L167 - true
   * 9 Weak Mutation 186: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - ReplaceComparisonOperator != -> >
   * 10 Weak Mutation 184: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - InsertUnaryOp IINC 1 typeNum
   * 11 Weak Mutation 185: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - InsertUnaryOp IINC -1 typeNum
   * 12 Weak Mutation 190: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - ReplaceConstant - 0 -> 1
   * 13 Weak Mutation 182: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - DeleteField: typeNumB
   * 14 Weak Mutation 183: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - InsertUnaryOp Negation of typeNum
   * 15 Weak Mutation 181: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - InsertUnaryOp Negation
   */
  @Test
  public void test29()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DUPCOUNTLN;
      boolean boolean0 = logEntryType0.equalsType((byte)99);
      assertEquals(false, boolean0);
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 Weak Mutation 187: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - ReplaceComparisonOperator != -> <
   * 2 Weak Mutation 190: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - ReplaceConstant - 0 -> 1
   * 3 Weak Mutation 187: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - ReplaceComparisonOperator != -> <
   */
  @Test
  public void test30()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_TXN_COMMIT;
      boolean boolean0 = logEntryType0.equalsType((byte) (-25));
      assertEquals(false, boolean0);
  }

  //Test case number: 31
  /*
   * 10 covered goals:
   * 1 Weak Mutation 188: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - ReplaceComparisonOperator != -> -1
   * 2 Weak Mutation 189: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - ReplaceConstant - 1 -> 0
   * 3 com.sleepycat.je.log.LogEntryType.equalsType(B)Z: I5 Branch 10 IF_ICMPNE L167 - false
   * 4 Weak Mutation 184: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - InsertUnaryOp IINC 1 typeNum
   * 5 Weak Mutation 185: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - InsertUnaryOp IINC -1 typeNum
   * 6 Weak Mutation 182: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - DeleteField: typeNumB
   * 7 Weak Mutation 183: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - InsertUnaryOp Negation of typeNum
   * 8 Weak Mutation 181: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - InsertUnaryOp Negation
   * 9 Weak Mutation 188: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - ReplaceComparisonOperator != -> -1
   * 10 Weak Mutation 189: com.sleepycat.je.log.LogEntryType.equalsType(B)Z:167 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test31()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_IN_DELETE_INFO;
      boolean boolean0 = logEntryType0.equalsType((byte)21);
      assertEquals(true, boolean0);
  }

  //Test case number: 32
  /*
   * 5 covered goals:
   * 1 Weak Mutation 191: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:170 - ReplaceComparisonOperator != -> ==
   * 2 Weak Mutation 192: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:171 - ReplaceConstant - 1 -> 0
   * 3 com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z: I4 Branch 11 IF_ACMPNE L170 - false
   * 4 Weak Mutation 191: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:170 - ReplaceComparisonOperator != -> ==
   * 5 Weak Mutation 192: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:171 - ReplaceConstant - 1 -> 0
   */
  @Test
  public void test32()  throws Throwable  {
      FileHeader fileHeader0 = new FileHeader();
      LogEntryType logEntryType0 = fileHeader0.getLogType();
      boolean boolean0 = logEntryType0.equals((Object) logEntryType0);
      assertEquals(true, boolean0);
  }

  //Test case number: 33
  /*
   * 17 covered goals:
   * 1 Weak Mutation 193: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:173 - ReplaceComparisonOperator != -> ==
   * 2 Weak Mutation 200: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - ReplaceComparisonOperator != -> <
   * 3 Weak Mutation 203: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 197: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - InsertUnaryOp Negation
   * 5 Weak Mutation 196: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - DeleteField: typeNumB
   * 6 Weak Mutation 198: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - DeleteField: typeNumB
   * 7 Weak Mutation 195: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - InsertUnaryOp Negation
   * 8 com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z: I4 Branch 11 IF_ACMPNE L170 - true
   * 9 com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z: I13 Branch 12 IFNE L173 - true
   * 10 com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z: I25 Branch 13 IF_ICMPNE L176 - true
   * 11 Weak Mutation 200: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - ReplaceComparisonOperator != -> <
   * 12 Weak Mutation 203: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - ReplaceConstant - 0 -> 1
   * 13 Weak Mutation 197: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - InsertUnaryOp Negation
   * 14 Weak Mutation 196: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - DeleteField: typeNumB
   * 15 Weak Mutation 198: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - DeleteField: typeNumB
   * 16 Weak Mutation 193: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:173 - ReplaceComparisonOperator != -> ==
   * 17 Weak Mutation 195: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - InsertUnaryOp Negation
   */
  @Test
  public void test33()  throws Throwable  {
      FileHeader fileHeader0 = new FileHeader();
      LogEntryType logEntryType0 = fileHeader0.getLogType();
      INDeleteInfo iNDeleteInfo0 = new INDeleteInfo();
      DatabaseId databaseId0 = iNDeleteInfo0.getDatabaseId();
      NameLN nameLN0 = new NameLN(databaseId0);
      LogEntryType logEntryType1 = nameLN0.getLogType();
      boolean boolean0 = logEntryType0.equals((Object) logEntryType1);
      assertEquals(4294968356L, nameLN0.getLastId());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 3 covered goals:
   * 1 Weak Mutation 194: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:174 - ReplaceConstant - 0 -> 1
   * 2 com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z: I13 Branch 12 IFNE L173 - false
   * 3 Weak Mutation 194: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:174 - ReplaceConstant - 0 -> 1
   */
  @Test
  public void test34()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DUPCOUNTLN;
      boolean boolean0 = logEntryType0.equals((Object) "DupCountLN/0");
      assertEquals(false, boolean0);
  }

  //Test case number: 35
  /*
   * 22 covered goals:
   * 1 Weak Mutation 201: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - ReplaceComparisonOperator != -> -1
   * 2 Weak Mutation 202: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - ReplaceConstant - 1 -> 0
   * 3 com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z: I25 Branch 13 IF_ICMPNE L176 - false
   * 4 Weak Mutation 14: com.sleepycat.je.log.LogEntryType.<init>(BB)V:75 - ReplaceVariable typeNum -> version
   * 5 Weak Mutation 15: com.sleepycat.je.log.LogEntryType.<init>(BB)V:75 - InsertUnaryOp Negation of typeNum
   * 6 Weak Mutation 17: com.sleepycat.je.log.LogEntryType.<init>(BB)V:75 - InsertUnaryOp IINC -1 typeNum
   * 7 Weak Mutation 16: com.sleepycat.je.log.LogEntryType.<init>(BB)V:75 - InsertUnaryOp IINC 1 typeNum
   * 8 Weak Mutation 19: com.sleepycat.je.log.LogEntryType.<init>(BB)V:76 - InsertUnaryOp Negation of version
   * 9 Weak Mutation 18: com.sleepycat.je.log.LogEntryType.<init>(BB)V:76 - ReplaceVariable version -> typeNum
   * 10 Weak Mutation 21: com.sleepycat.je.log.LogEntryType.<init>(BB)V:76 - InsertUnaryOp IINC -1 version
   * 11 Weak Mutation 20: com.sleepycat.je.log.LogEntryType.<init>(BB)V:76 - InsertUnaryOp IINC 1 version
   * 12 Weak Mutation 14: com.sleepycat.je.log.LogEntryType.<init>(BB)V:75 - ReplaceVariable typeNum -> version
   * 13 Weak Mutation 15: com.sleepycat.je.log.LogEntryType.<init>(BB)V:75 - InsertUnaryOp Negation of typeNum
   * 14 Weak Mutation 17: com.sleepycat.je.log.LogEntryType.<init>(BB)V:75 - InsertUnaryOp IINC -1 typeNum
   * 15 Weak Mutation 16: com.sleepycat.je.log.LogEntryType.<init>(BB)V:75 - InsertUnaryOp IINC 1 typeNum
   * 16 Weak Mutation 19: com.sleepycat.je.log.LogEntryType.<init>(BB)V:76 - InsertUnaryOp Negation of version
   * 17 Weak Mutation 18: com.sleepycat.je.log.LogEntryType.<init>(BB)V:76 - ReplaceVariable version -> typeNum
   * 18 Weak Mutation 21: com.sleepycat.je.log.LogEntryType.<init>(BB)V:76 - InsertUnaryOp IINC -1 version
   * 19 Weak Mutation 20: com.sleepycat.je.log.LogEntryType.<init>(BB)V:76 - InsertUnaryOp IINC 1 version
   * 20 Weak Mutation 201: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - ReplaceComparisonOperator != -> -1
   * 21 Weak Mutation 202: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - ReplaceConstant - 1 -> 0
   * 22 com.sleepycat.je.log.LogEntryType.<init>(BB)V: root-Branch
   */
  @Test
  public void test35()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DUPCOUNTLN;
      LogEntryType logEntryType1 = new LogEntryType((byte)10, (byte)104);
      boolean boolean0 = logEntryType0.equals((Object) logEntryType1);
      assertEquals(104, logEntryType1.getVersion());
      assertEquals(true, boolean0);
  }

  //Test case number: 36
  /*
   * 9 covered goals:
   * 1 Weak Mutation 199: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - ReplaceComparisonOperator != -> >
   * 2 Weak Mutation 191: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:170 - ReplaceComparisonOperator != -> ==
   * 3 Weak Mutation 203: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 197: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - InsertUnaryOp Negation
   * 5 Weak Mutation 196: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - DeleteField: typeNumB
   * 6 Weak Mutation 198: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - DeleteField: typeNumB
   * 7 Weak Mutation 193: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:173 - ReplaceComparisonOperator != -> ==
   * 8 Weak Mutation 195: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - InsertUnaryOp Negation
   * 9 Weak Mutation 199: com.sleepycat.je.log.LogEntryType.equals(Ljava/lang/Object;)Z:176 - ReplaceComparisonOperator != -> >
   */
  @Test
  public void test36()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DUPCOUNTLN_TRANSACTIONAL;
      LogEntryType logEntryType1 = LogEntryType.LOG_FILESUMMARYLN;
      boolean boolean0 = logEntryType0.equals((Object) logEntryType1);
      assertEquals(false, boolean0);
      assertFalse(logEntryType1.equals(logEntryType0));
  }
}
